// Code generated by ent, DO NOT EDIT.

package warnsmserr

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldAccessOrgList, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldAppName, v))
}

// RecordID applies equality check predicate on the "record_id" field. It's identical to RecordIDEQ.
func RecordID(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldRecordID, v))
}

// ErrorMsg applies equality check predicate on the "error_msg" field. It's identical to ErrorMsgEQ.
func ErrorMsg(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldErrorMsg, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContainsFold(FieldAppName, v))
}

// RecordIDEQ applies the EQ predicate on the "record_id" field.
func RecordIDEQ(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldRecordID, v))
}

// RecordIDNEQ applies the NEQ predicate on the "record_id" field.
func RecordIDNEQ(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldRecordID, v))
}

// RecordIDIn applies the In predicate on the "record_id" field.
func RecordIDIn(vs ...uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldRecordID, vs...))
}

// RecordIDNotIn applies the NotIn predicate on the "record_id" field.
func RecordIDNotIn(vs ...uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldRecordID, vs...))
}

// RecordIDGT applies the GT predicate on the "record_id" field.
func RecordIDGT(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldRecordID, v))
}

// RecordIDGTE applies the GTE predicate on the "record_id" field.
func RecordIDGTE(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldRecordID, v))
}

// RecordIDLT applies the LT predicate on the "record_id" field.
func RecordIDLT(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldRecordID, v))
}

// RecordIDLTE applies the LTE predicate on the "record_id" field.
func RecordIDLTE(v uint64) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldRecordID, v))
}

// ErrorMsgEQ applies the EQ predicate on the "error_msg" field.
func ErrorMsgEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEQ(FieldErrorMsg, v))
}

// ErrorMsgNEQ applies the NEQ predicate on the "error_msg" field.
func ErrorMsgNEQ(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNEQ(FieldErrorMsg, v))
}

// ErrorMsgIn applies the In predicate on the "error_msg" field.
func ErrorMsgIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldIn(FieldErrorMsg, vs...))
}

// ErrorMsgNotIn applies the NotIn predicate on the "error_msg" field.
func ErrorMsgNotIn(vs ...string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldNotIn(FieldErrorMsg, vs...))
}

// ErrorMsgGT applies the GT predicate on the "error_msg" field.
func ErrorMsgGT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGT(FieldErrorMsg, v))
}

// ErrorMsgGTE applies the GTE predicate on the "error_msg" field.
func ErrorMsgGTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldGTE(FieldErrorMsg, v))
}

// ErrorMsgLT applies the LT predicate on the "error_msg" field.
func ErrorMsgLT(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLT(FieldErrorMsg, v))
}

// ErrorMsgLTE applies the LTE predicate on the "error_msg" field.
func ErrorMsgLTE(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldLTE(FieldErrorMsg, v))
}

// ErrorMsgContains applies the Contains predicate on the "error_msg" field.
func ErrorMsgContains(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContains(FieldErrorMsg, v))
}

// ErrorMsgHasPrefix applies the HasPrefix predicate on the "error_msg" field.
func ErrorMsgHasPrefix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasPrefix(FieldErrorMsg, v))
}

// ErrorMsgHasSuffix applies the HasSuffix predicate on the "error_msg" field.
func ErrorMsgHasSuffix(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldHasSuffix(FieldErrorMsg, v))
}

// ErrorMsgEqualFold applies the EqualFold predicate on the "error_msg" field.
func ErrorMsgEqualFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldEqualFold(FieldErrorMsg, v))
}

// ErrorMsgContainsFold applies the ContainsFold predicate on the "error_msg" field.
func ErrorMsgContainsFold(v string) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.FieldContainsFold(FieldErrorMsg, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WarnSmsErr) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WarnSmsErr) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WarnSmsErr) predicate.WarnSmsErr {
	return predicate.WarnSmsErr(sql.NotPredicates(p))
}
