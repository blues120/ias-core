// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/fileupload"
)

// FileUpload is the model entity for the FileUpload schema.
type FileUpload struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 文件提供者，比如算法文件来自 ctyun_ias/sophgo_park/sophgo_city
	Provider string `json:"provider,omitempty"`
	// 文件名
	FileName string `json:"file_name,omitempty"`
	// 文件 md5
	Md5 string `json:"md5,omitempty"`
	// 文件大小字节数，前端显示用
	TotalBytes uint64 `json:"total_bytes,omitempty"`
	// 文件 etag,不一定等于 md5
	Etag string `json:"etag,omitempty"`
	// oss 存储的 key
	Key string `json:"key,omitempty"`
	// oss 上传的标识，用于断点续传
	UploadID string `json:"upload_id,omitempty"`
	// 上传状态
	Status string `json:"status,omitempty"`
	// 类型,docker image或者文件
	Type string `json:"type,omitempty"`
	// 算法组id
	AlgoGroupID uint64 `json:"algo_group_id,omitempty"`
	// 安装meta信息
	Meta         string `json:"meta,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileUpload) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileupload.FieldID, fileupload.FieldTotalBytes, fileupload.FieldAlgoGroupID:
			values[i] = new(sql.NullInt64)
		case fileupload.FieldProvider, fileupload.FieldFileName, fileupload.FieldMd5, fileupload.FieldEtag, fileupload.FieldKey, fileupload.FieldUploadID, fileupload.FieldStatus, fileupload.FieldType, fileupload.FieldMeta:
			values[i] = new(sql.NullString)
		case fileupload.FieldCreatedAt, fileupload.FieldUpdatedAt, fileupload.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileUpload fields.
func (fu *FileUpload) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileupload.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fu.ID = uint64(value.Int64)
		case fileupload.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fu.CreatedAt = value.Time
			}
		case fileupload.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fu.UpdatedAt = value.Time
			}
		case fileupload.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fu.DeletedAt = value.Time
			}
		case fileupload.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				fu.Provider = value.String
			}
		case fileupload.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				fu.FileName = value.String
			}
		case fileupload.FieldMd5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field md5", values[i])
			} else if value.Valid {
				fu.Md5 = value.String
			}
		case fileupload.FieldTotalBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_bytes", values[i])
			} else if value.Valid {
				fu.TotalBytes = uint64(value.Int64)
			}
		case fileupload.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				fu.Etag = value.String
			}
		case fileupload.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				fu.Key = value.String
			}
		case fileupload.FieldUploadID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upload_id", values[i])
			} else if value.Valid {
				fu.UploadID = value.String
			}
		case fileupload.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fu.Status = value.String
			}
		case fileupload.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fu.Type = value.String
			}
		case fileupload.FieldAlgoGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_id", values[i])
			} else if value.Valid {
				fu.AlgoGroupID = uint64(value.Int64)
			}
		case fileupload.FieldMeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value.Valid {
				fu.Meta = value.String
			}
		default:
			fu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileUpload.
// This includes values selected through modifiers, order, etc.
func (fu *FileUpload) Value(name string) (ent.Value, error) {
	return fu.selectValues.Get(name)
}

// Update returns a builder for updating this FileUpload.
// Note that you need to call FileUpload.Unwrap() before calling this method if this FileUpload
// was returned from a transaction, and the transaction was committed or rolled back.
func (fu *FileUpload) Update() *FileUploadUpdateOne {
	return NewFileUploadClient(fu.config).UpdateOne(fu)
}

// Unwrap unwraps the FileUpload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fu *FileUpload) Unwrap() *FileUpload {
	_tx, ok := fu.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileUpload is not a transactional entity")
	}
	fu.config.driver = _tx.drv
	return fu
}

// String implements the fmt.Stringer.
func (fu *FileUpload) String() string {
	var builder strings.Builder
	builder.WriteString("FileUpload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fu.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fu.Provider)
	builder.WriteString(", ")
	builder.WriteString("file_name=")
	builder.WriteString(fu.FileName)
	builder.WriteString(", ")
	builder.WriteString("md5=")
	builder.WriteString(fu.Md5)
	builder.WriteString(", ")
	builder.WriteString("total_bytes=")
	builder.WriteString(fmt.Sprintf("%v", fu.TotalBytes))
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(fu.Etag)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(fu.Key)
	builder.WriteString(", ")
	builder.WriteString("upload_id=")
	builder.WriteString(fu.UploadID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fu.Status)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fu.Type)
	builder.WriteString(", ")
	builder.WriteString("algo_group_id=")
	builder.WriteString(fmt.Sprintf("%v", fu.AlgoGroupID))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fu.Meta)
	builder.WriteByte(')')
	return builder.String()
}

// FileUploads is a parsable slice of FileUpload.
type FileUploads []*FileUpload
