// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warningtype"
)

// WarningTypeUpdate is the builder for updating WarningType entities.
type WarningTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *WarningTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarningTypeUpdate builder.
func (wtu *WarningTypeUpdate) Where(ps ...predicate.WarningType) *WarningTypeUpdate {
	wtu.mutation.Where(ps...)
	return wtu
}

// SetUpdatedAt sets the "updated_at" field.
func (wtu *WarningTypeUpdate) SetUpdatedAt(t time.Time) *WarningTypeUpdate {
	wtu.mutation.SetUpdatedAt(t)
	return wtu
}

// SetDeletedAt sets the "deleted_at" field.
func (wtu *WarningTypeUpdate) SetDeletedAt(t time.Time) *WarningTypeUpdate {
	wtu.mutation.SetDeletedAt(t)
	return wtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtu *WarningTypeUpdate) SetNillableDeletedAt(t *time.Time) *WarningTypeUpdate {
	if t != nil {
		wtu.SetDeletedAt(*t)
	}
	return wtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wtu *WarningTypeUpdate) ClearDeletedAt() *WarningTypeUpdate {
	wtu.mutation.ClearDeletedAt()
	return wtu
}

// SetAlarmType sets the "alarm_type" field.
func (wtu *WarningTypeUpdate) SetAlarmType(s string) *WarningTypeUpdate {
	wtu.mutation.SetAlarmType(s)
	return wtu
}

// SetNillableAlarmType sets the "alarm_type" field if the given value is not nil.
func (wtu *WarningTypeUpdate) SetNillableAlarmType(s *string) *WarningTypeUpdate {
	if s != nil {
		wtu.SetAlarmType(*s)
	}
	return wtu
}

// SetAlarmName sets the "alarm_name" field.
func (wtu *WarningTypeUpdate) SetAlarmName(s string) *WarningTypeUpdate {
	wtu.mutation.SetAlarmName(s)
	return wtu
}

// SetNillableAlarmName sets the "alarm_name" field if the given value is not nil.
func (wtu *WarningTypeUpdate) SetNillableAlarmName(s *string) *WarningTypeUpdate {
	if s != nil {
		wtu.SetAlarmName(*s)
	}
	return wtu
}

// Mutation returns the WarningTypeMutation object of the builder.
func (wtu *WarningTypeUpdate) Mutation() *WarningTypeMutation {
	return wtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wtu *WarningTypeUpdate) Save(ctx context.Context) (int, error) {
	if err := wtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wtu.sqlSave, wtu.mutation, wtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtu *WarningTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := wtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wtu *WarningTypeUpdate) Exec(ctx context.Context) error {
	_, err := wtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtu *WarningTypeUpdate) ExecX(ctx context.Context) {
	if err := wtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtu *WarningTypeUpdate) defaults() error {
	if _, ok := wtu.mutation.UpdatedAt(); !ok {
		if warningtype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warningtype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warningtype.UpdateDefaultUpdatedAt()
		wtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wtu *WarningTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarningTypeUpdate {
	wtu.modifiers = append(wtu.modifiers, modifiers...)
	return wtu
}

func (wtu *WarningTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(warningtype.Table, warningtype.Columns, sqlgraph.NewFieldSpec(warningtype.FieldID, field.TypeUint64))
	if ps := wtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtu.mutation.UpdatedAt(); ok {
		_spec.SetField(warningtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wtu.mutation.DeletedAt(); ok {
		_spec.SetField(warningtype.FieldDeletedAt, field.TypeTime, value)
	}
	if wtu.mutation.DeletedAtCleared() {
		_spec.ClearField(warningtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wtu.mutation.AlarmType(); ok {
		_spec.SetField(warningtype.FieldAlarmType, field.TypeString, value)
	}
	if value, ok := wtu.mutation.AlarmName(); ok {
		_spec.SetField(warningtype.FieldAlarmName, field.TypeString, value)
	}
	_spec.AddModifiers(wtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warningtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wtu.mutation.done = true
	return n, nil
}

// WarningTypeUpdateOne is the builder for updating a single WarningType entity.
type WarningTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarningTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wtuo *WarningTypeUpdateOne) SetUpdatedAt(t time.Time) *WarningTypeUpdateOne {
	wtuo.mutation.SetUpdatedAt(t)
	return wtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wtuo *WarningTypeUpdateOne) SetDeletedAt(t time.Time) *WarningTypeUpdateOne {
	wtuo.mutation.SetDeletedAt(t)
	return wtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtuo *WarningTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *WarningTypeUpdateOne {
	if t != nil {
		wtuo.SetDeletedAt(*t)
	}
	return wtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wtuo *WarningTypeUpdateOne) ClearDeletedAt() *WarningTypeUpdateOne {
	wtuo.mutation.ClearDeletedAt()
	return wtuo
}

// SetAlarmType sets the "alarm_type" field.
func (wtuo *WarningTypeUpdateOne) SetAlarmType(s string) *WarningTypeUpdateOne {
	wtuo.mutation.SetAlarmType(s)
	return wtuo
}

// SetNillableAlarmType sets the "alarm_type" field if the given value is not nil.
func (wtuo *WarningTypeUpdateOne) SetNillableAlarmType(s *string) *WarningTypeUpdateOne {
	if s != nil {
		wtuo.SetAlarmType(*s)
	}
	return wtuo
}

// SetAlarmName sets the "alarm_name" field.
func (wtuo *WarningTypeUpdateOne) SetAlarmName(s string) *WarningTypeUpdateOne {
	wtuo.mutation.SetAlarmName(s)
	return wtuo
}

// SetNillableAlarmName sets the "alarm_name" field if the given value is not nil.
func (wtuo *WarningTypeUpdateOne) SetNillableAlarmName(s *string) *WarningTypeUpdateOne {
	if s != nil {
		wtuo.SetAlarmName(*s)
	}
	return wtuo
}

// Mutation returns the WarningTypeMutation object of the builder.
func (wtuo *WarningTypeUpdateOne) Mutation() *WarningTypeMutation {
	return wtuo.mutation
}

// Where appends a list predicates to the WarningTypeUpdate builder.
func (wtuo *WarningTypeUpdateOne) Where(ps ...predicate.WarningType) *WarningTypeUpdateOne {
	wtuo.mutation.Where(ps...)
	return wtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wtuo *WarningTypeUpdateOne) Select(field string, fields ...string) *WarningTypeUpdateOne {
	wtuo.fields = append([]string{field}, fields...)
	return wtuo
}

// Save executes the query and returns the updated WarningType entity.
func (wtuo *WarningTypeUpdateOne) Save(ctx context.Context) (*WarningType, error) {
	if err := wtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wtuo.sqlSave, wtuo.mutation, wtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtuo *WarningTypeUpdateOne) SaveX(ctx context.Context) *WarningType {
	node, err := wtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wtuo *WarningTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := wtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtuo *WarningTypeUpdateOne) ExecX(ctx context.Context) {
	if err := wtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtuo *WarningTypeUpdateOne) defaults() error {
	if _, ok := wtuo.mutation.UpdatedAt(); !ok {
		if warningtype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warningtype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warningtype.UpdateDefaultUpdatedAt()
		wtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wtuo *WarningTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarningTypeUpdateOne {
	wtuo.modifiers = append(wtuo.modifiers, modifiers...)
	return wtuo
}

func (wtuo *WarningTypeUpdateOne) sqlSave(ctx context.Context) (_node *WarningType, err error) {
	_spec := sqlgraph.NewUpdateSpec(warningtype.Table, warningtype.Columns, sqlgraph.NewFieldSpec(warningtype.FieldID, field.TypeUint64))
	id, ok := wtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WarningType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warningtype.FieldID)
		for _, f := range fields {
			if !warningtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warningtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warningtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wtuo.mutation.DeletedAt(); ok {
		_spec.SetField(warningtype.FieldDeletedAt, field.TypeTime, value)
	}
	if wtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(warningtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wtuo.mutation.AlarmType(); ok {
		_spec.SetField(warningtype.FieldAlarmType, field.TypeString, value)
	}
	if value, ok := wtuo.mutation.AlarmName(); ok {
		_spec.SetField(warningtype.FieldAlarmName, field.TypeString, value)
	}
	_spec.AddModifiers(wtuo.modifiers...)
	_node = &WarningType{config: wtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warningtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wtuo.mutation.done = true
	return _node, nil
}
