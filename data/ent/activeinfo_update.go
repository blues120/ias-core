// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/activeinfo"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ActiveInfoUpdate is the builder for updating ActiveInfo entities.
type ActiveInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *ActiveInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActiveInfoUpdate builder.
func (aiu *ActiveInfoUpdate) Where(ps ...predicate.ActiveInfo) *ActiveInfoUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *ActiveInfoUpdate) SetUpdatedAt(t time.Time) *ActiveInfoUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetDeletedAt sets the "deleted_at" field.
func (aiu *ActiveInfoUpdate) SetDeletedAt(t time.Time) *ActiveInfoUpdate {
	aiu.mutation.SetDeletedAt(t)
	return aiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aiu *ActiveInfoUpdate) SetNillableDeletedAt(t *time.Time) *ActiveInfoUpdate {
	if t != nil {
		aiu.SetDeletedAt(*t)
	}
	return aiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aiu *ActiveInfoUpdate) ClearDeletedAt() *ActiveInfoUpdate {
	aiu.mutation.ClearDeletedAt()
	return aiu
}

// SetProcessID sets the "process_id" field.
func (aiu *ActiveInfoUpdate) SetProcessID(s string) *ActiveInfoUpdate {
	aiu.mutation.SetProcessID(s)
	return aiu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (aiu *ActiveInfoUpdate) SetNillableProcessID(s *string) *ActiveInfoUpdate {
	if s != nil {
		aiu.SetProcessID(*s)
	}
	return aiu
}

// SetStartTime sets the "start_time" field.
func (aiu *ActiveInfoUpdate) SetStartTime(s string) *ActiveInfoUpdate {
	aiu.mutation.SetStartTime(s)
	return aiu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (aiu *ActiveInfoUpdate) SetNillableStartTime(s *string) *ActiveInfoUpdate {
	if s != nil {
		aiu.SetStartTime(*s)
	}
	return aiu
}

// SetResult sets the "result" field.
func (aiu *ActiveInfoUpdate) SetResult(s string) *ActiveInfoUpdate {
	aiu.mutation.SetResult(s)
	return aiu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (aiu *ActiveInfoUpdate) SetNillableResult(s *string) *ActiveInfoUpdate {
	if s != nil {
		aiu.SetResult(*s)
	}
	return aiu
}

// SetMsg sets the "msg" field.
func (aiu *ActiveInfoUpdate) SetMsg(s string) *ActiveInfoUpdate {
	aiu.mutation.SetMsg(s)
	return aiu
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (aiu *ActiveInfoUpdate) SetNillableMsg(s *string) *ActiveInfoUpdate {
	if s != nil {
		aiu.SetMsg(*s)
	}
	return aiu
}

// Mutation returns the ActiveInfoMutation object of the builder.
func (aiu *ActiveInfoUpdate) Mutation() *ActiveInfoMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ActiveInfoUpdate) Save(ctx context.Context) (int, error) {
	if err := aiu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ActiveInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ActiveInfoUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ActiveInfoUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiu *ActiveInfoUpdate) defaults() error {
	if _, ok := aiu.mutation.UpdatedAt(); !ok {
		if activeinfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized activeinfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := activeinfo.UpdateDefaultUpdatedAt()
		aiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aiu *ActiveInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActiveInfoUpdate {
	aiu.modifiers = append(aiu.modifiers, modifiers...)
	return aiu
}

func (aiu *ActiveInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(activeinfo.Table, activeinfo.Columns, sqlgraph.NewFieldSpec(activeinfo.FieldID, field.TypeUint64))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(activeinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.DeletedAt(); ok {
		_spec.SetField(activeinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if aiu.mutation.DeletedAtCleared() {
		_spec.ClearField(activeinfo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aiu.mutation.ProcessID(); ok {
		_spec.SetField(activeinfo.FieldProcessID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.StartTime(); ok {
		_spec.SetField(activeinfo.FieldStartTime, field.TypeString, value)
	}
	if value, ok := aiu.mutation.Result(); ok {
		_spec.SetField(activeinfo.FieldResult, field.TypeString, value)
	}
	if value, ok := aiu.mutation.Msg(); ok {
		_spec.SetField(activeinfo.FieldMsg, field.TypeString, value)
	}
	_spec.AddModifiers(aiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activeinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// ActiveInfoUpdateOne is the builder for updating a single ActiveInfo entity.
type ActiveInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActiveInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *ActiveInfoUpdateOne) SetUpdatedAt(t time.Time) *ActiveInfoUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aiuo *ActiveInfoUpdateOne) SetDeletedAt(t time.Time) *ActiveInfoUpdateOne {
	aiuo.mutation.SetDeletedAt(t)
	return aiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aiuo *ActiveInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *ActiveInfoUpdateOne {
	if t != nil {
		aiuo.SetDeletedAt(*t)
	}
	return aiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aiuo *ActiveInfoUpdateOne) ClearDeletedAt() *ActiveInfoUpdateOne {
	aiuo.mutation.ClearDeletedAt()
	return aiuo
}

// SetProcessID sets the "process_id" field.
func (aiuo *ActiveInfoUpdateOne) SetProcessID(s string) *ActiveInfoUpdateOne {
	aiuo.mutation.SetProcessID(s)
	return aiuo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (aiuo *ActiveInfoUpdateOne) SetNillableProcessID(s *string) *ActiveInfoUpdateOne {
	if s != nil {
		aiuo.SetProcessID(*s)
	}
	return aiuo
}

// SetStartTime sets the "start_time" field.
func (aiuo *ActiveInfoUpdateOne) SetStartTime(s string) *ActiveInfoUpdateOne {
	aiuo.mutation.SetStartTime(s)
	return aiuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (aiuo *ActiveInfoUpdateOne) SetNillableStartTime(s *string) *ActiveInfoUpdateOne {
	if s != nil {
		aiuo.SetStartTime(*s)
	}
	return aiuo
}

// SetResult sets the "result" field.
func (aiuo *ActiveInfoUpdateOne) SetResult(s string) *ActiveInfoUpdateOne {
	aiuo.mutation.SetResult(s)
	return aiuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (aiuo *ActiveInfoUpdateOne) SetNillableResult(s *string) *ActiveInfoUpdateOne {
	if s != nil {
		aiuo.SetResult(*s)
	}
	return aiuo
}

// SetMsg sets the "msg" field.
func (aiuo *ActiveInfoUpdateOne) SetMsg(s string) *ActiveInfoUpdateOne {
	aiuo.mutation.SetMsg(s)
	return aiuo
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (aiuo *ActiveInfoUpdateOne) SetNillableMsg(s *string) *ActiveInfoUpdateOne {
	if s != nil {
		aiuo.SetMsg(*s)
	}
	return aiuo
}

// Mutation returns the ActiveInfoMutation object of the builder.
func (aiuo *ActiveInfoUpdateOne) Mutation() *ActiveInfoMutation {
	return aiuo.mutation
}

// Where appends a list predicates to the ActiveInfoUpdate builder.
func (aiuo *ActiveInfoUpdateOne) Where(ps ...predicate.ActiveInfo) *ActiveInfoUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *ActiveInfoUpdateOne) Select(field string, fields ...string) *ActiveInfoUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated ActiveInfo entity.
func (aiuo *ActiveInfoUpdateOne) Save(ctx context.Context) (*ActiveInfo, error) {
	if err := aiuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ActiveInfoUpdateOne) SaveX(ctx context.Context) *ActiveInfo {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ActiveInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ActiveInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiuo *ActiveInfoUpdateOne) defaults() error {
	if _, ok := aiuo.mutation.UpdatedAt(); !ok {
		if activeinfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized activeinfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := activeinfo.UpdateDefaultUpdatedAt()
		aiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aiuo *ActiveInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActiveInfoUpdateOne {
	aiuo.modifiers = append(aiuo.modifiers, modifiers...)
	return aiuo
}

func (aiuo *ActiveInfoUpdateOne) sqlSave(ctx context.Context) (_node *ActiveInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(activeinfo.Table, activeinfo.Columns, sqlgraph.NewFieldSpec(activeinfo.FieldID, field.TypeUint64))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActiveInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activeinfo.FieldID)
		for _, f := range fields {
			if !activeinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activeinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(activeinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.DeletedAt(); ok {
		_spec.SetField(activeinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if aiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(activeinfo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aiuo.mutation.ProcessID(); ok {
		_spec.SetField(activeinfo.FieldProcessID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.StartTime(); ok {
		_spec.SetField(activeinfo.FieldStartTime, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.Result(); ok {
		_spec.SetField(activeinfo.FieldResult, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.Msg(); ok {
		_spec.SetField(activeinfo.FieldMsg, field.TypeString, value)
	}
	_spec.AddModifiers(aiuo.modifiers...)
	_node = &ActiveInfo{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activeinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
