// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/organization"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrganizationUpdate) SetDeletedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrganizationUpdate) SetParentID(u uint32) *OrganizationUpdate {
	ou.mutation.ResetParentID()
	ou.mutation.SetParentID(u)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableParentID(u *uint32) *OrganizationUpdate {
	if u != nil {
		ou.SetParentID(*u)
	}
	return ou
}

// AddParentID adds u to the "parent_id" field.
func (ou *OrganizationUpdate) AddParentID(u int32) *OrganizationUpdate {
	ou.mutation.AddParentID(u)
	return ou
}

// SetIamRoleID sets the "iam_role_id" field.
func (ou *OrganizationUpdate) SetIamRoleID(s string) *OrganizationUpdate {
	ou.mutation.SetIamRoleID(s)
	return ou
}

// SetNillableIamRoleID sets the "iam_role_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableIamRoleID(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetIamRoleID(*s)
	}
	return ou
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUint32))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ParentID(); ok {
		_spec.SetField(organization.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := ou.mutation.AddedParentID(); ok {
		_spec.AddField(organization.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := ou.mutation.IamRoleID(); ok {
		_spec.SetField(organization.FieldIamRoleID, field.TypeString, value)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrganizationUpdateOne) SetDeletedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrganizationUpdateOne) SetParentID(u uint32) *OrganizationUpdateOne {
	ouo.mutation.ResetParentID()
	ouo.mutation.SetParentID(u)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableParentID(u *uint32) *OrganizationUpdateOne {
	if u != nil {
		ouo.SetParentID(*u)
	}
	return ouo
}

// AddParentID adds u to the "parent_id" field.
func (ouo *OrganizationUpdateOne) AddParentID(u int32) *OrganizationUpdateOne {
	ouo.mutation.AddParentID(u)
	return ouo
}

// SetIamRoleID sets the "iam_role_id" field.
func (ouo *OrganizationUpdateOne) SetIamRoleID(s string) *OrganizationUpdateOne {
	ouo.mutation.SetIamRoleID(s)
	return ouo
}

// SetNillableIamRoleID sets the "iam_role_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableIamRoleID(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetIamRoleID(*s)
	}
	return ouo
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUint32))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ParentID(); ok {
		_spec.SetField(organization.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := ouo.mutation.AddedParentID(); ok {
		_spec.AddField(organization.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := ouo.mutation.IamRoleID(); ok {
		_spec.SetField(organization.FieldIamRoleID, field.TypeString, value)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
