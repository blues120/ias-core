// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/signature"
)

// Signature is the model entity for the Signature schema.
type Signature struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 对应device表ext_id
	BoxID string `json:"box_id,omitempty"`
	// app_id
	AppID string `json:"app_id,omitempty"`
	// app秘钥
	AppSecret    string `json:"app_secret,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Signature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signature.FieldID:
			values[i] = new(sql.NullInt64)
		case signature.FieldBoxID, signature.FieldAppID, signature.FieldAppSecret:
			values[i] = new(sql.NullString)
		case signature.FieldCreatedAt, signature.FieldUpdatedAt, signature.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Signature fields.
func (s *Signature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case signature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case signature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case signature.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case signature.FieldBoxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field box_id", values[i])
			} else if value.Valid {
				s.BoxID = value.String
			}
		case signature.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				s.AppID = value.String
			}
		case signature.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				s.AppSecret = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Signature.
// This includes values selected through modifiers, order, etc.
func (s *Signature) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Signature.
// Note that you need to call Signature.Unwrap() before calling this method if this Signature
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Signature) Update() *SignatureUpdateOne {
	return NewSignatureClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Signature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Signature) Unwrap() *Signature {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Signature is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Signature) String() string {
	var builder strings.Builder
	builder.WriteString("Signature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("box_id=")
	builder.WriteString(s.BoxID)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(s.AppID)
	builder.WriteString(", ")
	builder.WriteString("app_secret=")
	builder.WriteString(s.AppSecret)
	builder.WriteByte(')')
	return builder.String()
}

// Signatures is a parsable slice of Signature.
type Signatures []*Signature
