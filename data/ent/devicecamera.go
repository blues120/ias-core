// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/devicecamera"
	"github.com/blues120/ias-core/data/ent/task"
)

// DeviceCamera is the model entity for the DeviceCamera schema.
type DeviceCamera struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 任务id
	DeviceID uint64 `json:"device_id,omitempty"`
	// 摄像头id
	CameraID uint64 `json:"camera_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceCameraQuery when eager-loading is set.
	Edges        DeviceCameraEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceCameraEdges holds the relations/edges for other nodes in the graph.
type DeviceCameraEdges struct {
	// Camera holds the value of the camera edge.
	Camera *Camera `json:"camera,omitempty"`
	// Device holds the value of the device edge.
	Device *Task `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CameraOrErr returns the Camera value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceCameraEdges) CameraOrErr() (*Camera, error) {
	if e.loadedTypes[0] {
		if e.Camera == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: camera.Label}
		}
		return e.Camera, nil
	}
	return nil, &NotLoadedError{edge: "camera"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceCameraEdges) DeviceOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceCamera) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicecamera.FieldID, devicecamera.FieldDeviceID, devicecamera.FieldCameraID:
			values[i] = new(sql.NullInt64)
		case devicecamera.FieldCreatedAt, devicecamera.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceCamera fields.
func (dc *DeviceCamera) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicecamera.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = uint64(value.Int64)
		case devicecamera.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dc.CreatedAt = value.Time
			}
		case devicecamera.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dc.UpdatedAt = value.Time
			}
		case devicecamera.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				dc.DeviceID = uint64(value.Int64)
			}
		case devicecamera.FieldCameraID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field camera_id", values[i])
			} else if value.Valid {
				dc.CameraID = uint64(value.Int64)
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceCamera.
// This includes values selected through modifiers, order, etc.
func (dc *DeviceCamera) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryCamera queries the "camera" edge of the DeviceCamera entity.
func (dc *DeviceCamera) QueryCamera() *CameraQuery {
	return NewDeviceCameraClient(dc.config).QueryCamera(dc)
}

// QueryDevice queries the "device" edge of the DeviceCamera entity.
func (dc *DeviceCamera) QueryDevice() *TaskQuery {
	return NewDeviceCameraClient(dc.config).QueryDevice(dc)
}

// Update returns a builder for updating this DeviceCamera.
// Note that you need to call DeviceCamera.Unwrap() before calling this method if this DeviceCamera
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DeviceCamera) Update() *DeviceCameraUpdateOne {
	return NewDeviceCameraClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DeviceCamera entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DeviceCamera) Unwrap() *DeviceCamera {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceCamera is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DeviceCamera) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceCamera(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("camera_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.CameraID))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceCameras is a parsable slice of DeviceCamera.
type DeviceCameras []*DeviceCamera
