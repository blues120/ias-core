// Code generated by ent, DO NOT EDIT.

package warnpushlog

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
)

const (
	// Label holds the string label denoting the warnpushlog type in the database.
	Label = "warn_push_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAccessOrgList holds the string denoting the access_org_list field in the database.
	FieldAccessOrgList = "access_org_list"
	// FieldPushID holds the string denoting the push_id field in the database.
	FieldPushID = "push_id"
	// FieldParam holds the string denoting the param field in the database.
	FieldParam = "param"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePush holds the string denoting the push edge name in mutations.
	EdgePush = "push"
	// Table holds the table name of the warnpushlog in the database.
	Table = "warn_push_log"
	// PushTable is the table that holds the push relation/edge.
	PushTable = "warn_push_log"
	// PushInverseTable is the table name for the WarnPush entity.
	// It exists in this package in order to avoid circular dependency with the "warnpush" package.
	PushInverseTable = "warn_push"
	// PushColumn is the table column denoting the push relation/edge.
	PushColumn = "push_id"
)

// Columns holds all SQL columns for warnpushlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantID,
	FieldAccessOrgList,
	FieldPushID,
	FieldParam,
	FieldRemark,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gitlab.ctyuncdn.cn/ias/ias-core/data/ent/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [3]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s biz.WarnPushLogStatus) error {
	switch s {
	case "failed", "success":
		return nil
	default:
		return fmt.Errorf("warnpushlog: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the WarnPushLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAccessOrgList orders the results by the access_org_list field.
func ByAccessOrgList(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessOrgList, opts...).ToFunc()
}

// ByPushID orders the results by the push_id field.
func ByPushID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushID, opts...).ToFunc()
}

// ByParam orders the results by the param field.
func ByParam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParam, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPushField orders the results by push field.
func ByPushField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPushStep(), sql.OrderByField(field, opts...))
	}
}
func newPushStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PushInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PushTable, PushColumn),
	)
}
