// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/upplatform"
)

// UpPlatformCreate is the builder for creating a UpPlatform entity.
type UpPlatformCreate struct {
	config
	mutation *UpPlatformMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (upc *UpPlatformCreate) SetTenantID(s string) *UpPlatformCreate {
	upc.mutation.SetTenantID(s)
	return upc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (upc *UpPlatformCreate) SetNillableTenantID(s *string) *UpPlatformCreate {
	if s != nil {
		upc.SetTenantID(*s)
	}
	return upc
}

// SetAccessOrgList sets the "access_org_list" field.
func (upc *UpPlatformCreate) SetAccessOrgList(s string) *UpPlatformCreate {
	upc.mutation.SetAccessOrgList(s)
	return upc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (upc *UpPlatformCreate) SetNillableAccessOrgList(s *string) *UpPlatformCreate {
	if s != nil {
		upc.SetAccessOrgList(*s)
	}
	return upc
}

// SetSipID sets the "sip_id" field.
func (upc *UpPlatformCreate) SetSipID(s string) *UpPlatformCreate {
	upc.mutation.SetSipID(s)
	return upc
}

// SetSipDomain sets the "sip_domain" field.
func (upc *UpPlatformCreate) SetSipDomain(s string) *UpPlatformCreate {
	upc.mutation.SetSipDomain(s)
	return upc
}

// SetSipIP sets the "sip_ip" field.
func (upc *UpPlatformCreate) SetSipIP(s string) *UpPlatformCreate {
	upc.mutation.SetSipIP(s)
	return upc
}

// SetSipPort sets the "sip_port" field.
func (upc *UpPlatformCreate) SetSipPort(i int32) *UpPlatformCreate {
	upc.mutation.SetSipPort(i)
	return upc
}

// SetSipUser sets the "sip_user" field.
func (upc *UpPlatformCreate) SetSipUser(s string) *UpPlatformCreate {
	upc.mutation.SetSipUser(s)
	return upc
}

// SetSipPassword sets the "sip_password" field.
func (upc *UpPlatformCreate) SetSipPassword(s string) *UpPlatformCreate {
	upc.mutation.SetSipPassword(s)
	return upc
}

// SetDescription sets the "description" field.
func (upc *UpPlatformCreate) SetDescription(s string) *UpPlatformCreate {
	upc.mutation.SetDescription(s)
	return upc
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (upc *UpPlatformCreate) SetHeartbeatInterval(i int32) *UpPlatformCreate {
	upc.mutation.SetHeartbeatInterval(i)
	return upc
}

// SetRegisterInterval sets the "register_interval" field.
func (upc *UpPlatformCreate) SetRegisterInterval(i int32) *UpPlatformCreate {
	upc.mutation.SetRegisterInterval(i)
	return upc
}

// SetTransType sets the "trans_type" field.
func (upc *UpPlatformCreate) SetTransType(s string) *UpPlatformCreate {
	upc.mutation.SetTransType(s)
	return upc
}

// SetGBID sets the "gb_id" field.
func (upc *UpPlatformCreate) SetGBID(s string) *UpPlatformCreate {
	upc.mutation.SetGBID(s)
	return upc
}

// SetCascadestatus sets the "cascadestatus" field.
func (upc *UpPlatformCreate) SetCascadestatus(s string) *UpPlatformCreate {
	upc.mutation.SetCascadestatus(s)
	return upc
}

// SetRegistrationStatus sets the "registration_status" field.
func (upc *UpPlatformCreate) SetRegistrationStatus(s string) *UpPlatformCreate {
	upc.mutation.SetRegistrationStatus(s)
	return upc
}

// Mutation returns the UpPlatformMutation object of the builder.
func (upc *UpPlatformCreate) Mutation() *UpPlatformMutation {
	return upc.mutation
}

// Save creates the UpPlatform in the database.
func (upc *UpPlatformCreate) Save(ctx context.Context) (*UpPlatform, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UpPlatformCreate) SaveX(ctx context.Context) *UpPlatform {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UpPlatformCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UpPlatformCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UpPlatformCreate) check() error {
	if _, ok := upc.mutation.SipID(); !ok {
		return &ValidationError{Name: "sip_id", err: errors.New(`ent: missing required field "UpPlatform.sip_id"`)}
	}
	if _, ok := upc.mutation.SipDomain(); !ok {
		return &ValidationError{Name: "sip_domain", err: errors.New(`ent: missing required field "UpPlatform.sip_domain"`)}
	}
	if _, ok := upc.mutation.SipIP(); !ok {
		return &ValidationError{Name: "sip_ip", err: errors.New(`ent: missing required field "UpPlatform.sip_ip"`)}
	}
	if _, ok := upc.mutation.SipPort(); !ok {
		return &ValidationError{Name: "sip_port", err: errors.New(`ent: missing required field "UpPlatform.sip_port"`)}
	}
	if _, ok := upc.mutation.SipUser(); !ok {
		return &ValidationError{Name: "sip_user", err: errors.New(`ent: missing required field "UpPlatform.sip_user"`)}
	}
	if _, ok := upc.mutation.SipPassword(); !ok {
		return &ValidationError{Name: "sip_password", err: errors.New(`ent: missing required field "UpPlatform.sip_password"`)}
	}
	if _, ok := upc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "UpPlatform.description"`)}
	}
	if _, ok := upc.mutation.HeartbeatInterval(); !ok {
		return &ValidationError{Name: "heartbeat_interval", err: errors.New(`ent: missing required field "UpPlatform.heartbeat_interval"`)}
	}
	if _, ok := upc.mutation.RegisterInterval(); !ok {
		return &ValidationError{Name: "register_interval", err: errors.New(`ent: missing required field "UpPlatform.register_interval"`)}
	}
	if _, ok := upc.mutation.TransType(); !ok {
		return &ValidationError{Name: "trans_type", err: errors.New(`ent: missing required field "UpPlatform.trans_type"`)}
	}
	if _, ok := upc.mutation.GBID(); !ok {
		return &ValidationError{Name: "gb_id", err: errors.New(`ent: missing required field "UpPlatform.gb_id"`)}
	}
	if _, ok := upc.mutation.Cascadestatus(); !ok {
		return &ValidationError{Name: "cascadestatus", err: errors.New(`ent: missing required field "UpPlatform.cascadestatus"`)}
	}
	if _, ok := upc.mutation.RegistrationStatus(); !ok {
		return &ValidationError{Name: "registration_status", err: errors.New(`ent: missing required field "UpPlatform.registration_status"`)}
	}
	return nil
}

func (upc *UpPlatformCreate) sqlSave(ctx context.Context) (*UpPlatform, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UpPlatformCreate) createSpec() (*UpPlatform, *sqlgraph.CreateSpec) {
	var (
		_node = &UpPlatform{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(upplatform.Table, sqlgraph.NewFieldSpec(upplatform.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if value, ok := upc.mutation.TenantID(); ok {
		_spec.SetField(upplatform.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := upc.mutation.AccessOrgList(); ok {
		_spec.SetField(upplatform.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := upc.mutation.SipID(); ok {
		_spec.SetField(upplatform.FieldSipID, field.TypeString, value)
		_node.SipID = value
	}
	if value, ok := upc.mutation.SipDomain(); ok {
		_spec.SetField(upplatform.FieldSipDomain, field.TypeString, value)
		_node.SipDomain = value
	}
	if value, ok := upc.mutation.SipIP(); ok {
		_spec.SetField(upplatform.FieldSipIP, field.TypeString, value)
		_node.SipIP = value
	}
	if value, ok := upc.mutation.SipPort(); ok {
		_spec.SetField(upplatform.FieldSipPort, field.TypeInt32, value)
		_node.SipPort = value
	}
	if value, ok := upc.mutation.SipUser(); ok {
		_spec.SetField(upplatform.FieldSipUser, field.TypeString, value)
		_node.SipUser = value
	}
	if value, ok := upc.mutation.SipPassword(); ok {
		_spec.SetField(upplatform.FieldSipPassword, field.TypeString, value)
		_node.SipPassword = value
	}
	if value, ok := upc.mutation.Description(); ok {
		_spec.SetField(upplatform.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := upc.mutation.HeartbeatInterval(); ok {
		_spec.SetField(upplatform.FieldHeartbeatInterval, field.TypeInt32, value)
		_node.HeartbeatInterval = value
	}
	if value, ok := upc.mutation.RegisterInterval(); ok {
		_spec.SetField(upplatform.FieldRegisterInterval, field.TypeInt32, value)
		_node.RegisterInterval = value
	}
	if value, ok := upc.mutation.TransType(); ok {
		_spec.SetField(upplatform.FieldTransType, field.TypeString, value)
		_node.TransType = value
	}
	if value, ok := upc.mutation.GBID(); ok {
		_spec.SetField(upplatform.FieldGBID, field.TypeString, value)
		_node.GBID = value
	}
	if value, ok := upc.mutation.Cascadestatus(); ok {
		_spec.SetField(upplatform.FieldCascadestatus, field.TypeString, value)
		_node.Cascadestatus = value
	}
	if value, ok := upc.mutation.RegistrationStatus(); ok {
		_spec.SetField(upplatform.FieldRegistrationStatus, field.TypeString, value)
		_node.RegistrationStatus = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpPlatform.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpPlatformUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (upc *UpPlatformCreate) OnConflict(opts ...sql.ConflictOption) *UpPlatformUpsertOne {
	upc.conflict = opts
	return &UpPlatformUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UpPlatformCreate) OnConflictColumns(columns ...string) *UpPlatformUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UpPlatformUpsertOne{
		create: upc,
	}
}

type (
	// UpPlatformUpsertOne is the builder for "upsert"-ing
	//  one UpPlatform node.
	UpPlatformUpsertOne struct {
		create *UpPlatformCreate
	}

	// UpPlatformUpsert is the "OnConflict" setter.
	UpPlatformUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *UpPlatformUpsert) SetTenantID(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateTenantID() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *UpPlatformUpsert) ClearTenantID() *UpPlatformUpsert {
	u.SetNull(upplatform.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *UpPlatformUpsert) SetAccessOrgList(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateAccessOrgList() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *UpPlatformUpsert) ClearAccessOrgList() *UpPlatformUpsert {
	u.SetNull(upplatform.FieldAccessOrgList)
	return u
}

// SetSipID sets the "sip_id" field.
func (u *UpPlatformUpsert) SetSipID(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipID, v)
	return u
}

// UpdateSipID sets the "sip_id" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipID() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipID)
	return u
}

// SetSipDomain sets the "sip_domain" field.
func (u *UpPlatformUpsert) SetSipDomain(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipDomain, v)
	return u
}

// UpdateSipDomain sets the "sip_domain" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipDomain() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipDomain)
	return u
}

// SetSipIP sets the "sip_ip" field.
func (u *UpPlatformUpsert) SetSipIP(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipIP, v)
	return u
}

// UpdateSipIP sets the "sip_ip" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipIP() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipIP)
	return u
}

// SetSipPort sets the "sip_port" field.
func (u *UpPlatformUpsert) SetSipPort(v int32) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipPort, v)
	return u
}

// UpdateSipPort sets the "sip_port" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipPort() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipPort)
	return u
}

// AddSipPort adds v to the "sip_port" field.
func (u *UpPlatformUpsert) AddSipPort(v int32) *UpPlatformUpsert {
	u.Add(upplatform.FieldSipPort, v)
	return u
}

// SetSipUser sets the "sip_user" field.
func (u *UpPlatformUpsert) SetSipUser(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipUser, v)
	return u
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipUser() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipUser)
	return u
}

// SetSipPassword sets the "sip_password" field.
func (u *UpPlatformUpsert) SetSipPassword(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldSipPassword, v)
	return u
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateSipPassword() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldSipPassword)
	return u
}

// SetDescription sets the "description" field.
func (u *UpPlatformUpsert) SetDescription(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateDescription() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldDescription)
	return u
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (u *UpPlatformUpsert) SetHeartbeatInterval(v int32) *UpPlatformUpsert {
	u.Set(upplatform.FieldHeartbeatInterval, v)
	return u
}

// UpdateHeartbeatInterval sets the "heartbeat_interval" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateHeartbeatInterval() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldHeartbeatInterval)
	return u
}

// AddHeartbeatInterval adds v to the "heartbeat_interval" field.
func (u *UpPlatformUpsert) AddHeartbeatInterval(v int32) *UpPlatformUpsert {
	u.Add(upplatform.FieldHeartbeatInterval, v)
	return u
}

// SetRegisterInterval sets the "register_interval" field.
func (u *UpPlatformUpsert) SetRegisterInterval(v int32) *UpPlatformUpsert {
	u.Set(upplatform.FieldRegisterInterval, v)
	return u
}

// UpdateRegisterInterval sets the "register_interval" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateRegisterInterval() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldRegisterInterval)
	return u
}

// AddRegisterInterval adds v to the "register_interval" field.
func (u *UpPlatformUpsert) AddRegisterInterval(v int32) *UpPlatformUpsert {
	u.Add(upplatform.FieldRegisterInterval, v)
	return u
}

// SetTransType sets the "trans_type" field.
func (u *UpPlatformUpsert) SetTransType(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldTransType, v)
	return u
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateTransType() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldTransType)
	return u
}

// SetGBID sets the "gb_id" field.
func (u *UpPlatformUpsert) SetGBID(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldGBID, v)
	return u
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateGBID() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldGBID)
	return u
}

// SetCascadestatus sets the "cascadestatus" field.
func (u *UpPlatformUpsert) SetCascadestatus(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldCascadestatus, v)
	return u
}

// UpdateCascadestatus sets the "cascadestatus" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateCascadestatus() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldCascadestatus)
	return u
}

// SetRegistrationStatus sets the "registration_status" field.
func (u *UpPlatformUpsert) SetRegistrationStatus(v string) *UpPlatformUpsert {
	u.Set(upplatform.FieldRegistrationStatus, v)
	return u
}

// UpdateRegistrationStatus sets the "registration_status" field to the value that was provided on create.
func (u *UpPlatformUpsert) UpdateRegistrationStatus() *UpPlatformUpsert {
	u.SetExcluded(upplatform.FieldRegistrationStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpPlatformUpsertOne) UpdateNewValues() *UpPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpPlatformUpsertOne) Ignore() *UpPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpPlatformUpsertOne) DoNothing() *UpPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpPlatformCreate.OnConflict
// documentation for more info.
func (u *UpPlatformUpsertOne) Update(set func(*UpPlatformUpsert)) *UpPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpPlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UpPlatformUpsertOne) SetTenantID(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateTenantID() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *UpPlatformUpsertOne) ClearTenantID() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *UpPlatformUpsertOne) SetAccessOrgList(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateAccessOrgList() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *UpPlatformUpsertOne) ClearAccessOrgList() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetSipID sets the "sip_id" field.
func (u *UpPlatformUpsertOne) SetSipID(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipID(v)
	})
}

// UpdateSipID sets the "sip_id" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipID() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipID()
	})
}

// SetSipDomain sets the "sip_domain" field.
func (u *UpPlatformUpsertOne) SetSipDomain(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipDomain(v)
	})
}

// UpdateSipDomain sets the "sip_domain" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipDomain() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipDomain()
	})
}

// SetSipIP sets the "sip_ip" field.
func (u *UpPlatformUpsertOne) SetSipIP(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipIP(v)
	})
}

// UpdateSipIP sets the "sip_ip" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipIP() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipIP()
	})
}

// SetSipPort sets the "sip_port" field.
func (u *UpPlatformUpsertOne) SetSipPort(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipPort(v)
	})
}

// AddSipPort adds v to the "sip_port" field.
func (u *UpPlatformUpsertOne) AddSipPort(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddSipPort(v)
	})
}

// UpdateSipPort sets the "sip_port" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipPort() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipPort()
	})
}

// SetSipUser sets the "sip_user" field.
func (u *UpPlatformUpsertOne) SetSipUser(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipUser(v)
	})
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipUser() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipUser()
	})
}

// SetSipPassword sets the "sip_password" field.
func (u *UpPlatformUpsertOne) SetSipPassword(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipPassword(v)
	})
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateSipPassword() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipPassword()
	})
}

// SetDescription sets the "description" field.
func (u *UpPlatformUpsertOne) SetDescription(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateDescription() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateDescription()
	})
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (u *UpPlatformUpsertOne) SetHeartbeatInterval(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetHeartbeatInterval(v)
	})
}

// AddHeartbeatInterval adds v to the "heartbeat_interval" field.
func (u *UpPlatformUpsertOne) AddHeartbeatInterval(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddHeartbeatInterval(v)
	})
}

// UpdateHeartbeatInterval sets the "heartbeat_interval" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateHeartbeatInterval() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateHeartbeatInterval()
	})
}

// SetRegisterInterval sets the "register_interval" field.
func (u *UpPlatformUpsertOne) SetRegisterInterval(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetRegisterInterval(v)
	})
}

// AddRegisterInterval adds v to the "register_interval" field.
func (u *UpPlatformUpsertOne) AddRegisterInterval(v int32) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddRegisterInterval(v)
	})
}

// UpdateRegisterInterval sets the "register_interval" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateRegisterInterval() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateRegisterInterval()
	})
}

// SetTransType sets the "trans_type" field.
func (u *UpPlatformUpsertOne) SetTransType(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateTransType() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateTransType()
	})
}

// SetGBID sets the "gb_id" field.
func (u *UpPlatformUpsertOne) SetGBID(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetGBID(v)
	})
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateGBID() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateGBID()
	})
}

// SetCascadestatus sets the "cascadestatus" field.
func (u *UpPlatformUpsertOne) SetCascadestatus(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetCascadestatus(v)
	})
}

// UpdateCascadestatus sets the "cascadestatus" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateCascadestatus() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateCascadestatus()
	})
}

// SetRegistrationStatus sets the "registration_status" field.
func (u *UpPlatformUpsertOne) SetRegistrationStatus(v string) *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetRegistrationStatus(v)
	})
}

// UpdateRegistrationStatus sets the "registration_status" field to the value that was provided on create.
func (u *UpPlatformUpsertOne) UpdateRegistrationStatus() *UpPlatformUpsertOne {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateRegistrationStatus()
	})
}

// Exec executes the query.
func (u *UpPlatformUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpPlatformCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpPlatformUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpPlatformUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpPlatformUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpPlatformCreateBulk is the builder for creating many UpPlatform entities in bulk.
type UpPlatformCreateBulk struct {
	config
	err      error
	builders []*UpPlatformCreate
	conflict []sql.ConflictOption
}

// Save creates the UpPlatform entities in the database.
func (upcb *UpPlatformCreateBulk) Save(ctx context.Context) ([]*UpPlatform, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UpPlatform, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpPlatformMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UpPlatformCreateBulk) SaveX(ctx context.Context) []*UpPlatform {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UpPlatformCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UpPlatformCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpPlatform.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpPlatformUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (upcb *UpPlatformCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpPlatformUpsertBulk {
	upcb.conflict = opts
	return &UpPlatformUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UpPlatformCreateBulk) OnConflictColumns(columns ...string) *UpPlatformUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UpPlatformUpsertBulk{
		create: upcb,
	}
}

// UpPlatformUpsertBulk is the builder for "upsert"-ing
// a bulk of UpPlatform nodes.
type UpPlatformUpsertBulk struct {
	create *UpPlatformCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpPlatformUpsertBulk) UpdateNewValues() *UpPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpPlatform.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpPlatformUpsertBulk) Ignore() *UpPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpPlatformUpsertBulk) DoNothing() *UpPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpPlatformCreateBulk.OnConflict
// documentation for more info.
func (u *UpPlatformUpsertBulk) Update(set func(*UpPlatformUpsert)) *UpPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpPlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UpPlatformUpsertBulk) SetTenantID(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateTenantID() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *UpPlatformUpsertBulk) ClearTenantID() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *UpPlatformUpsertBulk) SetAccessOrgList(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateAccessOrgList() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *UpPlatformUpsertBulk) ClearAccessOrgList() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetSipID sets the "sip_id" field.
func (u *UpPlatformUpsertBulk) SetSipID(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipID(v)
	})
}

// UpdateSipID sets the "sip_id" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipID() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipID()
	})
}

// SetSipDomain sets the "sip_domain" field.
func (u *UpPlatformUpsertBulk) SetSipDomain(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipDomain(v)
	})
}

// UpdateSipDomain sets the "sip_domain" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipDomain() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipDomain()
	})
}

// SetSipIP sets the "sip_ip" field.
func (u *UpPlatformUpsertBulk) SetSipIP(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipIP(v)
	})
}

// UpdateSipIP sets the "sip_ip" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipIP() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipIP()
	})
}

// SetSipPort sets the "sip_port" field.
func (u *UpPlatformUpsertBulk) SetSipPort(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipPort(v)
	})
}

// AddSipPort adds v to the "sip_port" field.
func (u *UpPlatformUpsertBulk) AddSipPort(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddSipPort(v)
	})
}

// UpdateSipPort sets the "sip_port" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipPort() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipPort()
	})
}

// SetSipUser sets the "sip_user" field.
func (u *UpPlatformUpsertBulk) SetSipUser(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipUser(v)
	})
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipUser() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipUser()
	})
}

// SetSipPassword sets the "sip_password" field.
func (u *UpPlatformUpsertBulk) SetSipPassword(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetSipPassword(v)
	})
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateSipPassword() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateSipPassword()
	})
}

// SetDescription sets the "description" field.
func (u *UpPlatformUpsertBulk) SetDescription(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateDescription() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateDescription()
	})
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (u *UpPlatformUpsertBulk) SetHeartbeatInterval(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetHeartbeatInterval(v)
	})
}

// AddHeartbeatInterval adds v to the "heartbeat_interval" field.
func (u *UpPlatformUpsertBulk) AddHeartbeatInterval(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddHeartbeatInterval(v)
	})
}

// UpdateHeartbeatInterval sets the "heartbeat_interval" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateHeartbeatInterval() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateHeartbeatInterval()
	})
}

// SetRegisterInterval sets the "register_interval" field.
func (u *UpPlatformUpsertBulk) SetRegisterInterval(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetRegisterInterval(v)
	})
}

// AddRegisterInterval adds v to the "register_interval" field.
func (u *UpPlatformUpsertBulk) AddRegisterInterval(v int32) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.AddRegisterInterval(v)
	})
}

// UpdateRegisterInterval sets the "register_interval" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateRegisterInterval() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateRegisterInterval()
	})
}

// SetTransType sets the "trans_type" field.
func (u *UpPlatformUpsertBulk) SetTransType(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateTransType() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateTransType()
	})
}

// SetGBID sets the "gb_id" field.
func (u *UpPlatformUpsertBulk) SetGBID(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetGBID(v)
	})
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateGBID() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateGBID()
	})
}

// SetCascadestatus sets the "cascadestatus" field.
func (u *UpPlatformUpsertBulk) SetCascadestatus(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetCascadestatus(v)
	})
}

// UpdateCascadestatus sets the "cascadestatus" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateCascadestatus() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateCascadestatus()
	})
}

// SetRegistrationStatus sets the "registration_status" field.
func (u *UpPlatformUpsertBulk) SetRegistrationStatus(v string) *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.SetRegistrationStatus(v)
	})
}

// UpdateRegistrationStatus sets the "registration_status" field to the value that was provided on create.
func (u *UpPlatformUpsertBulk) UpdateRegistrationStatus() *UpPlatformUpsertBulk {
	return u.Update(func(s *UpPlatformUpsert) {
		s.UpdateRegistrationStatus()
	})
}

// Exec executes the query.
func (u *UpPlatformUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpPlatformCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpPlatformCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpPlatformUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
