// Code generated by ent, DO NOT EDIT.

package taskcamera

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldAccessOrgList, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldTaskID, v))
}

// CameraID applies equality check predicate on the "camera_id" field. It's identical to CameraIDEQ.
func CameraID(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldCameraID, v))
}

// MultiImgBox applies equality check predicate on the "multi_img_box" field. It's identical to MultiImgBoxEQ.
func MultiImgBox(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldMultiImgBox, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldTaskID, vs...))
}

// CameraIDEQ applies the EQ predicate on the "camera_id" field.
func CameraIDEQ(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldCameraID, v))
}

// CameraIDNEQ applies the NEQ predicate on the "camera_id" field.
func CameraIDNEQ(v uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldCameraID, v))
}

// CameraIDIn applies the In predicate on the "camera_id" field.
func CameraIDIn(vs ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldCameraID, vs...))
}

// CameraIDNotIn applies the NotIn predicate on the "camera_id" field.
func CameraIDNotIn(vs ...uint64) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldCameraID, vs...))
}

// MultiImgBoxEQ applies the EQ predicate on the "multi_img_box" field.
func MultiImgBoxEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEQ(FieldMultiImgBox, v))
}

// MultiImgBoxNEQ applies the NEQ predicate on the "multi_img_box" field.
func MultiImgBoxNEQ(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNEQ(FieldMultiImgBox, v))
}

// MultiImgBoxIn applies the In predicate on the "multi_img_box" field.
func MultiImgBoxIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldIn(FieldMultiImgBox, vs...))
}

// MultiImgBoxNotIn applies the NotIn predicate on the "multi_img_box" field.
func MultiImgBoxNotIn(vs ...string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldNotIn(FieldMultiImgBox, vs...))
}

// MultiImgBoxGT applies the GT predicate on the "multi_img_box" field.
func MultiImgBoxGT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGT(FieldMultiImgBox, v))
}

// MultiImgBoxGTE applies the GTE predicate on the "multi_img_box" field.
func MultiImgBoxGTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldGTE(FieldMultiImgBox, v))
}

// MultiImgBoxLT applies the LT predicate on the "multi_img_box" field.
func MultiImgBoxLT(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLT(FieldMultiImgBox, v))
}

// MultiImgBoxLTE applies the LTE predicate on the "multi_img_box" field.
func MultiImgBoxLTE(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldLTE(FieldMultiImgBox, v))
}

// MultiImgBoxContains applies the Contains predicate on the "multi_img_box" field.
func MultiImgBoxContains(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContains(FieldMultiImgBox, v))
}

// MultiImgBoxHasPrefix applies the HasPrefix predicate on the "multi_img_box" field.
func MultiImgBoxHasPrefix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasPrefix(FieldMultiImgBox, v))
}

// MultiImgBoxHasSuffix applies the HasSuffix predicate on the "multi_img_box" field.
func MultiImgBoxHasSuffix(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldHasSuffix(FieldMultiImgBox, v))
}

// MultiImgBoxEqualFold applies the EqualFold predicate on the "multi_img_box" field.
func MultiImgBoxEqualFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldEqualFold(FieldMultiImgBox, v))
}

// MultiImgBoxContainsFold applies the ContainsFold predicate on the "multi_img_box" field.
func MultiImgBoxContainsFold(v string) predicate.TaskCamera {
	return predicate.TaskCamera(sql.FieldContainsFold(FieldMultiImgBox, v))
}

// HasCamera applies the HasEdge predicate on the "camera" edge.
func HasCamera() predicate.TaskCamera {
	return predicate.TaskCamera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CameraTable, CameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCameraWith applies the HasEdge predicate on the "camera" edge with a given conditions (other predicates).
func HasCameraWith(preds ...predicate.Camera) predicate.TaskCamera {
	return predicate.TaskCamera(func(s *sql.Selector) {
		step := newCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.TaskCamera {
	return predicate.TaskCamera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.TaskCamera {
	return predicate.TaskCamera(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskCamera) predicate.TaskCamera {
	return predicate.TaskCamera(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskCamera) predicate.TaskCamera {
	return predicate.TaskCamera(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskCamera) predicate.TaskCamera {
	return predicate.TaskCamera(sql.NotPredicates(p))
}
