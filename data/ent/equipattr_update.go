// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/equipattr"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// EquipAttrUpdate is the builder for updating EquipAttr entities.
type EquipAttrUpdate struct {
	config
	hooks     []Hook
	mutation  *EquipAttrMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EquipAttrUpdate builder.
func (eau *EquipAttrUpdate) Where(ps ...predicate.EquipAttr) *EquipAttrUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetUpdatedAt sets the "updated_at" field.
func (eau *EquipAttrUpdate) SetUpdatedAt(t time.Time) *EquipAttrUpdate {
	eau.mutation.SetUpdatedAt(t)
	return eau
}

// SetDeletedAt sets the "deleted_at" field.
func (eau *EquipAttrUpdate) SetDeletedAt(t time.Time) *EquipAttrUpdate {
	eau.mutation.SetDeletedAt(t)
	return eau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eau *EquipAttrUpdate) SetNillableDeletedAt(t *time.Time) *EquipAttrUpdate {
	if t != nil {
		eau.SetDeletedAt(*t)
	}
	return eau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eau *EquipAttrUpdate) ClearDeletedAt() *EquipAttrUpdate {
	eau.mutation.ClearDeletedAt()
	return eau
}

// SetAttrKey sets the "attr_key" field.
func (eau *EquipAttrUpdate) SetAttrKey(s string) *EquipAttrUpdate {
	eau.mutation.SetAttrKey(s)
	return eau
}

// SetNillableAttrKey sets the "attr_key" field if the given value is not nil.
func (eau *EquipAttrUpdate) SetNillableAttrKey(s *string) *EquipAttrUpdate {
	if s != nil {
		eau.SetAttrKey(*s)
	}
	return eau
}

// SetAttrValue sets the "attr_value" field.
func (eau *EquipAttrUpdate) SetAttrValue(s string) *EquipAttrUpdate {
	eau.mutation.SetAttrValue(s)
	return eau
}

// SetNillableAttrValue sets the "attr_value" field if the given value is not nil.
func (eau *EquipAttrUpdate) SetNillableAttrValue(s *string) *EquipAttrUpdate {
	if s != nil {
		eau.SetAttrValue(*s)
	}
	return eau
}

// SetExtend sets the "extend" field.
func (eau *EquipAttrUpdate) SetExtend(s string) *EquipAttrUpdate {
	eau.mutation.SetExtend(s)
	return eau
}

// SetNillableExtend sets the "extend" field if the given value is not nil.
func (eau *EquipAttrUpdate) SetNillableExtend(s *string) *EquipAttrUpdate {
	if s != nil {
		eau.SetExtend(*s)
	}
	return eau
}

// Mutation returns the EquipAttrMutation object of the builder.
func (eau *EquipAttrUpdate) Mutation() *EquipAttrMutation {
	return eau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EquipAttrUpdate) Save(ctx context.Context) (int, error) {
	if err := eau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EquipAttrUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EquipAttrUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EquipAttrUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eau *EquipAttrUpdate) defaults() error {
	if _, ok := eau.mutation.UpdatedAt(); !ok {
		if equipattr.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized equipattr.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := equipattr.UpdateDefaultUpdatedAt()
		eau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eau *EquipAttrUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EquipAttrUpdate {
	eau.modifiers = append(eau.modifiers, modifiers...)
	return eau
}

func (eau *EquipAttrUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipattr.Table, equipattr.Columns, sqlgraph.NewFieldSpec(equipattr.FieldID, field.TypeUint64))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.UpdatedAt(); ok {
		_spec.SetField(equipattr.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eau.mutation.DeletedAt(); ok {
		_spec.SetField(equipattr.FieldDeletedAt, field.TypeTime, value)
	}
	if eau.mutation.DeletedAtCleared() {
		_spec.ClearField(equipattr.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eau.mutation.AttrKey(); ok {
		_spec.SetField(equipattr.FieldAttrKey, field.TypeString, value)
	}
	if value, ok := eau.mutation.AttrValue(); ok {
		_spec.SetField(equipattr.FieldAttrValue, field.TypeString, value)
	}
	if value, ok := eau.mutation.Extend(); ok {
		_spec.SetField(equipattr.FieldExtend, field.TypeString, value)
	}
	_spec.AddModifiers(eau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipattr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EquipAttrUpdateOne is the builder for updating a single EquipAttr entity.
type EquipAttrUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EquipAttrMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (eauo *EquipAttrUpdateOne) SetUpdatedAt(t time.Time) *EquipAttrUpdateOne {
	eauo.mutation.SetUpdatedAt(t)
	return eauo
}

// SetDeletedAt sets the "deleted_at" field.
func (eauo *EquipAttrUpdateOne) SetDeletedAt(t time.Time) *EquipAttrUpdateOne {
	eauo.mutation.SetDeletedAt(t)
	return eauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eauo *EquipAttrUpdateOne) SetNillableDeletedAt(t *time.Time) *EquipAttrUpdateOne {
	if t != nil {
		eauo.SetDeletedAt(*t)
	}
	return eauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eauo *EquipAttrUpdateOne) ClearDeletedAt() *EquipAttrUpdateOne {
	eauo.mutation.ClearDeletedAt()
	return eauo
}

// SetAttrKey sets the "attr_key" field.
func (eauo *EquipAttrUpdateOne) SetAttrKey(s string) *EquipAttrUpdateOne {
	eauo.mutation.SetAttrKey(s)
	return eauo
}

// SetNillableAttrKey sets the "attr_key" field if the given value is not nil.
func (eauo *EquipAttrUpdateOne) SetNillableAttrKey(s *string) *EquipAttrUpdateOne {
	if s != nil {
		eauo.SetAttrKey(*s)
	}
	return eauo
}

// SetAttrValue sets the "attr_value" field.
func (eauo *EquipAttrUpdateOne) SetAttrValue(s string) *EquipAttrUpdateOne {
	eauo.mutation.SetAttrValue(s)
	return eauo
}

// SetNillableAttrValue sets the "attr_value" field if the given value is not nil.
func (eauo *EquipAttrUpdateOne) SetNillableAttrValue(s *string) *EquipAttrUpdateOne {
	if s != nil {
		eauo.SetAttrValue(*s)
	}
	return eauo
}

// SetExtend sets the "extend" field.
func (eauo *EquipAttrUpdateOne) SetExtend(s string) *EquipAttrUpdateOne {
	eauo.mutation.SetExtend(s)
	return eauo
}

// SetNillableExtend sets the "extend" field if the given value is not nil.
func (eauo *EquipAttrUpdateOne) SetNillableExtend(s *string) *EquipAttrUpdateOne {
	if s != nil {
		eauo.SetExtend(*s)
	}
	return eauo
}

// Mutation returns the EquipAttrMutation object of the builder.
func (eauo *EquipAttrUpdateOne) Mutation() *EquipAttrMutation {
	return eauo.mutation
}

// Where appends a list predicates to the EquipAttrUpdate builder.
func (eauo *EquipAttrUpdateOne) Where(ps ...predicate.EquipAttr) *EquipAttrUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EquipAttrUpdateOne) Select(field string, fields ...string) *EquipAttrUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EquipAttr entity.
func (eauo *EquipAttrUpdateOne) Save(ctx context.Context) (*EquipAttr, error) {
	if err := eauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EquipAttrUpdateOne) SaveX(ctx context.Context) *EquipAttr {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EquipAttrUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EquipAttrUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eauo *EquipAttrUpdateOne) defaults() error {
	if _, ok := eauo.mutation.UpdatedAt(); !ok {
		if equipattr.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized equipattr.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := equipattr.UpdateDefaultUpdatedAt()
		eauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eauo *EquipAttrUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EquipAttrUpdateOne {
	eauo.modifiers = append(eauo.modifiers, modifiers...)
	return eauo
}

func (eauo *EquipAttrUpdateOne) sqlSave(ctx context.Context) (_node *EquipAttr, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipattr.Table, equipattr.Columns, sqlgraph.NewFieldSpec(equipattr.FieldID, field.TypeUint64))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EquipAttr.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipattr.FieldID)
		for _, f := range fields {
			if !equipattr.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipattr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.UpdatedAt(); ok {
		_spec.SetField(equipattr.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eauo.mutation.DeletedAt(); ok {
		_spec.SetField(equipattr.FieldDeletedAt, field.TypeTime, value)
	}
	if eauo.mutation.DeletedAtCleared() {
		_spec.ClearField(equipattr.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eauo.mutation.AttrKey(); ok {
		_spec.SetField(equipattr.FieldAttrKey, field.TypeString, value)
	}
	if value, ok := eauo.mutation.AttrValue(); ok {
		_spec.SetField(equipattr.FieldAttrValue, field.TypeString, value)
	}
	if value, ok := eauo.mutation.Extend(); ok {
		_spec.SetField(equipattr.FieldExtend, field.TypeString, value)
	}
	_spec.AddModifiers(eauo.modifiers...)
	_node = &EquipAttr{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipattr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
