// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/device"
	"github.com/blues120/ias-core/data/ent/devicecamera"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/task"
	"github.com/blues120/ias-core/data/ent/taskcamera"
)

// CameraQuery is the builder for querying Camera entities.
type CameraQuery struct {
	config
	ctx              *QueryContext
	order            []camera.OrderOption
	inters           []Interceptor
	predicates       []predicate.Camera
	withTask         *TaskQuery
	withDevice       *DeviceQuery
	withTaskCamera   *TaskCameraQuery
	withDeviceCamera *DeviceCameraQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CameraQuery builder.
func (cq *CameraQuery) Where(ps ...predicate.Camera) *CameraQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CameraQuery) Limit(limit int) *CameraQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CameraQuery) Offset(offset int) *CameraQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CameraQuery) Unique(unique bool) *CameraQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CameraQuery) Order(o ...camera.OrderOption) *CameraQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryTask chains the current query on the "task" edge.
func (cq *CameraQuery) QueryTask() *TaskQuery {
	query := (&TaskClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(camera.Table, camera.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, camera.TaskTable, camera.TaskPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (cq *CameraQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(camera.Table, camera.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, camera.DeviceTable, camera.DevicePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskCamera chains the current query on the "task_camera" edge.
func (cq *CameraQuery) QueryTaskCamera() *TaskCameraQuery {
	query := (&TaskCameraClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(camera.Table, camera.FieldID, selector),
			sqlgraph.To(taskcamera.Table, taskcamera.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, camera.TaskCameraTable, camera.TaskCameraColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeviceCamera chains the current query on the "device_camera" edge.
func (cq *CameraQuery) QueryDeviceCamera() *DeviceCameraQuery {
	query := (&DeviceCameraClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(camera.Table, camera.FieldID, selector),
			sqlgraph.To(devicecamera.Table, devicecamera.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, camera.DeviceCameraTable, camera.DeviceCameraColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Camera entity from the query.
// Returns a *NotFoundError when no Camera was found.
func (cq *CameraQuery) First(ctx context.Context) (*Camera, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{camera.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CameraQuery) FirstX(ctx context.Context) *Camera {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Camera ID from the query.
// Returns a *NotFoundError when no Camera ID was found.
func (cq *CameraQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{camera.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CameraQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Camera entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Camera entity is found.
// Returns a *NotFoundError when no Camera entities are found.
func (cq *CameraQuery) Only(ctx context.Context) (*Camera, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{camera.Label}
	default:
		return nil, &NotSingularError{camera.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CameraQuery) OnlyX(ctx context.Context) *Camera {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Camera ID in the query.
// Returns a *NotSingularError when more than one Camera ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CameraQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{camera.Label}
	default:
		err = &NotSingularError{camera.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CameraQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Cameras.
func (cq *CameraQuery) All(ctx context.Context) ([]*Camera, error) {
	ctx = setContextOp(ctx, cq.ctx, "All")
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Camera, *CameraQuery]()
	return withInterceptors[[]*Camera](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CameraQuery) AllX(ctx context.Context) []*Camera {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Camera IDs.
func (cq *CameraQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, "IDs")
	if err = cq.Select(camera.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CameraQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CameraQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, "Count")
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CameraQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CameraQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CameraQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, "Exist")
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CameraQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CameraQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CameraQuery) Clone() *CameraQuery {
	if cq == nil {
		return nil
	}
	return &CameraQuery{
		config:           cq.config,
		ctx:              cq.ctx.Clone(),
		order:            append([]camera.OrderOption{}, cq.order...),
		inters:           append([]Interceptor{}, cq.inters...),
		predicates:       append([]predicate.Camera{}, cq.predicates...),
		withTask:         cq.withTask.Clone(),
		withDevice:       cq.withDevice.Clone(),
		withTaskCamera:   cq.withTaskCamera.Clone(),
		withDeviceCamera: cq.withDeviceCamera.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CameraQuery) WithTask(opts ...func(*TaskQuery)) *CameraQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTask = query
	return cq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CameraQuery) WithDevice(opts ...func(*DeviceQuery)) *CameraQuery {
	query := (&DeviceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDevice = query
	return cq
}

// WithTaskCamera tells the query-builder to eager-load the nodes that are connected to
// the "task_camera" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CameraQuery) WithTaskCamera(opts ...func(*TaskCameraQuery)) *CameraQuery {
	query := (&TaskCameraClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTaskCamera = query
	return cq
}

// WithDeviceCamera tells the query-builder to eager-load the nodes that are connected to
// the "device_camera" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CameraQuery) WithDeviceCamera(opts ...func(*DeviceCameraQuery)) *CameraQuery {
	query := (&DeviceCameraClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeviceCamera = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Camera.Query().
//		GroupBy(camera.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CameraQuery) GroupBy(field string, fields ...string) *CameraGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CameraGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = camera.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Camera.Query().
//		Select(camera.FieldCreatedAt).
//		Scan(ctx, &v)
func (cq *CameraQuery) Select(fields ...string) *CameraSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CameraSelect{CameraQuery: cq}
	sbuild.label = camera.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CameraSelect configured with the given aggregations.
func (cq *CameraQuery) Aggregate(fns ...AggregateFunc) *CameraSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CameraQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !camera.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CameraQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Camera, error) {
	var (
		nodes       = []*Camera{}
		_spec       = cq.querySpec()
		loadedTypes = [4]bool{
			cq.withTask != nil,
			cq.withDevice != nil,
			cq.withTaskCamera != nil,
			cq.withDeviceCamera != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Camera).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Camera{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withTask; query != nil {
		if err := cq.loadTask(ctx, query, nodes,
			func(n *Camera) { n.Edges.Task = []*Task{} },
			func(n *Camera, e *Task) { n.Edges.Task = append(n.Edges.Task, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDevice; query != nil {
		if err := cq.loadDevice(ctx, query, nodes,
			func(n *Camera) { n.Edges.Device = []*Device{} },
			func(n *Camera, e *Device) { n.Edges.Device = append(n.Edges.Device, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTaskCamera; query != nil {
		if err := cq.loadTaskCamera(ctx, query, nodes,
			func(n *Camera) { n.Edges.TaskCamera = []*TaskCamera{} },
			func(n *Camera, e *TaskCamera) { n.Edges.TaskCamera = append(n.Edges.TaskCamera, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDeviceCamera; query != nil {
		if err := cq.loadDeviceCamera(ctx, query, nodes,
			func(n *Camera) { n.Edges.DeviceCamera = []*DeviceCamera{} },
			func(n *Camera, e *DeviceCamera) { n.Edges.DeviceCamera = append(n.Edges.DeviceCamera, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CameraQuery) loadTask(ctx context.Context, query *TaskQuery, nodes []*Camera, init func(*Camera), assign func(*Camera, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Camera)
	nids := make(map[uint64]map[*Camera]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(camera.TaskTable)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(camera.TaskPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(camera.TaskPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(camera.TaskPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Camera]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "task" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CameraQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*Camera, init func(*Camera), assign func(*Camera, *Device)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Camera)
	nids := make(map[uint64]map[*Camera]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(camera.DeviceTable)
		s.Join(joinT).On(s.C(device.FieldID), joinT.C(camera.DevicePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(camera.DevicePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(camera.DevicePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Camera]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Device](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "device" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CameraQuery) loadTaskCamera(ctx context.Context, query *TaskCameraQuery, nodes []*Camera, init func(*Camera), assign func(*Camera, *TaskCamera)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Camera)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(taskcamera.FieldCameraID)
	}
	query.Where(predicate.TaskCamera(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(camera.TaskCameraColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CameraID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "camera_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CameraQuery) loadDeviceCamera(ctx context.Context, query *DeviceCameraQuery, nodes []*Camera, init func(*Camera), assign func(*Camera, *DeviceCamera)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Camera)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(devicecamera.FieldCameraID)
	}
	query.Where(predicate.DeviceCamera(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(camera.DeviceCameraColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CameraID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "camera_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *CameraQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CameraQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(camera.Table, camera.Columns, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, camera.FieldID)
		for i := range fields {
			if fields[i] != camera.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CameraQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(camera.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = camera.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cq.modifiers {
		m(selector)
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (cq *CameraQuery) ForUpdate(opts ...sql.LockOption) *CameraQuery {
	if cq.driver.Dialect() == dialect.Postgres {
		cq.Unique(false)
	}
	cq.modifiers = append(cq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return cq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (cq *CameraQuery) ForShare(opts ...sql.LockOption) *CameraQuery {
	if cq.driver.Dialect() == dialect.Postgres {
		cq.Unique(false)
	}
	cq.modifiers = append(cq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return cq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cq *CameraQuery) Modify(modifiers ...func(s *sql.Selector)) *CameraSelect {
	cq.modifiers = append(cq.modifiers, modifiers...)
	return cq.Select()
}

// CameraGroupBy is the group-by builder for Camera entities.
type CameraGroupBy struct {
	selector
	build *CameraQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CameraGroupBy) Aggregate(fns ...AggregateFunc) *CameraGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CameraGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, "GroupBy")
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CameraQuery, *CameraGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CameraGroupBy) sqlScan(ctx context.Context, root *CameraQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CameraSelect is the builder for selecting fields of Camera entities.
type CameraSelect struct {
	*CameraQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CameraSelect) Aggregate(fns ...AggregateFunc) *CameraSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CameraSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, "Select")
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CameraQuery, *CameraSelect](ctx, cs.CameraQuery, cs, cs.inters, v)
}

func (cs *CameraSelect) sqlScan(ctx context.Context, root *CameraQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cs *CameraSelect) Modify(modifiers ...func(s *sql.Selector)) *CameraSelect {
	cs.modifiers = append(cs.modifiers, modifiers...)
	return cs
}
