// Code generated by ent, DO NOT EDIT.

package inform

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAccessOrgList, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldDeletedAt, v))
}

// AlarmName applies equality check predicate on the "alarm_name" field. It's identical to AlarmNameEQ.
func AlarmName(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAlarmName, v))
}

// AlarmType applies equality check predicate on the "alarm_type" field. It's identical to AlarmTypeEQ.
func AlarmType(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAlarmType, v))
}

// SignName applies equality check predicate on the "sign_name" field. It's identical to SignNameEQ.
func SignName(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldSignName, v))
}

// NotifyTemplate applies equality check predicate on the "notify_template" field. It's identical to NotifyTemplateEQ.
func NotifyTemplate(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldNotifyTemplate, v))
}

// TemplateCode applies equality check predicate on the "template_code" field. It's identical to TemplateCodeEQ.
func TemplateCode(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTemplateCode, v))
}

// PhoneNumbers applies equality check predicate on the "phone_numbers" field. It's identical to PhoneNumbersEQ.
func PhoneNumbers(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldPhoneNumbers, v))
}

// NotifySwitch applies equality check predicate on the "notify_switch" field. It's identical to NotifySwitchEQ.
func NotifySwitch(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldNotifySwitch, v))
}

// TaskName applies equality check predicate on the "task_name" field. It's identical to TaskNameEQ.
func TaskName(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTaskName, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTaskID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Inform {
	return predicate.Inform(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Inform {
	return predicate.Inform(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.Inform {
	return predicate.Inform(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.Inform {
	return predicate.Inform(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Inform {
	return predicate.Inform(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Inform {
	return predicate.Inform(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Inform {
	return predicate.Inform(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Inform {
	return predicate.Inform(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Inform {
	return predicate.Inform(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Inform {
	return predicate.Inform(sql.FieldNotNull(FieldDeletedAt))
}

// AlarmNameEQ applies the EQ predicate on the "alarm_name" field.
func AlarmNameEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAlarmName, v))
}

// AlarmNameNEQ applies the NEQ predicate on the "alarm_name" field.
func AlarmNameNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldAlarmName, v))
}

// AlarmNameIn applies the In predicate on the "alarm_name" field.
func AlarmNameIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldAlarmName, vs...))
}

// AlarmNameNotIn applies the NotIn predicate on the "alarm_name" field.
func AlarmNameNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldAlarmName, vs...))
}

// AlarmNameGT applies the GT predicate on the "alarm_name" field.
func AlarmNameGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldAlarmName, v))
}

// AlarmNameGTE applies the GTE predicate on the "alarm_name" field.
func AlarmNameGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldAlarmName, v))
}

// AlarmNameLT applies the LT predicate on the "alarm_name" field.
func AlarmNameLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldAlarmName, v))
}

// AlarmNameLTE applies the LTE predicate on the "alarm_name" field.
func AlarmNameLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldAlarmName, v))
}

// AlarmNameContains applies the Contains predicate on the "alarm_name" field.
func AlarmNameContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldAlarmName, v))
}

// AlarmNameHasPrefix applies the HasPrefix predicate on the "alarm_name" field.
func AlarmNameHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldAlarmName, v))
}

// AlarmNameHasSuffix applies the HasSuffix predicate on the "alarm_name" field.
func AlarmNameHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldAlarmName, v))
}

// AlarmNameEqualFold applies the EqualFold predicate on the "alarm_name" field.
func AlarmNameEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldAlarmName, v))
}

// AlarmNameContainsFold applies the ContainsFold predicate on the "alarm_name" field.
func AlarmNameContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldAlarmName, v))
}

// AlarmTypeEQ applies the EQ predicate on the "alarm_type" field.
func AlarmTypeEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldAlarmType, v))
}

// AlarmTypeNEQ applies the NEQ predicate on the "alarm_type" field.
func AlarmTypeNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldAlarmType, v))
}

// AlarmTypeIn applies the In predicate on the "alarm_type" field.
func AlarmTypeIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldAlarmType, vs...))
}

// AlarmTypeNotIn applies the NotIn predicate on the "alarm_type" field.
func AlarmTypeNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldAlarmType, vs...))
}

// AlarmTypeGT applies the GT predicate on the "alarm_type" field.
func AlarmTypeGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldAlarmType, v))
}

// AlarmTypeGTE applies the GTE predicate on the "alarm_type" field.
func AlarmTypeGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldAlarmType, v))
}

// AlarmTypeLT applies the LT predicate on the "alarm_type" field.
func AlarmTypeLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldAlarmType, v))
}

// AlarmTypeLTE applies the LTE predicate on the "alarm_type" field.
func AlarmTypeLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldAlarmType, v))
}

// AlarmTypeContains applies the Contains predicate on the "alarm_type" field.
func AlarmTypeContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldAlarmType, v))
}

// AlarmTypeHasPrefix applies the HasPrefix predicate on the "alarm_type" field.
func AlarmTypeHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldAlarmType, v))
}

// AlarmTypeHasSuffix applies the HasSuffix predicate on the "alarm_type" field.
func AlarmTypeHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldAlarmType, v))
}

// AlarmTypeEqualFold applies the EqualFold predicate on the "alarm_type" field.
func AlarmTypeEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldAlarmType, v))
}

// AlarmTypeContainsFold applies the ContainsFold predicate on the "alarm_type" field.
func AlarmTypeContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldAlarmType, v))
}

// SignNameEQ applies the EQ predicate on the "sign_name" field.
func SignNameEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldSignName, v))
}

// SignNameNEQ applies the NEQ predicate on the "sign_name" field.
func SignNameNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldSignName, v))
}

// SignNameIn applies the In predicate on the "sign_name" field.
func SignNameIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldSignName, vs...))
}

// SignNameNotIn applies the NotIn predicate on the "sign_name" field.
func SignNameNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldSignName, vs...))
}

// SignNameGT applies the GT predicate on the "sign_name" field.
func SignNameGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldSignName, v))
}

// SignNameGTE applies the GTE predicate on the "sign_name" field.
func SignNameGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldSignName, v))
}

// SignNameLT applies the LT predicate on the "sign_name" field.
func SignNameLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldSignName, v))
}

// SignNameLTE applies the LTE predicate on the "sign_name" field.
func SignNameLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldSignName, v))
}

// SignNameContains applies the Contains predicate on the "sign_name" field.
func SignNameContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldSignName, v))
}

// SignNameHasPrefix applies the HasPrefix predicate on the "sign_name" field.
func SignNameHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldSignName, v))
}

// SignNameHasSuffix applies the HasSuffix predicate on the "sign_name" field.
func SignNameHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldSignName, v))
}

// SignNameEqualFold applies the EqualFold predicate on the "sign_name" field.
func SignNameEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldSignName, v))
}

// SignNameContainsFold applies the ContainsFold predicate on the "sign_name" field.
func SignNameContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldSignName, v))
}

// NotifyTemplateEQ applies the EQ predicate on the "notify_template" field.
func NotifyTemplateEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldNotifyTemplate, v))
}

// NotifyTemplateNEQ applies the NEQ predicate on the "notify_template" field.
func NotifyTemplateNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldNotifyTemplate, v))
}

// NotifyTemplateIn applies the In predicate on the "notify_template" field.
func NotifyTemplateIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldNotifyTemplate, vs...))
}

// NotifyTemplateNotIn applies the NotIn predicate on the "notify_template" field.
func NotifyTemplateNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldNotifyTemplate, vs...))
}

// NotifyTemplateGT applies the GT predicate on the "notify_template" field.
func NotifyTemplateGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldNotifyTemplate, v))
}

// NotifyTemplateGTE applies the GTE predicate on the "notify_template" field.
func NotifyTemplateGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldNotifyTemplate, v))
}

// NotifyTemplateLT applies the LT predicate on the "notify_template" field.
func NotifyTemplateLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldNotifyTemplate, v))
}

// NotifyTemplateLTE applies the LTE predicate on the "notify_template" field.
func NotifyTemplateLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldNotifyTemplate, v))
}

// NotifyTemplateContains applies the Contains predicate on the "notify_template" field.
func NotifyTemplateContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldNotifyTemplate, v))
}

// NotifyTemplateHasPrefix applies the HasPrefix predicate on the "notify_template" field.
func NotifyTemplateHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldNotifyTemplate, v))
}

// NotifyTemplateHasSuffix applies the HasSuffix predicate on the "notify_template" field.
func NotifyTemplateHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldNotifyTemplate, v))
}

// NotifyTemplateEqualFold applies the EqualFold predicate on the "notify_template" field.
func NotifyTemplateEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldNotifyTemplate, v))
}

// NotifyTemplateContainsFold applies the ContainsFold predicate on the "notify_template" field.
func NotifyTemplateContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldNotifyTemplate, v))
}

// TemplateCodeEQ applies the EQ predicate on the "template_code" field.
func TemplateCodeEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTemplateCode, v))
}

// TemplateCodeNEQ applies the NEQ predicate on the "template_code" field.
func TemplateCodeNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldTemplateCode, v))
}

// TemplateCodeIn applies the In predicate on the "template_code" field.
func TemplateCodeIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldTemplateCode, vs...))
}

// TemplateCodeNotIn applies the NotIn predicate on the "template_code" field.
func TemplateCodeNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldTemplateCode, vs...))
}

// TemplateCodeGT applies the GT predicate on the "template_code" field.
func TemplateCodeGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldTemplateCode, v))
}

// TemplateCodeGTE applies the GTE predicate on the "template_code" field.
func TemplateCodeGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldTemplateCode, v))
}

// TemplateCodeLT applies the LT predicate on the "template_code" field.
func TemplateCodeLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldTemplateCode, v))
}

// TemplateCodeLTE applies the LTE predicate on the "template_code" field.
func TemplateCodeLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldTemplateCode, v))
}

// TemplateCodeContains applies the Contains predicate on the "template_code" field.
func TemplateCodeContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldTemplateCode, v))
}

// TemplateCodeHasPrefix applies the HasPrefix predicate on the "template_code" field.
func TemplateCodeHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldTemplateCode, v))
}

// TemplateCodeHasSuffix applies the HasSuffix predicate on the "template_code" field.
func TemplateCodeHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldTemplateCode, v))
}

// TemplateCodeEqualFold applies the EqualFold predicate on the "template_code" field.
func TemplateCodeEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldTemplateCode, v))
}

// TemplateCodeContainsFold applies the ContainsFold predicate on the "template_code" field.
func TemplateCodeContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldTemplateCode, v))
}

// PhoneNumbersEQ applies the EQ predicate on the "phone_numbers" field.
func PhoneNumbersEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldPhoneNumbers, v))
}

// PhoneNumbersNEQ applies the NEQ predicate on the "phone_numbers" field.
func PhoneNumbersNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldPhoneNumbers, v))
}

// PhoneNumbersIn applies the In predicate on the "phone_numbers" field.
func PhoneNumbersIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldPhoneNumbers, vs...))
}

// PhoneNumbersNotIn applies the NotIn predicate on the "phone_numbers" field.
func PhoneNumbersNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldPhoneNumbers, vs...))
}

// PhoneNumbersGT applies the GT predicate on the "phone_numbers" field.
func PhoneNumbersGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldPhoneNumbers, v))
}

// PhoneNumbersGTE applies the GTE predicate on the "phone_numbers" field.
func PhoneNumbersGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldPhoneNumbers, v))
}

// PhoneNumbersLT applies the LT predicate on the "phone_numbers" field.
func PhoneNumbersLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldPhoneNumbers, v))
}

// PhoneNumbersLTE applies the LTE predicate on the "phone_numbers" field.
func PhoneNumbersLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldPhoneNumbers, v))
}

// PhoneNumbersContains applies the Contains predicate on the "phone_numbers" field.
func PhoneNumbersContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldPhoneNumbers, v))
}

// PhoneNumbersHasPrefix applies the HasPrefix predicate on the "phone_numbers" field.
func PhoneNumbersHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldPhoneNumbers, v))
}

// PhoneNumbersHasSuffix applies the HasSuffix predicate on the "phone_numbers" field.
func PhoneNumbersHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldPhoneNumbers, v))
}

// PhoneNumbersEqualFold applies the EqualFold predicate on the "phone_numbers" field.
func PhoneNumbersEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldPhoneNumbers, v))
}

// PhoneNumbersContainsFold applies the ContainsFold predicate on the "phone_numbers" field.
func PhoneNumbersContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldPhoneNumbers, v))
}

// NotifySwitchEQ applies the EQ predicate on the "notify_switch" field.
func NotifySwitchEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldNotifySwitch, v))
}

// NotifySwitchNEQ applies the NEQ predicate on the "notify_switch" field.
func NotifySwitchNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldNotifySwitch, v))
}

// NotifySwitchIn applies the In predicate on the "notify_switch" field.
func NotifySwitchIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldNotifySwitch, vs...))
}

// NotifySwitchNotIn applies the NotIn predicate on the "notify_switch" field.
func NotifySwitchNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldNotifySwitch, vs...))
}

// NotifySwitchGT applies the GT predicate on the "notify_switch" field.
func NotifySwitchGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldNotifySwitch, v))
}

// NotifySwitchGTE applies the GTE predicate on the "notify_switch" field.
func NotifySwitchGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldNotifySwitch, v))
}

// NotifySwitchLT applies the LT predicate on the "notify_switch" field.
func NotifySwitchLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldNotifySwitch, v))
}

// NotifySwitchLTE applies the LTE predicate on the "notify_switch" field.
func NotifySwitchLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldNotifySwitch, v))
}

// NotifySwitchContains applies the Contains predicate on the "notify_switch" field.
func NotifySwitchContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldNotifySwitch, v))
}

// NotifySwitchHasPrefix applies the HasPrefix predicate on the "notify_switch" field.
func NotifySwitchHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldNotifySwitch, v))
}

// NotifySwitchHasSuffix applies the HasSuffix predicate on the "notify_switch" field.
func NotifySwitchHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldNotifySwitch, v))
}

// NotifySwitchEqualFold applies the EqualFold predicate on the "notify_switch" field.
func NotifySwitchEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldNotifySwitch, v))
}

// NotifySwitchContainsFold applies the ContainsFold predicate on the "notify_switch" field.
func NotifySwitchContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldNotifySwitch, v))
}

// TaskNameEQ applies the EQ predicate on the "task_name" field.
func TaskNameEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTaskName, v))
}

// TaskNameNEQ applies the NEQ predicate on the "task_name" field.
func TaskNameNEQ(v string) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldTaskName, v))
}

// TaskNameIn applies the In predicate on the "task_name" field.
func TaskNameIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldTaskName, vs...))
}

// TaskNameNotIn applies the NotIn predicate on the "task_name" field.
func TaskNameNotIn(vs ...string) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldTaskName, vs...))
}

// TaskNameGT applies the GT predicate on the "task_name" field.
func TaskNameGT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldTaskName, v))
}

// TaskNameGTE applies the GTE predicate on the "task_name" field.
func TaskNameGTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldTaskName, v))
}

// TaskNameLT applies the LT predicate on the "task_name" field.
func TaskNameLT(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldTaskName, v))
}

// TaskNameLTE applies the LTE predicate on the "task_name" field.
func TaskNameLTE(v string) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldTaskName, v))
}

// TaskNameContains applies the Contains predicate on the "task_name" field.
func TaskNameContains(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContains(FieldTaskName, v))
}

// TaskNameHasPrefix applies the HasPrefix predicate on the "task_name" field.
func TaskNameHasPrefix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasPrefix(FieldTaskName, v))
}

// TaskNameHasSuffix applies the HasSuffix predicate on the "task_name" field.
func TaskNameHasSuffix(v string) predicate.Inform {
	return predicate.Inform(sql.FieldHasSuffix(FieldTaskName, v))
}

// TaskNameEqualFold applies the EqualFold predicate on the "task_name" field.
func TaskNameEqualFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldEqualFold(FieldTaskName, v))
}

// TaskNameContainsFold applies the ContainsFold predicate on the "task_name" field.
func TaskNameContainsFold(v string) predicate.Inform {
	return predicate.Inform(sql.FieldContainsFold(FieldTaskName, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uint64) predicate.Inform {
	return predicate.Inform(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uint64) predicate.Inform {
	return predicate.Inform(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v uint64) predicate.Inform {
	return predicate.Inform(sql.FieldLTE(FieldTaskID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inform) predicate.Inform {
	return predicate.Inform(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inform) predicate.Inform {
	return predicate.Inform(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inform) predicate.Inform {
	return predicate.Inform(sql.NotPredicates(p))
}
