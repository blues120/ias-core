// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/warnpush"
)

// WarnPushDelete is the builder for deleting a WarnPush entity.
type WarnPushDelete struct {
	config
	hooks    []Hook
	mutation *WarnPushMutation
}

// Where appends a list predicates to the WarnPushDelete builder.
func (wpd *WarnPushDelete) Where(ps ...predicate.WarnPush) *WarnPushDelete {
	wpd.mutation.Where(ps...)
	return wpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wpd *WarnPushDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wpd.sqlExec, wpd.mutation, wpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wpd *WarnPushDelete) ExecX(ctx context.Context) int {
	n, err := wpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wpd *WarnPushDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(warnpush.Table, sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64))
	if ps := wpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wpd.mutation.done = true
	return affected, err
}

// WarnPushDeleteOne is the builder for deleting a single WarnPush entity.
type WarnPushDeleteOne struct {
	wpd *WarnPushDelete
}

// Where appends a list predicates to the WarnPushDelete builder.
func (wpdo *WarnPushDeleteOne) Where(ps ...predicate.WarnPush) *WarnPushDeleteOne {
	wpdo.wpd.mutation.Where(ps...)
	return wpdo
}

// Exec executes the deletion query.
func (wpdo *WarnPushDeleteOne) Exec(ctx context.Context) error {
	n, err := wpdo.wpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{warnpush.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wpdo *WarnPushDeleteOne) ExecX(ctx context.Context) {
	if err := wpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
