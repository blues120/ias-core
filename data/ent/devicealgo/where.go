// Code generated by ent, DO NOT EDIT.

package devicealgo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldID, id))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldDeviceID, v))
}

// AlgoGroupID applies equality check predicate on the "algo_group_id" field. It's identical to AlgoGroupIDEQ.
func AlgoGroupID(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupName applies equality check predicate on the "algo_group_name" field. It's identical to AlgoGroupNameEQ.
func AlgoGroupName(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupName, v))
}

// AlgoGroupVersion applies equality check predicate on the "algo_group_version" field. It's identical to AlgoGroupVersionEQ.
func AlgoGroupVersion(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupVersion, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldVersion, v))
}

// InstallTime applies equality check predicate on the "install_time" field. It's identical to InstallTimeEQ.
func InstallTime(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldInstallTime, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v uint64) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldDeviceID, v))
}

// AlgoGroupIDEQ applies the EQ predicate on the "algo_group_id" field.
func AlgoGroupIDEQ(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDNEQ applies the NEQ predicate on the "algo_group_id" field.
func AlgoGroupIDNEQ(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDIn applies the In predicate on the "algo_group_id" field.
func AlgoGroupIDIn(vs ...uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDNotIn applies the NotIn predicate on the "algo_group_id" field.
func AlgoGroupIDNotIn(vs ...uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDGT applies the GT predicate on the "algo_group_id" field.
func AlgoGroupIDGT(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldAlgoGroupID, v))
}

// AlgoGroupIDGTE applies the GTE predicate on the "algo_group_id" field.
func AlgoGroupIDGTE(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDLT applies the LT predicate on the "algo_group_id" field.
func AlgoGroupIDLT(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldAlgoGroupID, v))
}

// AlgoGroupIDLTE applies the LTE predicate on the "algo_group_id" field.
func AlgoGroupIDLTE(v uint) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDIsNil applies the IsNil predicate on the "algo_group_id" field.
func AlgoGroupIDIsNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIsNull(FieldAlgoGroupID))
}

// AlgoGroupIDNotNil applies the NotNil predicate on the "algo_group_id" field.
func AlgoGroupIDNotNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotNull(FieldAlgoGroupID))
}

// AlgoGroupNameEQ applies the EQ predicate on the "algo_group_name" field.
func AlgoGroupNameEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupName, v))
}

// AlgoGroupNameNEQ applies the NEQ predicate on the "algo_group_name" field.
func AlgoGroupNameNEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldAlgoGroupName, v))
}

// AlgoGroupNameIn applies the In predicate on the "algo_group_name" field.
func AlgoGroupNameIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldAlgoGroupName, vs...))
}

// AlgoGroupNameNotIn applies the NotIn predicate on the "algo_group_name" field.
func AlgoGroupNameNotIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldAlgoGroupName, vs...))
}

// AlgoGroupNameGT applies the GT predicate on the "algo_group_name" field.
func AlgoGroupNameGT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldAlgoGroupName, v))
}

// AlgoGroupNameGTE applies the GTE predicate on the "algo_group_name" field.
func AlgoGroupNameGTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldAlgoGroupName, v))
}

// AlgoGroupNameLT applies the LT predicate on the "algo_group_name" field.
func AlgoGroupNameLT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldAlgoGroupName, v))
}

// AlgoGroupNameLTE applies the LTE predicate on the "algo_group_name" field.
func AlgoGroupNameLTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldAlgoGroupName, v))
}

// AlgoGroupNameContains applies the Contains predicate on the "algo_group_name" field.
func AlgoGroupNameContains(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContains(FieldAlgoGroupName, v))
}

// AlgoGroupNameHasPrefix applies the HasPrefix predicate on the "algo_group_name" field.
func AlgoGroupNameHasPrefix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasPrefix(FieldAlgoGroupName, v))
}

// AlgoGroupNameHasSuffix applies the HasSuffix predicate on the "algo_group_name" field.
func AlgoGroupNameHasSuffix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasSuffix(FieldAlgoGroupName, v))
}

// AlgoGroupNameIsNil applies the IsNil predicate on the "algo_group_name" field.
func AlgoGroupNameIsNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIsNull(FieldAlgoGroupName))
}

// AlgoGroupNameNotNil applies the NotNil predicate on the "algo_group_name" field.
func AlgoGroupNameNotNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotNull(FieldAlgoGroupName))
}

// AlgoGroupNameEqualFold applies the EqualFold predicate on the "algo_group_name" field.
func AlgoGroupNameEqualFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEqualFold(FieldAlgoGroupName, v))
}

// AlgoGroupNameContainsFold applies the ContainsFold predicate on the "algo_group_name" field.
func AlgoGroupNameContainsFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContainsFold(FieldAlgoGroupName, v))
}

// AlgoGroupVersionEQ applies the EQ predicate on the "algo_group_version" field.
func AlgoGroupVersionEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionNEQ applies the NEQ predicate on the "algo_group_version" field.
func AlgoGroupVersionNEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionIn applies the In predicate on the "algo_group_version" field.
func AlgoGroupVersionIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldAlgoGroupVersion, vs...))
}

// AlgoGroupVersionNotIn applies the NotIn predicate on the "algo_group_version" field.
func AlgoGroupVersionNotIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldAlgoGroupVersion, vs...))
}

// AlgoGroupVersionGT applies the GT predicate on the "algo_group_version" field.
func AlgoGroupVersionGT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionGTE applies the GTE predicate on the "algo_group_version" field.
func AlgoGroupVersionGTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionLT applies the LT predicate on the "algo_group_version" field.
func AlgoGroupVersionLT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionLTE applies the LTE predicate on the "algo_group_version" field.
func AlgoGroupVersionLTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionContains applies the Contains predicate on the "algo_group_version" field.
func AlgoGroupVersionContains(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContains(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionHasPrefix applies the HasPrefix predicate on the "algo_group_version" field.
func AlgoGroupVersionHasPrefix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasPrefix(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionHasSuffix applies the HasSuffix predicate on the "algo_group_version" field.
func AlgoGroupVersionHasSuffix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasSuffix(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionIsNil applies the IsNil predicate on the "algo_group_version" field.
func AlgoGroupVersionIsNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIsNull(FieldAlgoGroupVersion))
}

// AlgoGroupVersionNotNil applies the NotNil predicate on the "algo_group_version" field.
func AlgoGroupVersionNotNil() predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotNull(FieldAlgoGroupVersion))
}

// AlgoGroupVersionEqualFold applies the EqualFold predicate on the "algo_group_version" field.
func AlgoGroupVersionEqualFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEqualFold(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionContainsFold applies the ContainsFold predicate on the "algo_group_version" field.
func AlgoGroupVersionContainsFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContainsFold(FieldAlgoGroupVersion, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldContainsFold(FieldVersion, v))
}

// InstallTimeEQ applies the EQ predicate on the "install_time" field.
func InstallTimeEQ(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldEQ(FieldInstallTime, v))
}

// InstallTimeNEQ applies the NEQ predicate on the "install_time" field.
func InstallTimeNEQ(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNEQ(FieldInstallTime, v))
}

// InstallTimeIn applies the In predicate on the "install_time" field.
func InstallTimeIn(vs ...time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldIn(FieldInstallTime, vs...))
}

// InstallTimeNotIn applies the NotIn predicate on the "install_time" field.
func InstallTimeNotIn(vs ...time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldNotIn(FieldInstallTime, vs...))
}

// InstallTimeGT applies the GT predicate on the "install_time" field.
func InstallTimeGT(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGT(FieldInstallTime, v))
}

// InstallTimeGTE applies the GTE predicate on the "install_time" field.
func InstallTimeGTE(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldGTE(FieldInstallTime, v))
}

// InstallTimeLT applies the LT predicate on the "install_time" field.
func InstallTimeLT(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLT(FieldInstallTime, v))
}

// InstallTimeLTE applies the LTE predicate on the "install_time" field.
func InstallTimeLTE(v time.Time) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.FieldLTE(FieldInstallTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceAlgo) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceAlgo) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceAlgo) predicate.DeviceAlgo {
	return predicate.DeviceAlgo(sql.NotPredicates(p))
}
