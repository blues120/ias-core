// Code generated by ent, DO NOT EDIT.

package devicealgo

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the devicealgo type in the database.
	Label = "device_algo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldAlgoGroupID holds the string denoting the algo_group_id field in the database.
	FieldAlgoGroupID = "algo_group_id"
	// FieldAlgoGroupName holds the string denoting the algo_group_name field in the database.
	FieldAlgoGroupName = "algo_group_name"
	// FieldAlgoGroupVersion holds the string denoting the algo_group_version field in the database.
	FieldAlgoGroupVersion = "algo_group_version"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldInstallTime holds the string denoting the install_time field in the database.
	FieldInstallTime = "install_time"
	// Table holds the table name of the devicealgo in the database.
	Table = "device_algo"
)

// Columns holds all SQL columns for devicealgo fields.
var Columns = []string{
	FieldID,
	FieldDeviceID,
	FieldAlgoGroupID,
	FieldAlgoGroupName,
	FieldAlgoGroupVersion,
	FieldName,
	FieldVersion,
	FieldInstallTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DeviceAlgo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByAlgoGroupID orders the results by the algo_group_id field.
func ByAlgoGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoGroupID, opts...).ToFunc()
}

// ByAlgoGroupName orders the results by the algo_group_name field.
func ByAlgoGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoGroupName, opts...).ToFunc()
}

// ByAlgoGroupVersion orders the results by the algo_group_version field.
func ByAlgoGroupVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoGroupVersion, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByInstallTime orders the results by the install_time field.
func ByInstallTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallTime, opts...).ToFunc()
}
