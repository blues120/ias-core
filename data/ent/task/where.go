// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAccessOrgList, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// AlgoID applies equality check predicate on the "algo_id" field. It's identical to AlgoIDEQ.
func AlgoID(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoID, v))
}

// AlgoInterval applies equality check predicate on the "algo_interval" field. It's identical to AlgoIntervalEQ.
func AlgoInterval(v float64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoInterval, v))
}

// AlgoExtra applies equality check predicate on the "algo_extra" field. It's identical to AlgoExtraEQ.
func AlgoExtra(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoExtra, v))
}

// Extend applies equality check predicate on the "extend" field. It's identical to ExtendEQ.
func Extend(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExtend, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeviceID, v))
}

// LastStartTime applies equality check predicate on the "last_start_time" field. It's identical to LastStartTimeEQ.
func LastStartTime(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastStartTime, v))
}

// AlgoGroupID applies equality check predicate on the "algo_group_id" field. It's identical to AlgoGroupIDEQ.
func AlgoGroupID(v uint) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoGroupID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// IsWarn applies equality check predicate on the "is_warn" field. It's identical to IsWarnEQ.
func IsWarn(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsWarn, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPeriod, v))
}

// AlgoConfig applies equality check predicate on the "algo_config" field. It's identical to AlgoConfigEQ.
func AlgoConfig(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoConfig, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReason, v))
}

// AllowTimeType applies equality check predicate on the "allow_time_type" field. It's identical to AllowTimeTypeEQ.
func AllowTimeType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowTimeType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDeletedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v biz.TaskType) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v biz.TaskType) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...biz.TaskType) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...biz.TaskType) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldNotIn(FieldType, v...))
}

// AlgoIDEQ applies the EQ predicate on the "algo_id" field.
func AlgoIDEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoID, v))
}

// AlgoIDNEQ applies the NEQ predicate on the "algo_id" field.
func AlgoIDNEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAlgoID, v))
}

// AlgoIDIn applies the In predicate on the "algo_id" field.
func AlgoIDIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAlgoID, vs...))
}

// AlgoIDNotIn applies the NotIn predicate on the "algo_id" field.
func AlgoIDNotIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAlgoID, vs...))
}

// AlgoIntervalEQ applies the EQ predicate on the "algo_interval" field.
func AlgoIntervalEQ(v float64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoInterval, v))
}

// AlgoIntervalNEQ applies the NEQ predicate on the "algo_interval" field.
func AlgoIntervalNEQ(v float64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAlgoInterval, v))
}

// AlgoIntervalIn applies the In predicate on the "algo_interval" field.
func AlgoIntervalIn(vs ...float64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAlgoInterval, vs...))
}

// AlgoIntervalNotIn applies the NotIn predicate on the "algo_interval" field.
func AlgoIntervalNotIn(vs ...float64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAlgoInterval, vs...))
}

// AlgoIntervalGT applies the GT predicate on the "algo_interval" field.
func AlgoIntervalGT(v float64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAlgoInterval, v))
}

// AlgoIntervalGTE applies the GTE predicate on the "algo_interval" field.
func AlgoIntervalGTE(v float64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAlgoInterval, v))
}

// AlgoIntervalLT applies the LT predicate on the "algo_interval" field.
func AlgoIntervalLT(v float64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAlgoInterval, v))
}

// AlgoIntervalLTE applies the LTE predicate on the "algo_interval" field.
func AlgoIntervalLTE(v float64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAlgoInterval, v))
}

// AlgoExtraEQ applies the EQ predicate on the "algo_extra" field.
func AlgoExtraEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoExtra, v))
}

// AlgoExtraNEQ applies the NEQ predicate on the "algo_extra" field.
func AlgoExtraNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAlgoExtra, v))
}

// AlgoExtraIn applies the In predicate on the "algo_extra" field.
func AlgoExtraIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAlgoExtra, vs...))
}

// AlgoExtraNotIn applies the NotIn predicate on the "algo_extra" field.
func AlgoExtraNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAlgoExtra, vs...))
}

// AlgoExtraGT applies the GT predicate on the "algo_extra" field.
func AlgoExtraGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAlgoExtra, v))
}

// AlgoExtraGTE applies the GTE predicate on the "algo_extra" field.
func AlgoExtraGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAlgoExtra, v))
}

// AlgoExtraLT applies the LT predicate on the "algo_extra" field.
func AlgoExtraLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAlgoExtra, v))
}

// AlgoExtraLTE applies the LTE predicate on the "algo_extra" field.
func AlgoExtraLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAlgoExtra, v))
}

// AlgoExtraContains applies the Contains predicate on the "algo_extra" field.
func AlgoExtraContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAlgoExtra, v))
}

// AlgoExtraHasPrefix applies the HasPrefix predicate on the "algo_extra" field.
func AlgoExtraHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAlgoExtra, v))
}

// AlgoExtraHasSuffix applies the HasSuffix predicate on the "algo_extra" field.
func AlgoExtraHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAlgoExtra, v))
}

// AlgoExtraEqualFold applies the EqualFold predicate on the "algo_extra" field.
func AlgoExtraEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAlgoExtra, v))
}

// AlgoExtraContainsFold applies the ContainsFold predicate on the "algo_extra" field.
func AlgoExtraContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAlgoExtra, v))
}

// ExtendEQ applies the EQ predicate on the "extend" field.
func ExtendEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExtend, v))
}

// ExtendNEQ applies the NEQ predicate on the "extend" field.
func ExtendNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldExtend, v))
}

// ExtendIn applies the In predicate on the "extend" field.
func ExtendIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldExtend, vs...))
}

// ExtendNotIn applies the NotIn predicate on the "extend" field.
func ExtendNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldExtend, vs...))
}

// ExtendGT applies the GT predicate on the "extend" field.
func ExtendGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldExtend, v))
}

// ExtendGTE applies the GTE predicate on the "extend" field.
func ExtendGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldExtend, v))
}

// ExtendLT applies the LT predicate on the "extend" field.
func ExtendLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldExtend, v))
}

// ExtendLTE applies the LTE predicate on the "extend" field.
func ExtendLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldExtend, v))
}

// ExtendContains applies the Contains predicate on the "extend" field.
func ExtendContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldExtend, v))
}

// ExtendHasPrefix applies the HasPrefix predicate on the "extend" field.
func ExtendHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldExtend, v))
}

// ExtendHasSuffix applies the HasSuffix predicate on the "extend" field.
func ExtendHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldExtend, v))
}

// ExtendEqualFold applies the EqualFold predicate on the "extend" field.
func ExtendEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldExtend, v))
}

// ExtendContainsFold applies the ContainsFold predicate on the "extend" field.
func ExtendContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldExtend, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeviceID, vs...))
}

// LastStartTimeEQ applies the EQ predicate on the "last_start_time" field.
func LastStartTimeEQ(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastStartTime, v))
}

// LastStartTimeNEQ applies the NEQ predicate on the "last_start_time" field.
func LastStartTimeNEQ(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLastStartTime, v))
}

// LastStartTimeIn applies the In predicate on the "last_start_time" field.
func LastStartTimeIn(vs ...*sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLastStartTime, vs...))
}

// LastStartTimeNotIn applies the NotIn predicate on the "last_start_time" field.
func LastStartTimeNotIn(vs ...*sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLastStartTime, vs...))
}

// LastStartTimeGT applies the GT predicate on the "last_start_time" field.
func LastStartTimeGT(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLastStartTime, v))
}

// LastStartTimeGTE applies the GTE predicate on the "last_start_time" field.
func LastStartTimeGTE(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLastStartTime, v))
}

// LastStartTimeLT applies the LT predicate on the "last_start_time" field.
func LastStartTimeLT(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLastStartTime, v))
}

// LastStartTimeLTE applies the LTE predicate on the "last_start_time" field.
func LastStartTimeLTE(v *sql.NullTime) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLastStartTime, v))
}

// LastStartTimeIsNil applies the IsNil predicate on the "last_start_time" field.
func LastStartTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLastStartTime))
}

// LastStartTimeNotNil applies the NotNil predicate on the "last_start_time" field.
func LastStartTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLastStartTime))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v biz.TaskStatus) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v biz.TaskStatus) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...biz.TaskStatus) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...biz.TaskStatus) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldNotIn(FieldStatus, v...))
}

// AlgoGroupIDEQ applies the EQ predicate on the "algo_group_id" field.
func AlgoGroupIDEQ(v uint) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDNEQ applies the NEQ predicate on the "algo_group_id" field.
func AlgoGroupIDNEQ(v uint) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDIn applies the In predicate on the "algo_group_id" field.
func AlgoGroupIDIn(vs ...uint) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDNotIn applies the NotIn predicate on the "algo_group_id" field.
func AlgoGroupIDNotIn(vs ...uint) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDGT applies the GT predicate on the "algo_group_id" field.
func AlgoGroupIDGT(v uint) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAlgoGroupID, v))
}

// AlgoGroupIDGTE applies the GTE predicate on the "algo_group_id" field.
func AlgoGroupIDGTE(v uint) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDLT applies the LT predicate on the "algo_group_id" field.
func AlgoGroupIDLT(v uint) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAlgoGroupID, v))
}

// AlgoGroupIDLTE applies the LTE predicate on the "algo_group_id" field.
func AlgoGroupIDLTE(v uint) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAlgoGroupID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldParentID, v))
}

// IsWarnEQ applies the EQ predicate on the "is_warn" field.
func IsWarnEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsWarn, v))
}

// IsWarnNEQ applies the NEQ predicate on the "is_warn" field.
func IsWarnNEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsWarn, v))
}

// IsWarnIn applies the In predicate on the "is_warn" field.
func IsWarnIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldIsWarn, vs...))
}

// IsWarnNotIn applies the NotIn predicate on the "is_warn" field.
func IsWarnNotIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldIsWarn, vs...))
}

// IsWarnGT applies the GT predicate on the "is_warn" field.
func IsWarnGT(v uint32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldIsWarn, v))
}

// IsWarnGTE applies the GTE predicate on the "is_warn" field.
func IsWarnGTE(v uint32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldIsWarn, v))
}

// IsWarnLT applies the LT predicate on the "is_warn" field.
func IsWarnLT(v uint32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldIsWarn, v))
}

// IsWarnLTE applies the LTE predicate on the "is_warn" field.
func IsWarnLTE(v uint32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldIsWarn, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v uint32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v uint32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v uint32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v uint32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPeriod, v))
}

// AlgoConfigEQ applies the EQ predicate on the "algo_config" field.
func AlgoConfigEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAlgoConfig, v))
}

// AlgoConfigNEQ applies the NEQ predicate on the "algo_config" field.
func AlgoConfigNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAlgoConfig, v))
}

// AlgoConfigIn applies the In predicate on the "algo_config" field.
func AlgoConfigIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAlgoConfig, vs...))
}

// AlgoConfigNotIn applies the NotIn predicate on the "algo_config" field.
func AlgoConfigNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAlgoConfig, vs...))
}

// AlgoConfigGT applies the GT predicate on the "algo_config" field.
func AlgoConfigGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAlgoConfig, v))
}

// AlgoConfigGTE applies the GTE predicate on the "algo_config" field.
func AlgoConfigGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAlgoConfig, v))
}

// AlgoConfigLT applies the LT predicate on the "algo_config" field.
func AlgoConfigLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAlgoConfig, v))
}

// AlgoConfigLTE applies the LTE predicate on the "algo_config" field.
func AlgoConfigLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAlgoConfig, v))
}

// AlgoConfigContains applies the Contains predicate on the "algo_config" field.
func AlgoConfigContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAlgoConfig, v))
}

// AlgoConfigHasPrefix applies the HasPrefix predicate on the "algo_config" field.
func AlgoConfigHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAlgoConfig, v))
}

// AlgoConfigHasSuffix applies the HasSuffix predicate on the "algo_config" field.
func AlgoConfigHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAlgoConfig, v))
}

// AlgoConfigIsNil applies the IsNil predicate on the "algo_config" field.
func AlgoConfigIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAlgoConfig))
}

// AlgoConfigNotNil applies the NotNil predicate on the "algo_config" field.
func AlgoConfigNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAlgoConfig))
}

// AlgoConfigEqualFold applies the EqualFold predicate on the "algo_config" field.
func AlgoConfigEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAlgoConfig, v))
}

// AlgoConfigContainsFold applies the ContainsFold predicate on the "algo_config" field.
func AlgoConfigContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAlgoConfig, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldReason, v))
}

// AllowTimeTypeEQ applies the EQ predicate on the "allow_time_type" field.
func AllowTimeTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowTimeType, v))
}

// AllowTimeTypeNEQ applies the NEQ predicate on the "allow_time_type" field.
func AllowTimeTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAllowTimeType, v))
}

// AllowTimeTypeIn applies the In predicate on the "allow_time_type" field.
func AllowTimeTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAllowTimeType, vs...))
}

// AllowTimeTypeNotIn applies the NotIn predicate on the "allow_time_type" field.
func AllowTimeTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAllowTimeType, vs...))
}

// AllowTimeTypeGT applies the GT predicate on the "allow_time_type" field.
func AllowTimeTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAllowTimeType, v))
}

// AllowTimeTypeGTE applies the GTE predicate on the "allow_time_type" field.
func AllowTimeTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAllowTimeType, v))
}

// AllowTimeTypeLT applies the LT predicate on the "allow_time_type" field.
func AllowTimeTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAllowTimeType, v))
}

// AllowTimeTypeLTE applies the LTE predicate on the "allow_time_type" field.
func AllowTimeTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAllowTimeType, v))
}

// AllowTimeTypeContains applies the Contains predicate on the "allow_time_type" field.
func AllowTimeTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAllowTimeType, v))
}

// AllowTimeTypeHasPrefix applies the HasPrefix predicate on the "allow_time_type" field.
func AllowTimeTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAllowTimeType, v))
}

// AllowTimeTypeHasSuffix applies the HasSuffix predicate on the "allow_time_type" field.
func AllowTimeTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAllowTimeType, v))
}

// AllowTimeTypeIsNil applies the IsNil predicate on the "allow_time_type" field.
func AllowTimeTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAllowTimeType))
}

// AllowTimeTypeNotNil applies the NotNil predicate on the "allow_time_type" field.
func AllowTimeTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAllowTimeType))
}

// AllowTimeTypeEqualFold applies the EqualFold predicate on the "allow_time_type" field.
func AllowTimeTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAllowTimeType, v))
}

// AllowTimeTypeContainsFold applies the ContainsFold predicate on the "allow_time_type" field.
func AllowTimeTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAllowTimeType, v))
}

// HasCamera applies the HasEdge predicate on the "camera" edge.
func HasCamera() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CameraTable, CameraPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCameraWith applies the HasEdge predicate on the "camera" edge with a given conditions (other predicates).
func HasCameraWith(preds ...predicate.Camera) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlgorithm applies the HasEdge predicate on the "algorithm" edge.
func HasAlgorithm() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AlgorithmTable, AlgorithmColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlgorithmWith applies the HasEdge predicate on the "algorithm" edge with a given conditions (other predicates).
func HasAlgorithmWith(preds ...predicate.Algorithm) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newAlgorithmStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskCamera applies the HasEdge predicate on the "task_camera" edge.
func HasTaskCamera() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TaskCameraTable, TaskCameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskCameraWith applies the HasEdge predicate on the "task_camera" edge with a given conditions (other predicates).
func HasTaskCameraWith(preds ...predicate.TaskCamera) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTaskCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
