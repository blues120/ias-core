// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/biz"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAccessOrgList holds the string denoting the access_org_list field in the database.
	FieldAccessOrgList = "access_org_list"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAlgoID holds the string denoting the algo_id field in the database.
	FieldAlgoID = "algo_id"
	// FieldAlgoInterval holds the string denoting the algo_interval field in the database.
	FieldAlgoInterval = "algo_interval"
	// FieldAlgoExtra holds the string denoting the algo_extra field in the database.
	FieldAlgoExtra = "algo_extra"
	// FieldExtend holds the string denoting the extend field in the database.
	FieldExtend = "extend"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldLastStartTime holds the string denoting the last_start_time field in the database.
	FieldLastStartTime = "last_start_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAlgoGroupID holds the string denoting the algo_group_id field in the database.
	FieldAlgoGroupID = "algo_group_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldIsWarn holds the string denoting the is_warn field in the database.
	FieldIsWarn = "is_warn"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldAlgoConfig holds the string denoting the algo_config field in the database.
	FieldAlgoConfig = "algo_config"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldAllowTimeType holds the string denoting the allow_time_type field in the database.
	FieldAllowTimeType = "allow_time_type"
	// EdgeCamera holds the string denoting the camera edge name in mutations.
	EdgeCamera = "camera"
	// EdgeAlgorithm holds the string denoting the algorithm edge name in mutations.
	EdgeAlgorithm = "algorithm"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeTaskCamera holds the string denoting the task_camera edge name in mutations.
	EdgeTaskCamera = "task_camera"
	// Table holds the table name of the task in the database.
	Table = "task"
	// CameraTable is the table that holds the camera relation/edge. The primary key declared below.
	CameraTable = "task_camera"
	// CameraInverseTable is the table name for the Camera entity.
	// It exists in this package in order to avoid circular dependency with the "camera" package.
	CameraInverseTable = "camera"
	// AlgorithmTable is the table that holds the algorithm relation/edge.
	AlgorithmTable = "task"
	// AlgorithmInverseTable is the table name for the Algorithm entity.
	// It exists in this package in order to avoid circular dependency with the "algorithm" package.
	AlgorithmInverseTable = "algorithm"
	// AlgorithmColumn is the table column denoting the algorithm relation/edge.
	AlgorithmColumn = "algo_id"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "task"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "device"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_id"
	// TaskCameraTable is the table that holds the task_camera relation/edge.
	TaskCameraTable = "task_camera"
	// TaskCameraInverseTable is the table name for the TaskCamera entity.
	// It exists in this package in order to avoid circular dependency with the "taskcamera" package.
	TaskCameraInverseTable = "task_camera"
	// TaskCameraColumn is the table column denoting the task_camera relation/edge.
	TaskCameraColumn = "task_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantID,
	FieldAccessOrgList,
	FieldName,
	FieldType,
	FieldAlgoID,
	FieldAlgoInterval,
	FieldAlgoExtra,
	FieldExtend,
	FieldDeviceID,
	FieldLastStartTime,
	FieldStatus,
	FieldAlgoGroupID,
	FieldParentID,
	FieldIsWarn,
	FieldPeriod,
	FieldAlgoConfig,
	FieldReason,
	FieldAllowTimeType,
}

var (
	// CameraPrimaryKey and CameraColumn2 are the table columns denoting the
	// primary key for the camera relation (M2M).
	CameraPrimaryKey = []string{"task_id", "camera_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/blues120/ias-core/data/ent/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [4]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultReason holds the default value on creation for the "reason" field.
	DefaultReason string
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type biz.TaskType) error {
	switch _type {
	case "unknown", "frame", "stream", "audio":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for type field: %q", _type)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s biz.TaskStatus) error {
	switch s {
	case "unknown", "running", "starting", "initializing", "failed", "stopping", "stopped":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAccessOrgList orders the results by the access_org_list field.
func ByAccessOrgList(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessOrgList, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAlgoID orders the results by the algo_id field.
func ByAlgoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoID, opts...).ToFunc()
}

// ByAlgoInterval orders the results by the algo_interval field.
func ByAlgoInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoInterval, opts...).ToFunc()
}

// ByAlgoExtra orders the results by the algo_extra field.
func ByAlgoExtra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoExtra, opts...).ToFunc()
}

// ByExtend orders the results by the extend field.
func ByExtend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtend, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByLastStartTime orders the results by the last_start_time field.
func ByLastStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastStartTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAlgoGroupID orders the results by the algo_group_id field.
func ByAlgoGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoGroupID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByIsWarn orders the results by the is_warn field.
func ByIsWarn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWarn, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByAlgoConfig orders the results by the algo_config field.
func ByAlgoConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoConfig, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByAllowTimeType orders the results by the allow_time_type field.
func ByAllowTimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowTimeType, opts...).ToFunc()
}

// ByCameraCount orders the results by camera count.
func ByCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCameraStep(), opts...)
	}
}

// ByCamera orders the results by camera terms.
func ByCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAlgorithmField orders the results by algorithm field.
func ByAlgorithmField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlgorithmStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskCameraCount orders the results by task_camera count.
func ByTaskCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskCameraStep(), opts...)
	}
}

// ByTaskCamera orders the results by task_camera terms.
func ByTaskCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CameraTable, CameraPrimaryKey...),
	)
}
func newAlgorithmStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlgorithmInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AlgorithmTable, AlgorithmColumn),
	)
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
func newTaskCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskCameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TaskCameraTable, TaskCameraColumn),
	)
}
