// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/warnsmserr"
)

// WarnSmsErrDelete is the builder for deleting a WarnSmsErr entity.
type WarnSmsErrDelete struct {
	config
	hooks    []Hook
	mutation *WarnSmsErrMutation
}

// Where appends a list predicates to the WarnSmsErrDelete builder.
func (wsed *WarnSmsErrDelete) Where(ps ...predicate.WarnSmsErr) *WarnSmsErrDelete {
	wsed.mutation.Where(ps...)
	return wsed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wsed *WarnSmsErrDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wsed.sqlExec, wsed.mutation, wsed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wsed *WarnSmsErrDelete) ExecX(ctx context.Context) int {
	n, err := wsed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wsed *WarnSmsErrDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(warnsmserr.Table, sqlgraph.NewFieldSpec(warnsmserr.FieldID, field.TypeUint64))
	if ps := wsed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wsed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wsed.mutation.done = true
	return affected, err
}

// WarnSmsErrDeleteOne is the builder for deleting a single WarnSmsErr entity.
type WarnSmsErrDeleteOne struct {
	wsed *WarnSmsErrDelete
}

// Where appends a list predicates to the WarnSmsErrDelete builder.
func (wsedo *WarnSmsErrDeleteOne) Where(ps ...predicate.WarnSmsErr) *WarnSmsErrDeleteOne {
	wsedo.wsed.mutation.Where(ps...)
	return wsedo
}

// Exec executes the deletion query.
func (wsedo *WarnSmsErrDeleteOne) Exec(ctx context.Context) error {
	n, err := wsedo.wsed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{warnsmserr.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wsedo *WarnSmsErrDeleteOne) ExecX(ctx context.Context) {
	if err := wsedo.Exec(ctx); err != nil {
		panic(err)
	}
}
