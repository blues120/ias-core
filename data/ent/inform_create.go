// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/inform"
)

// InformCreate is the builder for creating a Inform entity.
type InformCreate struct {
	config
	mutation *InformMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ic *InformCreate) SetTenantID(s string) *InformCreate {
	ic.mutation.SetTenantID(s)
	return ic
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ic *InformCreate) SetNillableTenantID(s *string) *InformCreate {
	if s != nil {
		ic.SetTenantID(*s)
	}
	return ic
}

// SetAccessOrgList sets the "access_org_list" field.
func (ic *InformCreate) SetAccessOrgList(s string) *InformCreate {
	ic.mutation.SetAccessOrgList(s)
	return ic
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (ic *InformCreate) SetNillableAccessOrgList(s *string) *InformCreate {
	if s != nil {
		ic.SetAccessOrgList(*s)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InformCreate) SetCreatedAt(t time.Time) *InformCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InformCreate) SetNillableCreatedAt(t *time.Time) *InformCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InformCreate) SetUpdatedAt(t time.Time) *InformCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InformCreate) SetNillableUpdatedAt(t *time.Time) *InformCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InformCreate) SetDeletedAt(t time.Time) *InformCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InformCreate) SetNillableDeletedAt(t *time.Time) *InformCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetAlarmName sets the "alarm_name" field.
func (ic *InformCreate) SetAlarmName(s string) *InformCreate {
	ic.mutation.SetAlarmName(s)
	return ic
}

// SetAlarmType sets the "alarm_type" field.
func (ic *InformCreate) SetAlarmType(s string) *InformCreate {
	ic.mutation.SetAlarmType(s)
	return ic
}

// SetSignName sets the "sign_name" field.
func (ic *InformCreate) SetSignName(s string) *InformCreate {
	ic.mutation.SetSignName(s)
	return ic
}

// SetNotifyTemplate sets the "notify_template" field.
func (ic *InformCreate) SetNotifyTemplate(s string) *InformCreate {
	ic.mutation.SetNotifyTemplate(s)
	return ic
}

// SetTemplateCode sets the "template_code" field.
func (ic *InformCreate) SetTemplateCode(s string) *InformCreate {
	ic.mutation.SetTemplateCode(s)
	return ic
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (ic *InformCreate) SetPhoneNumbers(s string) *InformCreate {
	ic.mutation.SetPhoneNumbers(s)
	return ic
}

// SetNotifySwitch sets the "notify_switch" field.
func (ic *InformCreate) SetNotifySwitch(s string) *InformCreate {
	ic.mutation.SetNotifySwitch(s)
	return ic
}

// SetTaskName sets the "task_name" field.
func (ic *InformCreate) SetTaskName(s string) *InformCreate {
	ic.mutation.SetTaskName(s)
	return ic
}

// SetTaskID sets the "task_id" field.
func (ic *InformCreate) SetTaskID(u uint64) *InformCreate {
	ic.mutation.SetTaskID(u)
	return ic
}

// SetID sets the "id" field.
func (ic *InformCreate) SetID(u uint64) *InformCreate {
	ic.mutation.SetID(u)
	return ic
}

// Mutation returns the InformMutation object of the builder.
func (ic *InformCreate) Mutation() *InformMutation {
	return ic.mutation
}

// Save creates the Inform in the database.
func (ic *InformCreate) Save(ctx context.Context) (*Inform, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InformCreate) SaveX(ctx context.Context) *Inform {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InformCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InformCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InformCreate) check() error {
	if _, ok := ic.mutation.AlarmName(); !ok {
		return &ValidationError{Name: "alarm_name", err: errors.New(`ent: missing required field "Inform.alarm_name"`)}
	}
	if _, ok := ic.mutation.AlarmType(); !ok {
		return &ValidationError{Name: "alarm_type", err: errors.New(`ent: missing required field "Inform.alarm_type"`)}
	}
	if _, ok := ic.mutation.SignName(); !ok {
		return &ValidationError{Name: "sign_name", err: errors.New(`ent: missing required field "Inform.sign_name"`)}
	}
	if _, ok := ic.mutation.NotifyTemplate(); !ok {
		return &ValidationError{Name: "notify_template", err: errors.New(`ent: missing required field "Inform.notify_template"`)}
	}
	if _, ok := ic.mutation.TemplateCode(); !ok {
		return &ValidationError{Name: "template_code", err: errors.New(`ent: missing required field "Inform.template_code"`)}
	}
	if _, ok := ic.mutation.PhoneNumbers(); !ok {
		return &ValidationError{Name: "phone_numbers", err: errors.New(`ent: missing required field "Inform.phone_numbers"`)}
	}
	if _, ok := ic.mutation.NotifySwitch(); !ok {
		return &ValidationError{Name: "notify_switch", err: errors.New(`ent: missing required field "Inform.notify_switch"`)}
	}
	if _, ok := ic.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`ent: missing required field "Inform.task_name"`)}
	}
	if _, ok := ic.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "Inform.task_id"`)}
	}
	return nil
}

func (ic *InformCreate) sqlSave(ctx context.Context) (*Inform, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InformCreate) createSpec() (*Inform, *sqlgraph.CreateSpec) {
	var (
		_node = &Inform{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inform.Table, sqlgraph.NewFieldSpec(inform.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.TenantID(); ok {
		_spec.SetField(inform.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ic.mutation.AccessOrgList(); ok {
		_spec.SetField(inform.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inform.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inform.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inform.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ic.mutation.AlarmName(); ok {
		_spec.SetField(inform.FieldAlarmName, field.TypeString, value)
		_node.AlarmName = value
	}
	if value, ok := ic.mutation.AlarmType(); ok {
		_spec.SetField(inform.FieldAlarmType, field.TypeString, value)
		_node.AlarmType = value
	}
	if value, ok := ic.mutation.SignName(); ok {
		_spec.SetField(inform.FieldSignName, field.TypeString, value)
		_node.SignName = value
	}
	if value, ok := ic.mutation.NotifyTemplate(); ok {
		_spec.SetField(inform.FieldNotifyTemplate, field.TypeString, value)
		_node.NotifyTemplate = value
	}
	if value, ok := ic.mutation.TemplateCode(); ok {
		_spec.SetField(inform.FieldTemplateCode, field.TypeString, value)
		_node.TemplateCode = value
	}
	if value, ok := ic.mutation.PhoneNumbers(); ok {
		_spec.SetField(inform.FieldPhoneNumbers, field.TypeString, value)
		_node.PhoneNumbers = value
	}
	if value, ok := ic.mutation.NotifySwitch(); ok {
		_spec.SetField(inform.FieldNotifySwitch, field.TypeString, value)
		_node.NotifySwitch = value
	}
	if value, ok := ic.mutation.TaskName(); ok {
		_spec.SetField(inform.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := ic.mutation.TaskID(); ok {
		_spec.SetField(inform.FieldTaskID, field.TypeUint64, value)
		_node.TaskID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inform.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InformUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ic *InformCreate) OnConflict(opts ...sql.ConflictOption) *InformUpsertOne {
	ic.conflict = opts
	return &InformUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InformCreate) OnConflictColumns(columns ...string) *InformUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InformUpsertOne{
		create: ic,
	}
}

type (
	// InformUpsertOne is the builder for "upsert"-ing
	//  one Inform node.
	InformUpsertOne struct {
		create *InformCreate
	}

	// InformUpsert is the "OnConflict" setter.
	InformUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *InformUpsert) SetTenantID(v string) *InformUpsert {
	u.Set(inform.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InformUpsert) UpdateTenantID() *InformUpsert {
	u.SetExcluded(inform.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *InformUpsert) ClearTenantID() *InformUpsert {
	u.SetNull(inform.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *InformUpsert) SetAccessOrgList(v string) *InformUpsert {
	u.Set(inform.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *InformUpsert) UpdateAccessOrgList() *InformUpsert {
	u.SetExcluded(inform.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *InformUpsert) ClearAccessOrgList() *InformUpsert {
	u.SetNull(inform.FieldAccessOrgList)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *InformUpsert) SetCreatedAt(v time.Time) *InformUpsert {
	u.Set(inform.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InformUpsert) UpdateCreatedAt() *InformUpsert {
	u.SetExcluded(inform.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *InformUpsert) ClearCreatedAt() *InformUpsert {
	u.SetNull(inform.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InformUpsert) SetUpdatedAt(v time.Time) *InformUpsert {
	u.Set(inform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InformUpsert) UpdateUpdatedAt() *InformUpsert {
	u.SetExcluded(inform.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *InformUpsert) ClearUpdatedAt() *InformUpsert {
	u.SetNull(inform.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InformUpsert) SetDeletedAt(v time.Time) *InformUpsert {
	u.Set(inform.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InformUpsert) UpdateDeletedAt() *InformUpsert {
	u.SetExcluded(inform.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InformUpsert) ClearDeletedAt() *InformUpsert {
	u.SetNull(inform.FieldDeletedAt)
	return u
}

// SetAlarmName sets the "alarm_name" field.
func (u *InformUpsert) SetAlarmName(v string) *InformUpsert {
	u.Set(inform.FieldAlarmName, v)
	return u
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *InformUpsert) UpdateAlarmName() *InformUpsert {
	u.SetExcluded(inform.FieldAlarmName)
	return u
}

// SetAlarmType sets the "alarm_type" field.
func (u *InformUpsert) SetAlarmType(v string) *InformUpsert {
	u.Set(inform.FieldAlarmType, v)
	return u
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *InformUpsert) UpdateAlarmType() *InformUpsert {
	u.SetExcluded(inform.FieldAlarmType)
	return u
}

// SetSignName sets the "sign_name" field.
func (u *InformUpsert) SetSignName(v string) *InformUpsert {
	u.Set(inform.FieldSignName, v)
	return u
}

// UpdateSignName sets the "sign_name" field to the value that was provided on create.
func (u *InformUpsert) UpdateSignName() *InformUpsert {
	u.SetExcluded(inform.FieldSignName)
	return u
}

// SetNotifyTemplate sets the "notify_template" field.
func (u *InformUpsert) SetNotifyTemplate(v string) *InformUpsert {
	u.Set(inform.FieldNotifyTemplate, v)
	return u
}

// UpdateNotifyTemplate sets the "notify_template" field to the value that was provided on create.
func (u *InformUpsert) UpdateNotifyTemplate() *InformUpsert {
	u.SetExcluded(inform.FieldNotifyTemplate)
	return u
}

// SetTemplateCode sets the "template_code" field.
func (u *InformUpsert) SetTemplateCode(v string) *InformUpsert {
	u.Set(inform.FieldTemplateCode, v)
	return u
}

// UpdateTemplateCode sets the "template_code" field to the value that was provided on create.
func (u *InformUpsert) UpdateTemplateCode() *InformUpsert {
	u.SetExcluded(inform.FieldTemplateCode)
	return u
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (u *InformUpsert) SetPhoneNumbers(v string) *InformUpsert {
	u.Set(inform.FieldPhoneNumbers, v)
	return u
}

// UpdatePhoneNumbers sets the "phone_numbers" field to the value that was provided on create.
func (u *InformUpsert) UpdatePhoneNumbers() *InformUpsert {
	u.SetExcluded(inform.FieldPhoneNumbers)
	return u
}

// SetNotifySwitch sets the "notify_switch" field.
func (u *InformUpsert) SetNotifySwitch(v string) *InformUpsert {
	u.Set(inform.FieldNotifySwitch, v)
	return u
}

// UpdateNotifySwitch sets the "notify_switch" field to the value that was provided on create.
func (u *InformUpsert) UpdateNotifySwitch() *InformUpsert {
	u.SetExcluded(inform.FieldNotifySwitch)
	return u
}

// SetTaskName sets the "task_name" field.
func (u *InformUpsert) SetTaskName(v string) *InformUpsert {
	u.Set(inform.FieldTaskName, v)
	return u
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *InformUpsert) UpdateTaskName() *InformUpsert {
	u.SetExcluded(inform.FieldTaskName)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *InformUpsert) SetTaskID(v uint64) *InformUpsert {
	u.Set(inform.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *InformUpsert) UpdateTaskID() *InformUpsert {
	u.SetExcluded(inform.FieldTaskID)
	return u
}

// AddTaskID adds v to the "task_id" field.
func (u *InformUpsert) AddTaskID(v uint64) *InformUpsert {
	u.Add(inform.FieldTaskID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Inform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InformUpsertOne) UpdateNewValues() *InformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inform.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inform.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InformUpsertOne) Ignore() *InformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InformUpsertOne) DoNothing() *InformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InformCreate.OnConflict
// documentation for more info.
func (u *InformUpsertOne) Update(set func(*InformUpsert)) *InformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InformUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *InformUpsertOne) SetTenantID(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateTenantID() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *InformUpsertOne) ClearTenantID() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *InformUpsertOne) SetAccessOrgList(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateAccessOrgList() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *InformUpsertOne) ClearAccessOrgList() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *InformUpsertOne) SetCreatedAt(v time.Time) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateCreatedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *InformUpsertOne) ClearCreatedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InformUpsertOne) SetUpdatedAt(v time.Time) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateUpdatedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *InformUpsertOne) ClearUpdatedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InformUpsertOne) SetDeletedAt(v time.Time) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateDeletedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InformUpsertOne) ClearDeletedAt() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *InformUpsertOne) SetAlarmName(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateAlarmName() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAlarmName()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *InformUpsertOne) SetAlarmType(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateAlarmType() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAlarmType()
	})
}

// SetSignName sets the "sign_name" field.
func (u *InformUpsertOne) SetSignName(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetSignName(v)
	})
}

// UpdateSignName sets the "sign_name" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateSignName() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateSignName()
	})
}

// SetNotifyTemplate sets the "notify_template" field.
func (u *InformUpsertOne) SetNotifyTemplate(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetNotifyTemplate(v)
	})
}

// UpdateNotifyTemplate sets the "notify_template" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateNotifyTemplate() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateNotifyTemplate()
	})
}

// SetTemplateCode sets the "template_code" field.
func (u *InformUpsertOne) SetTemplateCode(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetTemplateCode(v)
	})
}

// UpdateTemplateCode sets the "template_code" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateTemplateCode() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTemplateCode()
	})
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (u *InformUpsertOne) SetPhoneNumbers(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetPhoneNumbers(v)
	})
}

// UpdatePhoneNumbers sets the "phone_numbers" field to the value that was provided on create.
func (u *InformUpsertOne) UpdatePhoneNumbers() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdatePhoneNumbers()
	})
}

// SetNotifySwitch sets the "notify_switch" field.
func (u *InformUpsertOne) SetNotifySwitch(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetNotifySwitch(v)
	})
}

// UpdateNotifySwitch sets the "notify_switch" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateNotifySwitch() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateNotifySwitch()
	})
}

// SetTaskName sets the "task_name" field.
func (u *InformUpsertOne) SetTaskName(v string) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateTaskName() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTaskName()
	})
}

// SetTaskID sets the "task_id" field.
func (u *InformUpsertOne) SetTaskID(v uint64) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *InformUpsertOne) AddTaskID(v uint64) *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *InformUpsertOne) UpdateTaskID() *InformUpsertOne {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTaskID()
	})
}

// Exec executes the query.
func (u *InformUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InformCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InformUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InformUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InformUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InformCreateBulk is the builder for creating many Inform entities in bulk.
type InformCreateBulk struct {
	config
	err      error
	builders []*InformCreate
	conflict []sql.ConflictOption
}

// Save creates the Inform entities in the database.
func (icb *InformCreateBulk) Save(ctx context.Context) ([]*Inform, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inform, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InformMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InformCreateBulk) SaveX(ctx context.Context) []*Inform {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InformCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InformCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inform.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InformUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (icb *InformCreateBulk) OnConflict(opts ...sql.ConflictOption) *InformUpsertBulk {
	icb.conflict = opts
	return &InformUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InformCreateBulk) OnConflictColumns(columns ...string) *InformUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InformUpsertBulk{
		create: icb,
	}
}

// InformUpsertBulk is the builder for "upsert"-ing
// a bulk of Inform nodes.
type InformUpsertBulk struct {
	create *InformCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InformUpsertBulk) UpdateNewValues() *InformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inform.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inform.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InformUpsertBulk) Ignore() *InformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InformUpsertBulk) DoNothing() *InformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InformCreateBulk.OnConflict
// documentation for more info.
func (u *InformUpsertBulk) Update(set func(*InformUpsert)) *InformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InformUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *InformUpsertBulk) SetTenantID(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateTenantID() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *InformUpsertBulk) ClearTenantID() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *InformUpsertBulk) SetAccessOrgList(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateAccessOrgList() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *InformUpsertBulk) ClearAccessOrgList() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *InformUpsertBulk) SetCreatedAt(v time.Time) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateCreatedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *InformUpsertBulk) ClearCreatedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InformUpsertBulk) SetUpdatedAt(v time.Time) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateUpdatedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *InformUpsertBulk) ClearUpdatedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InformUpsertBulk) SetDeletedAt(v time.Time) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateDeletedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InformUpsertBulk) ClearDeletedAt() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *InformUpsertBulk) SetAlarmName(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateAlarmName() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAlarmName()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *InformUpsertBulk) SetAlarmType(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateAlarmType() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateAlarmType()
	})
}

// SetSignName sets the "sign_name" field.
func (u *InformUpsertBulk) SetSignName(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetSignName(v)
	})
}

// UpdateSignName sets the "sign_name" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateSignName() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateSignName()
	})
}

// SetNotifyTemplate sets the "notify_template" field.
func (u *InformUpsertBulk) SetNotifyTemplate(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetNotifyTemplate(v)
	})
}

// UpdateNotifyTemplate sets the "notify_template" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateNotifyTemplate() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateNotifyTemplate()
	})
}

// SetTemplateCode sets the "template_code" field.
func (u *InformUpsertBulk) SetTemplateCode(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetTemplateCode(v)
	})
}

// UpdateTemplateCode sets the "template_code" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateTemplateCode() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTemplateCode()
	})
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (u *InformUpsertBulk) SetPhoneNumbers(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetPhoneNumbers(v)
	})
}

// UpdatePhoneNumbers sets the "phone_numbers" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdatePhoneNumbers() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdatePhoneNumbers()
	})
}

// SetNotifySwitch sets the "notify_switch" field.
func (u *InformUpsertBulk) SetNotifySwitch(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetNotifySwitch(v)
	})
}

// UpdateNotifySwitch sets the "notify_switch" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateNotifySwitch() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateNotifySwitch()
	})
}

// SetTaskName sets the "task_name" field.
func (u *InformUpsertBulk) SetTaskName(v string) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateTaskName() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTaskName()
	})
}

// SetTaskID sets the "task_id" field.
func (u *InformUpsertBulk) SetTaskID(v uint64) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *InformUpsertBulk) AddTaskID(v uint64) *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *InformUpsertBulk) UpdateTaskID() *InformUpsertBulk {
	return u.Update(func(s *InformUpsert) {
		s.UpdateTaskID()
	})
}

// Exec executes the query.
func (u *InformUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InformCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InformCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InformUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
