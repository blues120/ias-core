{{/* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "template" }}
{{/* ... */}}
{{ end }}

{{ define "setvalue" }}

{{/* Add the base header for the generated file */}}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

{{ range $n := $.Nodes }}
{{ $creater := $n.CreateName }}
{{ $createReceiver := receiver $creater }}

func ({{ $createReceiver }} *{{ $creater }}) Set{{ $n.Name }}(input *{{ $n.Name }}) *{{ $creater }} {
{{- range $f := $n.Fields }}
{{- if and (ne $f.StructField "DeletedAt") (ne $f.StructField "CreatedAt") (ne $f.StructField "UpdatedAt")}}
{{- $setter := print "Set" $f.StructField }}
{{ $createReceiver }}.{{ $setter }}(input.{{ $f.StructField }})
{{- end}}
{{- end }}
return {{ $createReceiver }}
}

{{- range $f := $n.Fields }}
{{- if eq $f.StructField "DeletedAt" }}
func ({{ $createReceiver }} *{{ $creater }}) SoftDelete() *{{ $creater }} {
{{- $setter := print "Set" $f.StructField }}
{{ $createReceiver }}.{{ $setter }}(time.Now())
return {{ $createReceiver }}
}
{{- end}}
{{- end }}

{{ $updater := $n.UpdateName }}
{{ $updateReceiver := receiver $updater }}

func ({{ $updateReceiver }} *{{ $updater }}) Set{{ $n.Name }}(input *{{ $n.Name }}) *{{ $updater }} {
{{- range $f := $n.Fields }}
{{- if and (not $f.Immutable) (ne $f.StructField "DeletedAt") (ne $f.StructField "CreatedAt") (ne $f.StructField "UpdatedAt")}}
{{- $setter := print "Set" $f.StructField }}
{{ $updateReceiver }}.{{ $setter }}(input.{{ $f.StructField }})
{{- end}}
{{- end }}
return {{ $updateReceiver }}
}

{{ $updateOner := $n.UpdateOneName }}
{{ $updateOneReceiver := receiver $updateOner }}

func ({{ $updateOneReceiver }} *{{ $updateOner }}) Set{{ $n.Name }}(input *{{ $n.Name }}) *{{ $updateOner }} {
{{- range $f := $n.Fields }}
{{- if and (not $f.Immutable) (ne $f.StructField "DeletedAt") (ne $f.StructField "CreatedAt") (ne $f.StructField "UpdatedAt")}}
{{- $setter := print "Set" $f.StructField }}
{{ $updateOneReceiver }}.{{ $setter }}(input.{{ $f.StructField }})
{{- end}}
{{- end }}
return {{ $updateOneReceiver }}
}

{{ $querier := $n.QueryName }}
{{ $queryReceiver := receiver $querier }}
{{- range $f := $n.Fields }}
{{- if eq $f.StructField "DeletedAt"}}
func ({{ $queryReceiver }} *{{ $querier }}) SoftDelete() *{{ $querier }} {
{{- $setter := print  $f.StructField "IsNil"}}
return {{ $queryReceiver }}.Where({{$n.Package}}.{{ $setter }}())
}
{{- end}}
{{- end }}

{{ end }}
{{ end }}