// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/eventsubscription"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// EventSubscriptionUpdate is the builder for updating EventSubscription entities.
type EventSubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *EventSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventSubscriptionUpdate builder.
func (esu *EventSubscriptionUpdate) Where(ps ...predicate.EventSubscription) *EventSubscriptionUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *EventSubscriptionUpdate) SetUpdatedAt(t time.Time) *EventSubscriptionUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *EventSubscriptionUpdate) SetDeletedAt(t time.Time) *EventSubscriptionUpdate {
	esu.mutation.SetDeletedAt(t)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableDeletedAt(t *time.Time) *EventSubscriptionUpdate {
	if t != nil {
		esu.SetDeletedAt(*t)
	}
	return esu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esu *EventSubscriptionUpdate) ClearDeletedAt() *EventSubscriptionUpdate {
	esu.mutation.ClearDeletedAt()
	return esu
}

// SetBoxID sets the "box_id" field.
func (esu *EventSubscriptionUpdate) SetBoxID(s string) *EventSubscriptionUpdate {
	esu.mutation.SetBoxID(s)
	return esu
}

// SetNillableBoxID sets the "box_id" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableBoxID(s *string) *EventSubscriptionUpdate {
	if s != nil {
		esu.SetBoxID(*s)
	}
	return esu
}

// SetChannelID sets the "channel_id" field.
func (esu *EventSubscriptionUpdate) SetChannelID(s string) *EventSubscriptionUpdate {
	esu.mutation.SetChannelID(s)
	return esu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableChannelID(s *string) *EventSubscriptionUpdate {
	if s != nil {
		esu.SetChannelID(*s)
	}
	return esu
}

// SetCallback sets the "callback" field.
func (esu *EventSubscriptionUpdate) SetCallback(s string) *EventSubscriptionUpdate {
	esu.mutation.SetCallback(s)
	return esu
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableCallback(s *string) *EventSubscriptionUpdate {
	if s != nil {
		esu.SetCallback(*s)
	}
	return esu
}

// SetTemplateID sets the "template_id" field.
func (esu *EventSubscriptionUpdate) SetTemplateID(s string) *EventSubscriptionUpdate {
	esu.mutation.SetTemplateID(s)
	return esu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableTemplateID(s *string) *EventSubscriptionUpdate {
	if s != nil {
		esu.SetTemplateID(*s)
	}
	return esu
}

// SetStatus sets the "status" field.
func (esu *EventSubscriptionUpdate) SetStatus(bss biz.EventSubStatus) *EventSubscriptionUpdate {
	esu.mutation.SetStatus(bss)
	return esu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esu *EventSubscriptionUpdate) SetNillableStatus(bss *biz.EventSubStatus) *EventSubscriptionUpdate {
	if bss != nil {
		esu.SetStatus(*bss)
	}
	return esu
}

// Mutation returns the EventSubscriptionMutation object of the builder.
func (esu *EventSubscriptionUpdate) Mutation() *EventSubscriptionMutation {
	return esu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EventSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	if err := esu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EventSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EventSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EventSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *EventSubscriptionUpdate) defaults() error {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		if eventsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized eventsubscription.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := eventsubscription.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esu *EventSubscriptionUpdate) check() error {
	if v, ok := esu.mutation.Status(); ok {
		if err := eventsubscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EventSubscription.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esu *EventSubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventSubscriptionUpdate {
	esu.modifiers = append(esu.modifiers, modifiers...)
	return esu
}

func (esu *EventSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := esu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventsubscription.Table, eventsubscription.Columns, sqlgraph.NewFieldSpec(eventsubscription.FieldID, field.TypeUint64))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.SetField(eventsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.SetField(eventsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if esu.mutation.DeletedAtCleared() {
		_spec.ClearField(eventsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.BoxID(); ok {
		_spec.SetField(eventsubscription.FieldBoxID, field.TypeString, value)
	}
	if value, ok := esu.mutation.ChannelID(); ok {
		_spec.SetField(eventsubscription.FieldChannelID, field.TypeString, value)
	}
	if value, ok := esu.mutation.Callback(); ok {
		_spec.SetField(eventsubscription.FieldCallback, field.TypeString, value)
	}
	if value, ok := esu.mutation.TemplateID(); ok {
		_spec.SetField(eventsubscription.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := esu.mutation.Status(); ok {
		_spec.SetField(eventsubscription.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(esu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// EventSubscriptionUpdateOne is the builder for updating a single EventSubscription entity.
type EventSubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *EventSubscriptionUpdateOne) SetUpdatedAt(t time.Time) *EventSubscriptionUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *EventSubscriptionUpdateOne) SetDeletedAt(t time.Time) *EventSubscriptionUpdateOne {
	esuo.mutation.SetDeletedAt(t)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableDeletedAt(t *time.Time) *EventSubscriptionUpdateOne {
	if t != nil {
		esuo.SetDeletedAt(*t)
	}
	return esuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esuo *EventSubscriptionUpdateOne) ClearDeletedAt() *EventSubscriptionUpdateOne {
	esuo.mutation.ClearDeletedAt()
	return esuo
}

// SetBoxID sets the "box_id" field.
func (esuo *EventSubscriptionUpdateOne) SetBoxID(s string) *EventSubscriptionUpdateOne {
	esuo.mutation.SetBoxID(s)
	return esuo
}

// SetNillableBoxID sets the "box_id" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableBoxID(s *string) *EventSubscriptionUpdateOne {
	if s != nil {
		esuo.SetBoxID(*s)
	}
	return esuo
}

// SetChannelID sets the "channel_id" field.
func (esuo *EventSubscriptionUpdateOne) SetChannelID(s string) *EventSubscriptionUpdateOne {
	esuo.mutation.SetChannelID(s)
	return esuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableChannelID(s *string) *EventSubscriptionUpdateOne {
	if s != nil {
		esuo.SetChannelID(*s)
	}
	return esuo
}

// SetCallback sets the "callback" field.
func (esuo *EventSubscriptionUpdateOne) SetCallback(s string) *EventSubscriptionUpdateOne {
	esuo.mutation.SetCallback(s)
	return esuo
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableCallback(s *string) *EventSubscriptionUpdateOne {
	if s != nil {
		esuo.SetCallback(*s)
	}
	return esuo
}

// SetTemplateID sets the "template_id" field.
func (esuo *EventSubscriptionUpdateOne) SetTemplateID(s string) *EventSubscriptionUpdateOne {
	esuo.mutation.SetTemplateID(s)
	return esuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableTemplateID(s *string) *EventSubscriptionUpdateOne {
	if s != nil {
		esuo.SetTemplateID(*s)
	}
	return esuo
}

// SetStatus sets the "status" field.
func (esuo *EventSubscriptionUpdateOne) SetStatus(bss biz.EventSubStatus) *EventSubscriptionUpdateOne {
	esuo.mutation.SetStatus(bss)
	return esuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esuo *EventSubscriptionUpdateOne) SetNillableStatus(bss *biz.EventSubStatus) *EventSubscriptionUpdateOne {
	if bss != nil {
		esuo.SetStatus(*bss)
	}
	return esuo
}

// Mutation returns the EventSubscriptionMutation object of the builder.
func (esuo *EventSubscriptionUpdateOne) Mutation() *EventSubscriptionMutation {
	return esuo.mutation
}

// Where appends a list predicates to the EventSubscriptionUpdate builder.
func (esuo *EventSubscriptionUpdateOne) Where(ps ...predicate.EventSubscription) *EventSubscriptionUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EventSubscriptionUpdateOne) Select(field string, fields ...string) *EventSubscriptionUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EventSubscription entity.
func (esuo *EventSubscriptionUpdateOne) Save(ctx context.Context) (*EventSubscription, error) {
	if err := esuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EventSubscriptionUpdateOne) SaveX(ctx context.Context) *EventSubscription {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EventSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EventSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *EventSubscriptionUpdateOne) defaults() error {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		if eventsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized eventsubscription.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := eventsubscription.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esuo *EventSubscriptionUpdateOne) check() error {
	if v, ok := esuo.mutation.Status(); ok {
		if err := eventsubscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EventSubscription.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esuo *EventSubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventSubscriptionUpdateOne {
	esuo.modifiers = append(esuo.modifiers, modifiers...)
	return esuo
}

func (esuo *EventSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *EventSubscription, err error) {
	if err := esuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventsubscription.Table, eventsubscription.Columns, sqlgraph.NewFieldSpec(eventsubscription.FieldID, field.TypeUint64))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventsubscription.FieldID)
		for _, f := range fields {
			if !eventsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.SetField(eventsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.SetField(eventsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if esuo.mutation.DeletedAtCleared() {
		_spec.ClearField(eventsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.BoxID(); ok {
		_spec.SetField(eventsubscription.FieldBoxID, field.TypeString, value)
	}
	if value, ok := esuo.mutation.ChannelID(); ok {
		_spec.SetField(eventsubscription.FieldChannelID, field.TypeString, value)
	}
	if value, ok := esuo.mutation.Callback(); ok {
		_spec.SetField(eventsubscription.FieldCallback, field.TypeString, value)
	}
	if value, ok := esuo.mutation.TemplateID(); ok {
		_spec.SetField(eventsubscription.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := esuo.mutation.Status(); ok {
		_spec.SetField(eventsubscription.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(esuo.modifiers...)
	_node = &EventSubscription{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
