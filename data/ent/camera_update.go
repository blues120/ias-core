// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz/streaming"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicecamera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/taskcamera"
)

// CameraUpdate is the builder for updating Camera entities.
type CameraUpdate struct {
	config
	hooks     []Hook
	mutation  *CameraMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CameraUpdate builder.
func (cu *CameraUpdate) Where(ps ...predicate.Camera) *CameraUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CameraUpdate) SetUpdatedAt(t time.Time) *CameraUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CameraUpdate) SetDeletedAt(t time.Time) *CameraUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableDeletedAt(t *time.Time) *CameraUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CameraUpdate) ClearDeletedAt() *CameraUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *CameraUpdate) SetTenantID(s string) *CameraUpdate {
	cu.mutation.SetTenantID(s)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableTenantID(s *string) *CameraUpdate {
	if s != nil {
		cu.SetTenantID(*s)
	}
	return cu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (cu *CameraUpdate) ClearTenantID() *CameraUpdate {
	cu.mutation.ClearTenantID()
	return cu
}

// SetAccessOrgList sets the "access_org_list" field.
func (cu *CameraUpdate) SetAccessOrgList(s string) *CameraUpdate {
	cu.mutation.SetAccessOrgList(s)
	return cu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableAccessOrgList(s *string) *CameraUpdate {
	if s != nil {
		cu.SetAccessOrgList(*s)
	}
	return cu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (cu *CameraUpdate) ClearAccessOrgList() *CameraUpdate {
	cu.mutation.ClearAccessOrgList()
	return cu
}

// SetName sets the "name" field.
func (cu *CameraUpdate) SetName(s string) *CameraUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableName(s *string) *CameraUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetPosition sets the "position" field.
func (cu *CameraUpdate) SetPosition(s string) *CameraUpdate {
	cu.mutation.SetPosition(s)
	return cu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (cu *CameraUpdate) SetNillablePosition(s *string) *CameraUpdate {
	if s != nil {
		cu.SetPosition(*s)
	}
	return cu
}

// SetRegion sets the "region" field.
func (cu *CameraUpdate) SetRegion(s string) *CameraUpdate {
	cu.mutation.SetRegion(s)
	return cu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableRegion(s *string) *CameraUpdate {
	if s != nil {
		cu.SetRegion(*s)
	}
	return cu
}

// ClearRegion clears the value of the "region" field.
func (cu *CameraUpdate) ClearRegion() *CameraUpdate {
	cu.mutation.ClearRegion()
	return cu
}

// SetRegionStr sets the "region_str" field.
func (cu *CameraUpdate) SetRegionStr(s string) *CameraUpdate {
	cu.mutation.SetRegionStr(s)
	return cu
}

// SetNillableRegionStr sets the "region_str" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableRegionStr(s *string) *CameraUpdate {
	if s != nil {
		cu.SetRegionStr(*s)
	}
	return cu
}

// ClearRegionStr clears the value of the "region_str" field.
func (cu *CameraUpdate) ClearRegionStr() *CameraUpdate {
	cu.mutation.ClearRegionStr()
	return cu
}

// SetLongitude sets the "longitude" field.
func (cu *CameraUpdate) SetLongitude(f float64) *CameraUpdate {
	cu.mutation.ResetLongitude()
	cu.mutation.SetLongitude(f)
	return cu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableLongitude(f *float64) *CameraUpdate {
	if f != nil {
		cu.SetLongitude(*f)
	}
	return cu
}

// AddLongitude adds f to the "longitude" field.
func (cu *CameraUpdate) AddLongitude(f float64) *CameraUpdate {
	cu.mutation.AddLongitude(f)
	return cu
}

// SetLatitude sets the "latitude" field.
func (cu *CameraUpdate) SetLatitude(f float64) *CameraUpdate {
	cu.mutation.ResetLatitude()
	cu.mutation.SetLatitude(f)
	return cu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableLatitude(f *float64) *CameraUpdate {
	if f != nil {
		cu.SetLatitude(*f)
	}
	return cu
}

// AddLatitude adds f to the "latitude" field.
func (cu *CameraUpdate) AddLatitude(f float64) *CameraUpdate {
	cu.mutation.AddLatitude(f)
	return cu
}

// SetCustomNumber sets the "custom_number" field.
func (cu *CameraUpdate) SetCustomNumber(i int) *CameraUpdate {
	cu.mutation.ResetCustomNumber()
	cu.mutation.SetCustomNumber(i)
	return cu
}

// SetNillableCustomNumber sets the "custom_number" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableCustomNumber(i *int) *CameraUpdate {
	if i != nil {
		cu.SetCustomNumber(*i)
	}
	return cu
}

// AddCustomNumber adds i to the "custom_number" field.
func (cu *CameraUpdate) AddCustomNumber(i int) *CameraUpdate {
	cu.mutation.AddCustomNumber(i)
	return cu
}

// SetChannelID sets the "channel_id" field.
func (cu *CameraUpdate) SetChannelID(s string) *CameraUpdate {
	cu.mutation.SetChannelID(s)
	return cu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableChannelID(s *string) *CameraUpdate {
	if s != nil {
		cu.SetChannelID(*s)
	}
	return cu
}

// SetSerialNumber sets the "serial_number" field.
func (cu *CameraUpdate) SetSerialNumber(s string) *CameraUpdate {
	cu.mutation.SetSerialNumber(s)
	return cu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSerialNumber(s *string) *CameraUpdate {
	if s != nil {
		cu.SetSerialNumber(*s)
	}
	return cu
}

// SetPoleNumber sets the "pole_number" field.
func (cu *CameraUpdate) SetPoleNumber(s string) *CameraUpdate {
	cu.mutation.SetPoleNumber(s)
	return cu
}

// SetNillablePoleNumber sets the "pole_number" field if the given value is not nil.
func (cu *CameraUpdate) SetNillablePoleNumber(s *string) *CameraUpdate {
	if s != nil {
		cu.SetPoleNumber(*s)
	}
	return cu
}

// SetDeviceDescription sets the "device_description" field.
func (cu *CameraUpdate) SetDeviceDescription(s string) *CameraUpdate {
	cu.mutation.SetDeviceDescription(s)
	return cu
}

// SetNillableDeviceDescription sets the "device_description" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableDeviceDescription(s *string) *CameraUpdate {
	if s != nil {
		cu.SetDeviceDescription(*s)
	}
	return cu
}

// SetScene sets the "scene" field.
func (cu *CameraUpdate) SetScene(s string) *CameraUpdate {
	cu.mutation.SetScene(s)
	return cu
}

// SetNillableScene sets the "scene" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableScene(s *string) *CameraUpdate {
	if s != nil {
		cu.SetScene(*s)
	}
	return cu
}

// SetPlace sets the "place" field.
func (cu *CameraUpdate) SetPlace(s string) *CameraUpdate {
	cu.mutation.SetPlace(s)
	return cu
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (cu *CameraUpdate) SetNillablePlace(s *string) *CameraUpdate {
	if s != nil {
		cu.SetPlace(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CameraUpdate) SetStatus(bs biz.CameraStatus) *CameraUpdate {
	cu.mutation.SetStatus(bs)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableStatus(bs *biz.CameraStatus) *CameraUpdate {
	if bs != nil {
		cu.SetStatus(*bs)
	}
	return cu
}

// SetSpType sets the "sp_type" field.
func (cu *CameraUpdate) SetSpType(st streaming.ProtocolType) *CameraUpdate {
	cu.mutation.SetSpType(st)
	return cu
}

// SetNillableSpType sets the "sp_type" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSpType(st *streaming.ProtocolType) *CameraUpdate {
	if st != nil {
		cu.SetSpType(*st)
	}
	return cu
}

// SetSpSource sets the "sp_source" field.
func (cu *CameraUpdate) SetSpSource(s string) *CameraUpdate {
	cu.mutation.SetSpSource(s)
	return cu
}

// SetNillableSpSource sets the "sp_source" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSpSource(s *string) *CameraUpdate {
	if s != nil {
		cu.SetSpSource(*s)
	}
	return cu
}

// SetSpCodecName sets the "sp_codec_name" field.
func (cu *CameraUpdate) SetSpCodecName(s string) *CameraUpdate {
	cu.mutation.SetSpCodecName(s)
	return cu
}

// SetNillableSpCodecName sets the "sp_codec_name" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSpCodecName(s *string) *CameraUpdate {
	if s != nil {
		cu.SetSpCodecName(*s)
	}
	return cu
}

// SetSpWidth sets the "sp_width" field.
func (cu *CameraUpdate) SetSpWidth(i int32) *CameraUpdate {
	cu.mutation.ResetSpWidth()
	cu.mutation.SetSpWidth(i)
	return cu
}

// SetNillableSpWidth sets the "sp_width" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSpWidth(i *int32) *CameraUpdate {
	if i != nil {
		cu.SetSpWidth(*i)
	}
	return cu
}

// AddSpWidth adds i to the "sp_width" field.
func (cu *CameraUpdate) AddSpWidth(i int32) *CameraUpdate {
	cu.mutation.AddSpWidth(i)
	return cu
}

// SetSpHeight sets the "sp_height" field.
func (cu *CameraUpdate) SetSpHeight(i int32) *CameraUpdate {
	cu.mutation.ResetSpHeight()
	cu.mutation.SetSpHeight(i)
	return cu
}

// SetNillableSpHeight sets the "sp_height" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSpHeight(i *int32) *CameraUpdate {
	if i != nil {
		cu.SetSpHeight(*i)
	}
	return cu
}

// AddSpHeight adds i to the "sp_height" field.
func (cu *CameraUpdate) AddSpHeight(i int32) *CameraUpdate {
	cu.mutation.AddSpHeight(i)
	return cu
}

// SetTransType sets the "trans_type" field.
func (cu *CameraUpdate) SetTransType(s string) *CameraUpdate {
	cu.mutation.SetTransType(s)
	return cu
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableTransType(s *string) *CameraUpdate {
	if s != nil {
		cu.SetTransType(*s)
	}
	return cu
}

// SetDeviceIP sets the "device_ip" field.
func (cu *CameraUpdate) SetDeviceIP(s string) *CameraUpdate {
	cu.mutation.SetDeviceIP(s)
	return cu
}

// SetNillableDeviceIP sets the "device_ip" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableDeviceIP(s *string) *CameraUpdate {
	if s != nil {
		cu.SetDeviceIP(*s)
	}
	return cu
}

// SetDevicePort sets the "device_port" field.
func (cu *CameraUpdate) SetDevicePort(i int32) *CameraUpdate {
	cu.mutation.ResetDevicePort()
	cu.mutation.SetDevicePort(i)
	return cu
}

// SetNillableDevicePort sets the "device_port" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableDevicePort(i *int32) *CameraUpdate {
	if i != nil {
		cu.SetDevicePort(*i)
	}
	return cu
}

// AddDevicePort adds i to the "device_port" field.
func (cu *CameraUpdate) AddDevicePort(i int32) *CameraUpdate {
	cu.mutation.AddDevicePort(i)
	return cu
}

// SetGBID sets the "gb_id" field.
func (cu *CameraUpdate) SetGBID(s string) *CameraUpdate {
	cu.mutation.SetGBID(s)
	return cu
}

// SetNillableGBID sets the "gb_id" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableGBID(s *string) *CameraUpdate {
	if s != nil {
		cu.SetGBID(*s)
	}
	return cu
}

// SetSipUser sets the "sip_user" field.
func (cu *CameraUpdate) SetSipUser(s string) *CameraUpdate {
	cu.mutation.SetSipUser(s)
	return cu
}

// SetNillableSipUser sets the "sip_user" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSipUser(s *string) *CameraUpdate {
	if s != nil {
		cu.SetSipUser(*s)
	}
	return cu
}

// SetSipPassword sets the "sip_password" field.
func (cu *CameraUpdate) SetSipPassword(s string) *CameraUpdate {
	cu.mutation.SetSipPassword(s)
	return cu
}

// SetNillableSipPassword sets the "sip_password" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableSipPassword(s *string) *CameraUpdate {
	if s != nil {
		cu.SetSipPassword(*s)
	}
	return cu
}

// SetGBChannelID sets the "gb_channel_id" field.
func (cu *CameraUpdate) SetGBChannelID(s string) *CameraUpdate {
	cu.mutation.SetGBChannelID(s)
	return cu
}

// SetNillableGBChannelID sets the "gb_channel_id" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableGBChannelID(s *string) *CameraUpdate {
	if s != nil {
		cu.SetGBChannelID(*s)
	}
	return cu
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (cu *CameraUpdate) SetUpGBChannelID(s string) *CameraUpdate {
	cu.mutation.SetUpGBChannelID(s)
	return cu
}

// SetNillableUpGBChannelID sets the "up_gb_channel_id" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableUpGBChannelID(s *string) *CameraUpdate {
	if s != nil {
		cu.SetUpGBChannelID(*s)
	}
	return cu
}

// SetGBDeviceType sets the "gb_device_type" field.
func (cu *CameraUpdate) SetGBDeviceType(s string) *CameraUpdate {
	cu.mutation.SetGBDeviceType(s)
	return cu
}

// SetNillableGBDeviceType sets the "gb_device_type" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableGBDeviceType(s *string) *CameraUpdate {
	if s != nil {
		cu.SetGBDeviceType(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CameraUpdate) SetType(bt biz.MediaType) *CameraUpdate {
	cu.mutation.SetType(bt)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableType(bt *biz.MediaType) *CameraUpdate {
	if bt != nil {
		cu.SetType(*bt)
	}
	return cu
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cu *CameraUpdate) AddTaskIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.AddTaskIDs(ids...)
	return cu
}

// AddTask adds the "task" edges to the Task entity.
func (cu *CameraUpdate) AddTask(t ...*Task) *CameraUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskIDs(ids...)
}

// AddDeviceIDs adds the "device" edge to the Device entity by IDs.
func (cu *CameraUpdate) AddDeviceIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.AddDeviceIDs(ids...)
	return cu
}

// AddDevice adds the "device" edges to the Device entity.
func (cu *CameraUpdate) AddDevice(d ...*Device) *CameraUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeviceIDs(ids...)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (cu *CameraUpdate) AddTaskCameraIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.AddTaskCameraIDs(ids...)
	return cu
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (cu *CameraUpdate) AddTaskCamera(t ...*TaskCamera) *CameraUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskCameraIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (cu *CameraUpdate) AddDeviceCameraIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.AddDeviceCameraIDs(ids...)
	return cu
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (cu *CameraUpdate) AddDeviceCamera(d ...*DeviceCamera) *CameraUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeviceCameraIDs(ids...)
}

// Mutation returns the CameraMutation object of the builder.
func (cu *CameraUpdate) Mutation() *CameraMutation {
	return cu.mutation
}

// ClearTask clears all "task" edges to the Task entity.
func (cu *CameraUpdate) ClearTask() *CameraUpdate {
	cu.mutation.ClearTask()
	return cu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cu *CameraUpdate) RemoveTaskIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.RemoveTaskIDs(ids...)
	return cu
}

// RemoveTask removes "task" edges to Task entities.
func (cu *CameraUpdate) RemoveTask(t ...*Task) *CameraUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskIDs(ids...)
}

// ClearDevice clears all "device" edges to the Device entity.
func (cu *CameraUpdate) ClearDevice() *CameraUpdate {
	cu.mutation.ClearDevice()
	return cu
}

// RemoveDeviceIDs removes the "device" edge to Device entities by IDs.
func (cu *CameraUpdate) RemoveDeviceIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.RemoveDeviceIDs(ids...)
	return cu
}

// RemoveDevice removes "device" edges to Device entities.
func (cu *CameraUpdate) RemoveDevice(d ...*Device) *CameraUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeviceIDs(ids...)
}

// ClearTaskCamera clears all "task_camera" edges to the TaskCamera entity.
func (cu *CameraUpdate) ClearTaskCamera() *CameraUpdate {
	cu.mutation.ClearTaskCamera()
	return cu
}

// RemoveTaskCameraIDs removes the "task_camera" edge to TaskCamera entities by IDs.
func (cu *CameraUpdate) RemoveTaskCameraIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.RemoveTaskCameraIDs(ids...)
	return cu
}

// RemoveTaskCamera removes "task_camera" edges to TaskCamera entities.
func (cu *CameraUpdate) RemoveTaskCamera(t ...*TaskCamera) *CameraUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskCameraIDs(ids...)
}

// ClearDeviceCamera clears all "device_camera" edges to the DeviceCamera entity.
func (cu *CameraUpdate) ClearDeviceCamera() *CameraUpdate {
	cu.mutation.ClearDeviceCamera()
	return cu
}

// RemoveDeviceCameraIDs removes the "device_camera" edge to DeviceCamera entities by IDs.
func (cu *CameraUpdate) RemoveDeviceCameraIDs(ids ...uint64) *CameraUpdate {
	cu.mutation.RemoveDeviceCameraIDs(ids...)
	return cu
}

// RemoveDeviceCamera removes "device_camera" edges to DeviceCamera entities.
func (cu *CameraUpdate) RemoveDeviceCamera(d ...*DeviceCamera) *CameraUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeviceCameraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CameraUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CameraUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CameraUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CameraUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CameraUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if camera.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized camera.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := camera.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CameraUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := camera.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Camera.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.SpType(); ok {
		if err := camera.SpTypeValidator(v); err != nil {
			return &ValidationError{Name: "sp_type", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.SpSource(); ok {
		if err := camera.SpSourceValidator(v); err != nil {
			return &ValidationError{Name: "sp_source", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_source": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := camera.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Camera.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CameraUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CameraUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CameraUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(camera.Table, camera.Columns, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(camera.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(camera.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.TenantID(); ok {
		_spec.SetField(camera.FieldTenantID, field.TypeString, value)
	}
	if cu.mutation.TenantIDCleared() {
		_spec.ClearField(camera.FieldTenantID, field.TypeString)
	}
	if value, ok := cu.mutation.AccessOrgList(); ok {
		_spec.SetField(camera.FieldAccessOrgList, field.TypeString, value)
	}
	if cu.mutation.AccessOrgListCleared() {
		_spec.ClearField(camera.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Position(); ok {
		_spec.SetField(camera.FieldPosition, field.TypeString, value)
	}
	if value, ok := cu.mutation.Region(); ok {
		_spec.SetField(camera.FieldRegion, field.TypeString, value)
	}
	if cu.mutation.RegionCleared() {
		_spec.ClearField(camera.FieldRegion, field.TypeString)
	}
	if value, ok := cu.mutation.RegionStr(); ok {
		_spec.SetField(camera.FieldRegionStr, field.TypeString, value)
	}
	if cu.mutation.RegionStrCleared() {
		_spec.ClearField(camera.FieldRegionStr, field.TypeString)
	}
	if value, ok := cu.mutation.Longitude(); ok {
		_spec.SetField(camera.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLongitude(); ok {
		_spec.AddField(camera.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Latitude(); ok {
		_spec.SetField(camera.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLatitude(); ok {
		_spec.AddField(camera.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.CustomNumber(); ok {
		_spec.SetField(camera.FieldCustomNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCustomNumber(); ok {
		_spec.AddField(camera.FieldCustomNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ChannelID(); ok {
		_spec.SetField(camera.FieldChannelID, field.TypeString, value)
	}
	if value, ok := cu.mutation.SerialNumber(); ok {
		_spec.SetField(camera.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.PoleNumber(); ok {
		_spec.SetField(camera.FieldPoleNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.DeviceDescription(); ok {
		_spec.SetField(camera.FieldDeviceDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Scene(); ok {
		_spec.SetField(camera.FieldScene, field.TypeString, value)
	}
	if value, ok := cu.mutation.Place(); ok {
		_spec.SetField(camera.FieldPlace, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(camera.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.SpType(); ok {
		_spec.SetField(camera.FieldSpType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.SpSource(); ok {
		_spec.SetField(camera.FieldSpSource, field.TypeString, value)
	}
	if value, ok := cu.mutation.SpCodecName(); ok {
		_spec.SetField(camera.FieldSpCodecName, field.TypeString, value)
	}
	if value, ok := cu.mutation.SpWidth(); ok {
		_spec.SetField(camera.FieldSpWidth, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedSpWidth(); ok {
		_spec.AddField(camera.FieldSpWidth, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.SpHeight(); ok {
		_spec.SetField(camera.FieldSpHeight, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedSpHeight(); ok {
		_spec.AddField(camera.FieldSpHeight, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.TransType(); ok {
		_spec.SetField(camera.FieldTransType, field.TypeString, value)
	}
	if value, ok := cu.mutation.DeviceIP(); ok {
		_spec.SetField(camera.FieldDeviceIP, field.TypeString, value)
	}
	if value, ok := cu.mutation.DevicePort(); ok {
		_spec.SetField(camera.FieldDevicePort, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedDevicePort(); ok {
		_spec.AddField(camera.FieldDevicePort, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.GBID(); ok {
		_spec.SetField(camera.FieldGBID, field.TypeString, value)
	}
	if value, ok := cu.mutation.SipUser(); ok {
		_spec.SetField(camera.FieldSipUser, field.TypeString, value)
	}
	if value, ok := cu.mutation.SipPassword(); ok {
		_spec.SetField(camera.FieldSipPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.GBChannelID(); ok {
		_spec.SetField(camera.FieldGBChannelID, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpGBChannelID(); ok {
		_spec.SetField(camera.FieldUpGBChannelID, field.TypeString, value)
	}
	if value, ok := cu.mutation.GBDeviceType(); ok {
		_spec.SetField(camera.FieldGBDeviceType, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(camera.FieldType, field.TypeEnum, value)
	}
	if cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		createE := &TaskCameraCreate{config: cu.config, mutation: newTaskCameraMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: cu.config, mutation: newTaskCameraMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: cu.config, mutation: newTaskCameraMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		createE := &DeviceCameraCreate{config: cu.config, mutation: newDeviceCameraMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeviceIDs(); len(nodes) > 0 && !cu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: cu.config, mutation: newDeviceCameraMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: cu.config, mutation: newDeviceCameraMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskCameraIDs(); len(nodes) > 0 && !cu.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeviceCameraIDs(); len(nodes) > 0 && !cu.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CameraUpdateOne is the builder for updating a single Camera entity.
type CameraUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CameraMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CameraUpdateOne) SetUpdatedAt(t time.Time) *CameraUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CameraUpdateOne) SetDeletedAt(t time.Time) *CameraUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableDeletedAt(t *time.Time) *CameraUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CameraUpdateOne) ClearDeletedAt() *CameraUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetTenantID sets the "tenant_id" field.
func (cuo *CameraUpdateOne) SetTenantID(s string) *CameraUpdateOne {
	cuo.mutation.SetTenantID(s)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableTenantID(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetTenantID(*s)
	}
	return cuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (cuo *CameraUpdateOne) ClearTenantID() *CameraUpdateOne {
	cuo.mutation.ClearTenantID()
	return cuo
}

// SetAccessOrgList sets the "access_org_list" field.
func (cuo *CameraUpdateOne) SetAccessOrgList(s string) *CameraUpdateOne {
	cuo.mutation.SetAccessOrgList(s)
	return cuo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableAccessOrgList(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetAccessOrgList(*s)
	}
	return cuo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (cuo *CameraUpdateOne) ClearAccessOrgList() *CameraUpdateOne {
	cuo.mutation.ClearAccessOrgList()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CameraUpdateOne) SetName(s string) *CameraUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableName(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetPosition sets the "position" field.
func (cuo *CameraUpdateOne) SetPosition(s string) *CameraUpdateOne {
	cuo.mutation.SetPosition(s)
	return cuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillablePosition(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetPosition(*s)
	}
	return cuo
}

// SetRegion sets the "region" field.
func (cuo *CameraUpdateOne) SetRegion(s string) *CameraUpdateOne {
	cuo.mutation.SetRegion(s)
	return cuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableRegion(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetRegion(*s)
	}
	return cuo
}

// ClearRegion clears the value of the "region" field.
func (cuo *CameraUpdateOne) ClearRegion() *CameraUpdateOne {
	cuo.mutation.ClearRegion()
	return cuo
}

// SetRegionStr sets the "region_str" field.
func (cuo *CameraUpdateOne) SetRegionStr(s string) *CameraUpdateOne {
	cuo.mutation.SetRegionStr(s)
	return cuo
}

// SetNillableRegionStr sets the "region_str" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableRegionStr(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetRegionStr(*s)
	}
	return cuo
}

// ClearRegionStr clears the value of the "region_str" field.
func (cuo *CameraUpdateOne) ClearRegionStr() *CameraUpdateOne {
	cuo.mutation.ClearRegionStr()
	return cuo
}

// SetLongitude sets the "longitude" field.
func (cuo *CameraUpdateOne) SetLongitude(f float64) *CameraUpdateOne {
	cuo.mutation.ResetLongitude()
	cuo.mutation.SetLongitude(f)
	return cuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableLongitude(f *float64) *CameraUpdateOne {
	if f != nil {
		cuo.SetLongitude(*f)
	}
	return cuo
}

// AddLongitude adds f to the "longitude" field.
func (cuo *CameraUpdateOne) AddLongitude(f float64) *CameraUpdateOne {
	cuo.mutation.AddLongitude(f)
	return cuo
}

// SetLatitude sets the "latitude" field.
func (cuo *CameraUpdateOne) SetLatitude(f float64) *CameraUpdateOne {
	cuo.mutation.ResetLatitude()
	cuo.mutation.SetLatitude(f)
	return cuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableLatitude(f *float64) *CameraUpdateOne {
	if f != nil {
		cuo.SetLatitude(*f)
	}
	return cuo
}

// AddLatitude adds f to the "latitude" field.
func (cuo *CameraUpdateOne) AddLatitude(f float64) *CameraUpdateOne {
	cuo.mutation.AddLatitude(f)
	return cuo
}

// SetCustomNumber sets the "custom_number" field.
func (cuo *CameraUpdateOne) SetCustomNumber(i int) *CameraUpdateOne {
	cuo.mutation.ResetCustomNumber()
	cuo.mutation.SetCustomNumber(i)
	return cuo
}

// SetNillableCustomNumber sets the "custom_number" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableCustomNumber(i *int) *CameraUpdateOne {
	if i != nil {
		cuo.SetCustomNumber(*i)
	}
	return cuo
}

// AddCustomNumber adds i to the "custom_number" field.
func (cuo *CameraUpdateOne) AddCustomNumber(i int) *CameraUpdateOne {
	cuo.mutation.AddCustomNumber(i)
	return cuo
}

// SetChannelID sets the "channel_id" field.
func (cuo *CameraUpdateOne) SetChannelID(s string) *CameraUpdateOne {
	cuo.mutation.SetChannelID(s)
	return cuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableChannelID(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetChannelID(*s)
	}
	return cuo
}

// SetSerialNumber sets the "serial_number" field.
func (cuo *CameraUpdateOne) SetSerialNumber(s string) *CameraUpdateOne {
	cuo.mutation.SetSerialNumber(s)
	return cuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSerialNumber(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetSerialNumber(*s)
	}
	return cuo
}

// SetPoleNumber sets the "pole_number" field.
func (cuo *CameraUpdateOne) SetPoleNumber(s string) *CameraUpdateOne {
	cuo.mutation.SetPoleNumber(s)
	return cuo
}

// SetNillablePoleNumber sets the "pole_number" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillablePoleNumber(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetPoleNumber(*s)
	}
	return cuo
}

// SetDeviceDescription sets the "device_description" field.
func (cuo *CameraUpdateOne) SetDeviceDescription(s string) *CameraUpdateOne {
	cuo.mutation.SetDeviceDescription(s)
	return cuo
}

// SetNillableDeviceDescription sets the "device_description" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableDeviceDescription(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetDeviceDescription(*s)
	}
	return cuo
}

// SetScene sets the "scene" field.
func (cuo *CameraUpdateOne) SetScene(s string) *CameraUpdateOne {
	cuo.mutation.SetScene(s)
	return cuo
}

// SetNillableScene sets the "scene" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableScene(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetScene(*s)
	}
	return cuo
}

// SetPlace sets the "place" field.
func (cuo *CameraUpdateOne) SetPlace(s string) *CameraUpdateOne {
	cuo.mutation.SetPlace(s)
	return cuo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillablePlace(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetPlace(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CameraUpdateOne) SetStatus(bs biz.CameraStatus) *CameraUpdateOne {
	cuo.mutation.SetStatus(bs)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableStatus(bs *biz.CameraStatus) *CameraUpdateOne {
	if bs != nil {
		cuo.SetStatus(*bs)
	}
	return cuo
}

// SetSpType sets the "sp_type" field.
func (cuo *CameraUpdateOne) SetSpType(st streaming.ProtocolType) *CameraUpdateOne {
	cuo.mutation.SetSpType(st)
	return cuo
}

// SetNillableSpType sets the "sp_type" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSpType(st *streaming.ProtocolType) *CameraUpdateOne {
	if st != nil {
		cuo.SetSpType(*st)
	}
	return cuo
}

// SetSpSource sets the "sp_source" field.
func (cuo *CameraUpdateOne) SetSpSource(s string) *CameraUpdateOne {
	cuo.mutation.SetSpSource(s)
	return cuo
}

// SetNillableSpSource sets the "sp_source" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSpSource(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetSpSource(*s)
	}
	return cuo
}

// SetSpCodecName sets the "sp_codec_name" field.
func (cuo *CameraUpdateOne) SetSpCodecName(s string) *CameraUpdateOne {
	cuo.mutation.SetSpCodecName(s)
	return cuo
}

// SetNillableSpCodecName sets the "sp_codec_name" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSpCodecName(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetSpCodecName(*s)
	}
	return cuo
}

// SetSpWidth sets the "sp_width" field.
func (cuo *CameraUpdateOne) SetSpWidth(i int32) *CameraUpdateOne {
	cuo.mutation.ResetSpWidth()
	cuo.mutation.SetSpWidth(i)
	return cuo
}

// SetNillableSpWidth sets the "sp_width" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSpWidth(i *int32) *CameraUpdateOne {
	if i != nil {
		cuo.SetSpWidth(*i)
	}
	return cuo
}

// AddSpWidth adds i to the "sp_width" field.
func (cuo *CameraUpdateOne) AddSpWidth(i int32) *CameraUpdateOne {
	cuo.mutation.AddSpWidth(i)
	return cuo
}

// SetSpHeight sets the "sp_height" field.
func (cuo *CameraUpdateOne) SetSpHeight(i int32) *CameraUpdateOne {
	cuo.mutation.ResetSpHeight()
	cuo.mutation.SetSpHeight(i)
	return cuo
}

// SetNillableSpHeight sets the "sp_height" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSpHeight(i *int32) *CameraUpdateOne {
	if i != nil {
		cuo.SetSpHeight(*i)
	}
	return cuo
}

// AddSpHeight adds i to the "sp_height" field.
func (cuo *CameraUpdateOne) AddSpHeight(i int32) *CameraUpdateOne {
	cuo.mutation.AddSpHeight(i)
	return cuo
}

// SetTransType sets the "trans_type" field.
func (cuo *CameraUpdateOne) SetTransType(s string) *CameraUpdateOne {
	cuo.mutation.SetTransType(s)
	return cuo
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableTransType(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetTransType(*s)
	}
	return cuo
}

// SetDeviceIP sets the "device_ip" field.
func (cuo *CameraUpdateOne) SetDeviceIP(s string) *CameraUpdateOne {
	cuo.mutation.SetDeviceIP(s)
	return cuo
}

// SetNillableDeviceIP sets the "device_ip" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableDeviceIP(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetDeviceIP(*s)
	}
	return cuo
}

// SetDevicePort sets the "device_port" field.
func (cuo *CameraUpdateOne) SetDevicePort(i int32) *CameraUpdateOne {
	cuo.mutation.ResetDevicePort()
	cuo.mutation.SetDevicePort(i)
	return cuo
}

// SetNillableDevicePort sets the "device_port" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableDevicePort(i *int32) *CameraUpdateOne {
	if i != nil {
		cuo.SetDevicePort(*i)
	}
	return cuo
}

// AddDevicePort adds i to the "device_port" field.
func (cuo *CameraUpdateOne) AddDevicePort(i int32) *CameraUpdateOne {
	cuo.mutation.AddDevicePort(i)
	return cuo
}

// SetGBID sets the "gb_id" field.
func (cuo *CameraUpdateOne) SetGBID(s string) *CameraUpdateOne {
	cuo.mutation.SetGBID(s)
	return cuo
}

// SetNillableGBID sets the "gb_id" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableGBID(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetGBID(*s)
	}
	return cuo
}

// SetSipUser sets the "sip_user" field.
func (cuo *CameraUpdateOne) SetSipUser(s string) *CameraUpdateOne {
	cuo.mutation.SetSipUser(s)
	return cuo
}

// SetNillableSipUser sets the "sip_user" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSipUser(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetSipUser(*s)
	}
	return cuo
}

// SetSipPassword sets the "sip_password" field.
func (cuo *CameraUpdateOne) SetSipPassword(s string) *CameraUpdateOne {
	cuo.mutation.SetSipPassword(s)
	return cuo
}

// SetNillableSipPassword sets the "sip_password" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableSipPassword(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetSipPassword(*s)
	}
	return cuo
}

// SetGBChannelID sets the "gb_channel_id" field.
func (cuo *CameraUpdateOne) SetGBChannelID(s string) *CameraUpdateOne {
	cuo.mutation.SetGBChannelID(s)
	return cuo
}

// SetNillableGBChannelID sets the "gb_channel_id" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableGBChannelID(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetGBChannelID(*s)
	}
	return cuo
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (cuo *CameraUpdateOne) SetUpGBChannelID(s string) *CameraUpdateOne {
	cuo.mutation.SetUpGBChannelID(s)
	return cuo
}

// SetNillableUpGBChannelID sets the "up_gb_channel_id" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableUpGBChannelID(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetUpGBChannelID(*s)
	}
	return cuo
}

// SetGBDeviceType sets the "gb_device_type" field.
func (cuo *CameraUpdateOne) SetGBDeviceType(s string) *CameraUpdateOne {
	cuo.mutation.SetGBDeviceType(s)
	return cuo
}

// SetNillableGBDeviceType sets the "gb_device_type" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableGBDeviceType(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetGBDeviceType(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CameraUpdateOne) SetType(bt biz.MediaType) *CameraUpdateOne {
	cuo.mutation.SetType(bt)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableType(bt *biz.MediaType) *CameraUpdateOne {
	if bt != nil {
		cuo.SetType(*bt)
	}
	return cuo
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cuo *CameraUpdateOne) AddTaskIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.AddTaskIDs(ids...)
	return cuo
}

// AddTask adds the "task" edges to the Task entity.
func (cuo *CameraUpdateOne) AddTask(t ...*Task) *CameraUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskIDs(ids...)
}

// AddDeviceIDs adds the "device" edge to the Device entity by IDs.
func (cuo *CameraUpdateOne) AddDeviceIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.AddDeviceIDs(ids...)
	return cuo
}

// AddDevice adds the "device" edges to the Device entity.
func (cuo *CameraUpdateOne) AddDevice(d ...*Device) *CameraUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeviceIDs(ids...)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (cuo *CameraUpdateOne) AddTaskCameraIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.AddTaskCameraIDs(ids...)
	return cuo
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (cuo *CameraUpdateOne) AddTaskCamera(t ...*TaskCamera) *CameraUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskCameraIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (cuo *CameraUpdateOne) AddDeviceCameraIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.AddDeviceCameraIDs(ids...)
	return cuo
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (cuo *CameraUpdateOne) AddDeviceCamera(d ...*DeviceCamera) *CameraUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeviceCameraIDs(ids...)
}

// Mutation returns the CameraMutation object of the builder.
func (cuo *CameraUpdateOne) Mutation() *CameraMutation {
	return cuo.mutation
}

// ClearTask clears all "task" edges to the Task entity.
func (cuo *CameraUpdateOne) ClearTask() *CameraUpdateOne {
	cuo.mutation.ClearTask()
	return cuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cuo *CameraUpdateOne) RemoveTaskIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.RemoveTaskIDs(ids...)
	return cuo
}

// RemoveTask removes "task" edges to Task entities.
func (cuo *CameraUpdateOne) RemoveTask(t ...*Task) *CameraUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskIDs(ids...)
}

// ClearDevice clears all "device" edges to the Device entity.
func (cuo *CameraUpdateOne) ClearDevice() *CameraUpdateOne {
	cuo.mutation.ClearDevice()
	return cuo
}

// RemoveDeviceIDs removes the "device" edge to Device entities by IDs.
func (cuo *CameraUpdateOne) RemoveDeviceIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.RemoveDeviceIDs(ids...)
	return cuo
}

// RemoveDevice removes "device" edges to Device entities.
func (cuo *CameraUpdateOne) RemoveDevice(d ...*Device) *CameraUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeviceIDs(ids...)
}

// ClearTaskCamera clears all "task_camera" edges to the TaskCamera entity.
func (cuo *CameraUpdateOne) ClearTaskCamera() *CameraUpdateOne {
	cuo.mutation.ClearTaskCamera()
	return cuo
}

// RemoveTaskCameraIDs removes the "task_camera" edge to TaskCamera entities by IDs.
func (cuo *CameraUpdateOne) RemoveTaskCameraIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.RemoveTaskCameraIDs(ids...)
	return cuo
}

// RemoveTaskCamera removes "task_camera" edges to TaskCamera entities.
func (cuo *CameraUpdateOne) RemoveTaskCamera(t ...*TaskCamera) *CameraUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskCameraIDs(ids...)
}

// ClearDeviceCamera clears all "device_camera" edges to the DeviceCamera entity.
func (cuo *CameraUpdateOne) ClearDeviceCamera() *CameraUpdateOne {
	cuo.mutation.ClearDeviceCamera()
	return cuo
}

// RemoveDeviceCameraIDs removes the "device_camera" edge to DeviceCamera entities by IDs.
func (cuo *CameraUpdateOne) RemoveDeviceCameraIDs(ids ...uint64) *CameraUpdateOne {
	cuo.mutation.RemoveDeviceCameraIDs(ids...)
	return cuo
}

// RemoveDeviceCamera removes "device_camera" edges to DeviceCamera entities.
func (cuo *CameraUpdateOne) RemoveDeviceCamera(d ...*DeviceCamera) *CameraUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeviceCameraIDs(ids...)
}

// Where appends a list predicates to the CameraUpdate builder.
func (cuo *CameraUpdateOne) Where(ps ...predicate.Camera) *CameraUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CameraUpdateOne) Select(field string, fields ...string) *CameraUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Camera entity.
func (cuo *CameraUpdateOne) Save(ctx context.Context) (*Camera, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CameraUpdateOne) SaveX(ctx context.Context) *Camera {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CameraUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CameraUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CameraUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if camera.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized camera.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := camera.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CameraUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := camera.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Camera.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.SpType(); ok {
		if err := camera.SpTypeValidator(v); err != nil {
			return &ValidationError{Name: "sp_type", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.SpSource(); ok {
		if err := camera.SpSourceValidator(v); err != nil {
			return &ValidationError{Name: "sp_source", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_source": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := camera.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Camera.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CameraUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CameraUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CameraUpdateOne) sqlSave(ctx context.Context) (_node *Camera, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(camera.Table, camera.Columns, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Camera.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, camera.FieldID)
		for _, f := range fields {
			if !camera.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != camera.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(camera.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(camera.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.TenantID(); ok {
		_spec.SetField(camera.FieldTenantID, field.TypeString, value)
	}
	if cuo.mutation.TenantIDCleared() {
		_spec.ClearField(camera.FieldTenantID, field.TypeString)
	}
	if value, ok := cuo.mutation.AccessOrgList(); ok {
		_spec.SetField(camera.FieldAccessOrgList, field.TypeString, value)
	}
	if cuo.mutation.AccessOrgListCleared() {
		_spec.ClearField(camera.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Position(); ok {
		_spec.SetField(camera.FieldPosition, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Region(); ok {
		_spec.SetField(camera.FieldRegion, field.TypeString, value)
	}
	if cuo.mutation.RegionCleared() {
		_spec.ClearField(camera.FieldRegion, field.TypeString)
	}
	if value, ok := cuo.mutation.RegionStr(); ok {
		_spec.SetField(camera.FieldRegionStr, field.TypeString, value)
	}
	if cuo.mutation.RegionStrCleared() {
		_spec.ClearField(camera.FieldRegionStr, field.TypeString)
	}
	if value, ok := cuo.mutation.Longitude(); ok {
		_spec.SetField(camera.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLongitude(); ok {
		_spec.AddField(camera.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Latitude(); ok {
		_spec.SetField(camera.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLatitude(); ok {
		_spec.AddField(camera.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.CustomNumber(); ok {
		_spec.SetField(camera.FieldCustomNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCustomNumber(); ok {
		_spec.AddField(camera.FieldCustomNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ChannelID(); ok {
		_spec.SetField(camera.FieldChannelID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SerialNumber(); ok {
		_spec.SetField(camera.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PoleNumber(); ok {
		_spec.SetField(camera.FieldPoleNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DeviceDescription(); ok {
		_spec.SetField(camera.FieldDeviceDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Scene(); ok {
		_spec.SetField(camera.FieldScene, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Place(); ok {
		_spec.SetField(camera.FieldPlace, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(camera.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.SpType(); ok {
		_spec.SetField(camera.FieldSpType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.SpSource(); ok {
		_spec.SetField(camera.FieldSpSource, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SpCodecName(); ok {
		_spec.SetField(camera.FieldSpCodecName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SpWidth(); ok {
		_spec.SetField(camera.FieldSpWidth, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedSpWidth(); ok {
		_spec.AddField(camera.FieldSpWidth, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.SpHeight(); ok {
		_spec.SetField(camera.FieldSpHeight, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedSpHeight(); ok {
		_spec.AddField(camera.FieldSpHeight, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.TransType(); ok {
		_spec.SetField(camera.FieldTransType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DeviceIP(); ok {
		_spec.SetField(camera.FieldDeviceIP, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DevicePort(); ok {
		_spec.SetField(camera.FieldDevicePort, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedDevicePort(); ok {
		_spec.AddField(camera.FieldDevicePort, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.GBID(); ok {
		_spec.SetField(camera.FieldGBID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SipUser(); ok {
		_spec.SetField(camera.FieldSipUser, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SipPassword(); ok {
		_spec.SetField(camera.FieldSipPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GBChannelID(); ok {
		_spec.SetField(camera.FieldGBChannelID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpGBChannelID(); ok {
		_spec.SetField(camera.FieldUpGBChannelID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GBDeviceType(); ok {
		_spec.SetField(camera.FieldGBDeviceType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(camera.FieldType, field.TypeEnum, value)
	}
	if cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		createE := &TaskCameraCreate{config: cuo.config, mutation: newTaskCameraMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: cuo.config, mutation: newTaskCameraMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: cuo.config, mutation: newTaskCameraMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		createE := &DeviceCameraCreate{config: cuo.config, mutation: newDeviceCameraMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeviceIDs(); len(nodes) > 0 && !cuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: cuo.config, mutation: newDeviceCameraMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: cuo.config, mutation: newDeviceCameraMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskCameraIDs(); len(nodes) > 0 && !cuo.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeviceCameraIDs(); len(nodes) > 0 && !cuo.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Camera{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
