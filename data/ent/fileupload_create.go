// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/fileupload"
)

// FileUploadCreate is the builder for creating a FileUpload entity.
type FileUploadCreate struct {
	config
	mutation *FileUploadMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fuc *FileUploadCreate) SetCreatedAt(t time.Time) *FileUploadCreate {
	fuc.mutation.SetCreatedAt(t)
	return fuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuc *FileUploadCreate) SetNillableCreatedAt(t *time.Time) *FileUploadCreate {
	if t != nil {
		fuc.SetCreatedAt(*t)
	}
	return fuc
}

// SetUpdatedAt sets the "updated_at" field.
func (fuc *FileUploadCreate) SetUpdatedAt(t time.Time) *FileUploadCreate {
	fuc.mutation.SetUpdatedAt(t)
	return fuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fuc *FileUploadCreate) SetNillableUpdatedAt(t *time.Time) *FileUploadCreate {
	if t != nil {
		fuc.SetUpdatedAt(*t)
	}
	return fuc
}

// SetDeletedAt sets the "deleted_at" field.
func (fuc *FileUploadCreate) SetDeletedAt(t time.Time) *FileUploadCreate {
	fuc.mutation.SetDeletedAt(t)
	return fuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuc *FileUploadCreate) SetNillableDeletedAt(t *time.Time) *FileUploadCreate {
	if t != nil {
		fuc.SetDeletedAt(*t)
	}
	return fuc
}

// SetProvider sets the "provider" field.
func (fuc *FileUploadCreate) SetProvider(s string) *FileUploadCreate {
	fuc.mutation.SetProvider(s)
	return fuc
}

// SetFileName sets the "file_name" field.
func (fuc *FileUploadCreate) SetFileName(s string) *FileUploadCreate {
	fuc.mutation.SetFileName(s)
	return fuc
}

// SetMd5 sets the "md5" field.
func (fuc *FileUploadCreate) SetMd5(s string) *FileUploadCreate {
	fuc.mutation.SetMd5(s)
	return fuc
}

// SetTotalBytes sets the "total_bytes" field.
func (fuc *FileUploadCreate) SetTotalBytes(u uint64) *FileUploadCreate {
	fuc.mutation.SetTotalBytes(u)
	return fuc
}

// SetEtag sets the "etag" field.
func (fuc *FileUploadCreate) SetEtag(s string) *FileUploadCreate {
	fuc.mutation.SetEtag(s)
	return fuc
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (fuc *FileUploadCreate) SetNillableEtag(s *string) *FileUploadCreate {
	if s != nil {
		fuc.SetEtag(*s)
	}
	return fuc
}

// SetKey sets the "key" field.
func (fuc *FileUploadCreate) SetKey(s string) *FileUploadCreate {
	fuc.mutation.SetKey(s)
	return fuc
}

// SetUploadID sets the "upload_id" field.
func (fuc *FileUploadCreate) SetUploadID(s string) *FileUploadCreate {
	fuc.mutation.SetUploadID(s)
	return fuc
}

// SetNillableUploadID sets the "upload_id" field if the given value is not nil.
func (fuc *FileUploadCreate) SetNillableUploadID(s *string) *FileUploadCreate {
	if s != nil {
		fuc.SetUploadID(*s)
	}
	return fuc
}

// SetStatus sets the "status" field.
func (fuc *FileUploadCreate) SetStatus(s string) *FileUploadCreate {
	fuc.mutation.SetStatus(s)
	return fuc
}

// SetType sets the "type" field.
func (fuc *FileUploadCreate) SetType(s string) *FileUploadCreate {
	fuc.mutation.SetType(s)
	return fuc
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (fuc *FileUploadCreate) SetAlgoGroupID(u uint64) *FileUploadCreate {
	fuc.mutation.SetAlgoGroupID(u)
	return fuc
}

// SetMeta sets the "meta" field.
func (fuc *FileUploadCreate) SetMeta(s string) *FileUploadCreate {
	fuc.mutation.SetMeta(s)
	return fuc
}

// SetID sets the "id" field.
func (fuc *FileUploadCreate) SetID(u uint64) *FileUploadCreate {
	fuc.mutation.SetID(u)
	return fuc
}

// Mutation returns the FileUploadMutation object of the builder.
func (fuc *FileUploadCreate) Mutation() *FileUploadMutation {
	return fuc.mutation
}

// Save creates the FileUpload in the database.
func (fuc *FileUploadCreate) Save(ctx context.Context) (*FileUpload, error) {
	if err := fuc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuc.sqlSave, fuc.mutation, fuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fuc *FileUploadCreate) SaveX(ctx context.Context) *FileUpload {
	v, err := fuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuc *FileUploadCreate) Exec(ctx context.Context) error {
	_, err := fuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuc *FileUploadCreate) ExecX(ctx context.Context) {
	if err := fuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuc *FileUploadCreate) defaults() error {
	if _, ok := fuc.mutation.CreatedAt(); !ok {
		if fileupload.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileupload.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fileupload.DefaultCreatedAt()
		fuc.mutation.SetCreatedAt(v)
	}
	if _, ok := fuc.mutation.UpdatedAt(); !ok {
		if fileupload.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileupload.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fileupload.DefaultUpdatedAt()
		fuc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuc *FileUploadCreate) check() error {
	if _, ok := fuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FileUpload.created_at"`)}
	}
	if _, ok := fuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FileUpload.updated_at"`)}
	}
	if _, ok := fuc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "FileUpload.provider"`)}
	}
	if _, ok := fuc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "FileUpload.file_name"`)}
	}
	if _, ok := fuc.mutation.Md5(); !ok {
		return &ValidationError{Name: "md5", err: errors.New(`ent: missing required field "FileUpload.md5"`)}
	}
	if _, ok := fuc.mutation.TotalBytes(); !ok {
		return &ValidationError{Name: "total_bytes", err: errors.New(`ent: missing required field "FileUpload.total_bytes"`)}
	}
	if _, ok := fuc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "FileUpload.key"`)}
	}
	if _, ok := fuc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FileUpload.status"`)}
	}
	if _, ok := fuc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FileUpload.type"`)}
	}
	if _, ok := fuc.mutation.AlgoGroupID(); !ok {
		return &ValidationError{Name: "algo_group_id", err: errors.New(`ent: missing required field "FileUpload.algo_group_id"`)}
	}
	if _, ok := fuc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "FileUpload.meta"`)}
	}
	return nil
}

func (fuc *FileUploadCreate) sqlSave(ctx context.Context) (*FileUpload, error) {
	if err := fuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	fuc.mutation.id = &_node.ID
	fuc.mutation.done = true
	return _node, nil
}

func (fuc *FileUploadCreate) createSpec() (*FileUpload, *sqlgraph.CreateSpec) {
	var (
		_node = &FileUpload{config: fuc.config}
		_spec = sqlgraph.NewCreateSpec(fileupload.Table, sqlgraph.NewFieldSpec(fileupload.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = fuc.conflict
	if id, ok := fuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fuc.mutation.CreatedAt(); ok {
		_spec.SetField(fileupload.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fuc.mutation.UpdatedAt(); ok {
		_spec.SetField(fileupload.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fuc.mutation.DeletedAt(); ok {
		_spec.SetField(fileupload.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := fuc.mutation.Provider(); ok {
		_spec.SetField(fileupload.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := fuc.mutation.FileName(); ok {
		_spec.SetField(fileupload.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := fuc.mutation.Md5(); ok {
		_spec.SetField(fileupload.FieldMd5, field.TypeString, value)
		_node.Md5 = value
	}
	if value, ok := fuc.mutation.TotalBytes(); ok {
		_spec.SetField(fileupload.FieldTotalBytes, field.TypeUint64, value)
		_node.TotalBytes = value
	}
	if value, ok := fuc.mutation.Etag(); ok {
		_spec.SetField(fileupload.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := fuc.mutation.Key(); ok {
		_spec.SetField(fileupload.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := fuc.mutation.UploadID(); ok {
		_spec.SetField(fileupload.FieldUploadID, field.TypeString, value)
		_node.UploadID = value
	}
	if value, ok := fuc.mutation.Status(); ok {
		_spec.SetField(fileupload.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := fuc.mutation.GetType(); ok {
		_spec.SetField(fileupload.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fuc.mutation.AlgoGroupID(); ok {
		_spec.SetField(fileupload.FieldAlgoGroupID, field.TypeUint64, value)
		_node.AlgoGroupID = value
	}
	if value, ok := fuc.mutation.Meta(); ok {
		_spec.SetField(fileupload.FieldMeta, field.TypeString, value)
		_node.Meta = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileUpload.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUploadUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fuc *FileUploadCreate) OnConflict(opts ...sql.ConflictOption) *FileUploadUpsertOne {
	fuc.conflict = opts
	return &FileUploadUpsertOne{
		create: fuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fuc *FileUploadCreate) OnConflictColumns(columns ...string) *FileUploadUpsertOne {
	fuc.conflict = append(fuc.conflict, sql.ConflictColumns(columns...))
	return &FileUploadUpsertOne{
		create: fuc,
	}
}

type (
	// FileUploadUpsertOne is the builder for "upsert"-ing
	//  one FileUpload node.
	FileUploadUpsertOne struct {
		create *FileUploadCreate
	}

	// FileUploadUpsert is the "OnConflict" setter.
	FileUploadUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUploadUpsert) SetUpdatedAt(v time.Time) *FileUploadUpsert {
	u.Set(fileupload.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateUpdatedAt() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUploadUpsert) SetDeletedAt(v time.Time) *FileUploadUpsert {
	u.Set(fileupload.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateDeletedAt() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUploadUpsert) ClearDeletedAt() *FileUploadUpsert {
	u.SetNull(fileupload.FieldDeletedAt)
	return u
}

// SetProvider sets the "provider" field.
func (u *FileUploadUpsert) SetProvider(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateProvider() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldProvider)
	return u
}

// SetFileName sets the "file_name" field.
func (u *FileUploadUpsert) SetFileName(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateFileName() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldFileName)
	return u
}

// SetMd5 sets the "md5" field.
func (u *FileUploadUpsert) SetMd5(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldMd5, v)
	return u
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateMd5() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldMd5)
	return u
}

// SetTotalBytes sets the "total_bytes" field.
func (u *FileUploadUpsert) SetTotalBytes(v uint64) *FileUploadUpsert {
	u.Set(fileupload.FieldTotalBytes, v)
	return u
}

// UpdateTotalBytes sets the "total_bytes" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateTotalBytes() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldTotalBytes)
	return u
}

// AddTotalBytes adds v to the "total_bytes" field.
func (u *FileUploadUpsert) AddTotalBytes(v uint64) *FileUploadUpsert {
	u.Add(fileupload.FieldTotalBytes, v)
	return u
}

// SetEtag sets the "etag" field.
func (u *FileUploadUpsert) SetEtag(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldEtag, v)
	return u
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateEtag() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldEtag)
	return u
}

// ClearEtag clears the value of the "etag" field.
func (u *FileUploadUpsert) ClearEtag() *FileUploadUpsert {
	u.SetNull(fileupload.FieldEtag)
	return u
}

// SetKey sets the "key" field.
func (u *FileUploadUpsert) SetKey(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateKey() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldKey)
	return u
}

// SetUploadID sets the "upload_id" field.
func (u *FileUploadUpsert) SetUploadID(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldUploadID, v)
	return u
}

// UpdateUploadID sets the "upload_id" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateUploadID() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldUploadID)
	return u
}

// ClearUploadID clears the value of the "upload_id" field.
func (u *FileUploadUpsert) ClearUploadID() *FileUploadUpsert {
	u.SetNull(fileupload.FieldUploadID)
	return u
}

// SetStatus sets the "status" field.
func (u *FileUploadUpsert) SetStatus(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateStatus() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *FileUploadUpsert) SetType(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateType() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldType)
	return u
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *FileUploadUpsert) SetAlgoGroupID(v uint64) *FileUploadUpsert {
	u.Set(fileupload.FieldAlgoGroupID, v)
	return u
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateAlgoGroupID() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldAlgoGroupID)
	return u
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *FileUploadUpsert) AddAlgoGroupID(v uint64) *FileUploadUpsert {
	u.Add(fileupload.FieldAlgoGroupID, v)
	return u
}

// SetMeta sets the "meta" field.
func (u *FileUploadUpsert) SetMeta(v string) *FileUploadUpsert {
	u.Set(fileupload.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *FileUploadUpsert) UpdateMeta() *FileUploadUpsert {
	u.SetExcluded(fileupload.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fileupload.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUploadUpsertOne) UpdateNewValues() *FileUploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fileupload.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(fileupload.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileUploadUpsertOne) Ignore() *FileUploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUploadUpsertOne) DoNothing() *FileUploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileUploadCreate.OnConflict
// documentation for more info.
func (u *FileUploadUpsertOne) Update(set func(*FileUploadUpsert)) *FileUploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUploadUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUploadUpsertOne) SetUpdatedAt(v time.Time) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateUpdatedAt() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUploadUpsertOne) SetDeletedAt(v time.Time) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateDeletedAt() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUploadUpsertOne) ClearDeletedAt() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearDeletedAt()
	})
}

// SetProvider sets the "provider" field.
func (u *FileUploadUpsertOne) SetProvider(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateProvider() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateProvider()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileUploadUpsertOne) SetFileName(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateFileName() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateFileName()
	})
}

// SetMd5 sets the "md5" field.
func (u *FileUploadUpsertOne) SetMd5(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateMd5() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateMd5()
	})
}

// SetTotalBytes sets the "total_bytes" field.
func (u *FileUploadUpsertOne) SetTotalBytes(v uint64) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetTotalBytes(v)
	})
}

// AddTotalBytes adds v to the "total_bytes" field.
func (u *FileUploadUpsertOne) AddTotalBytes(v uint64) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.AddTotalBytes(v)
	})
}

// UpdateTotalBytes sets the "total_bytes" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateTotalBytes() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateTotalBytes()
	})
}

// SetEtag sets the "etag" field.
func (u *FileUploadUpsertOne) SetEtag(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetEtag(v)
	})
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateEtag() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateEtag()
	})
}

// ClearEtag clears the value of the "etag" field.
func (u *FileUploadUpsertOne) ClearEtag() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearEtag()
	})
}

// SetKey sets the "key" field.
func (u *FileUploadUpsertOne) SetKey(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateKey() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateKey()
	})
}

// SetUploadID sets the "upload_id" field.
func (u *FileUploadUpsertOne) SetUploadID(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetUploadID(v)
	})
}

// UpdateUploadID sets the "upload_id" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateUploadID() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateUploadID()
	})
}

// ClearUploadID clears the value of the "upload_id" field.
func (u *FileUploadUpsertOne) ClearUploadID() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearUploadID()
	})
}

// SetStatus sets the "status" field.
func (u *FileUploadUpsertOne) SetStatus(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateStatus() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *FileUploadUpsertOne) SetType(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateType() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateType()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *FileUploadUpsertOne) SetAlgoGroupID(v uint64) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *FileUploadUpsertOne) AddAlgoGroupID(v uint64) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateAlgoGroupID() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// SetMeta sets the "meta" field.
func (u *FileUploadUpsertOne) SetMeta(v string) *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *FileUploadUpsertOne) UpdateMeta() *FileUploadUpsertOne {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *FileUploadUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileUploadCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUploadUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileUploadUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileUploadUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileUploadCreateBulk is the builder for creating many FileUpload entities in bulk.
type FileUploadCreateBulk struct {
	config
	err      error
	builders []*FileUploadCreate
	conflict []sql.ConflictOption
}

// Save creates the FileUpload entities in the database.
func (fucb *FileUploadCreateBulk) Save(ctx context.Context) ([]*FileUpload, error) {
	if fucb.err != nil {
		return nil, fucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fucb.builders))
	nodes := make([]*FileUpload, len(fucb.builders))
	mutators := make([]Mutator, len(fucb.builders))
	for i := range fucb.builders {
		func(i int, root context.Context) {
			builder := fucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileUploadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fucb *FileUploadCreateBulk) SaveX(ctx context.Context) []*FileUpload {
	v, err := fucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fucb *FileUploadCreateBulk) Exec(ctx context.Context) error {
	_, err := fucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fucb *FileUploadCreateBulk) ExecX(ctx context.Context) {
	if err := fucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileUpload.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUploadUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fucb *FileUploadCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileUploadUpsertBulk {
	fucb.conflict = opts
	return &FileUploadUpsertBulk{
		create: fucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fucb *FileUploadCreateBulk) OnConflictColumns(columns ...string) *FileUploadUpsertBulk {
	fucb.conflict = append(fucb.conflict, sql.ConflictColumns(columns...))
	return &FileUploadUpsertBulk{
		create: fucb,
	}
}

// FileUploadUpsertBulk is the builder for "upsert"-ing
// a bulk of FileUpload nodes.
type FileUploadUpsertBulk struct {
	create *FileUploadCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fileupload.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUploadUpsertBulk) UpdateNewValues() *FileUploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fileupload.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(fileupload.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileUpload.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileUploadUpsertBulk) Ignore() *FileUploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUploadUpsertBulk) DoNothing() *FileUploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileUploadCreateBulk.OnConflict
// documentation for more info.
func (u *FileUploadUpsertBulk) Update(set func(*FileUploadUpsert)) *FileUploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUploadUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUploadUpsertBulk) SetUpdatedAt(v time.Time) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateUpdatedAt() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUploadUpsertBulk) SetDeletedAt(v time.Time) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateDeletedAt() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUploadUpsertBulk) ClearDeletedAt() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearDeletedAt()
	})
}

// SetProvider sets the "provider" field.
func (u *FileUploadUpsertBulk) SetProvider(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateProvider() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateProvider()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileUploadUpsertBulk) SetFileName(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateFileName() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateFileName()
	})
}

// SetMd5 sets the "md5" field.
func (u *FileUploadUpsertBulk) SetMd5(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateMd5() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateMd5()
	})
}

// SetTotalBytes sets the "total_bytes" field.
func (u *FileUploadUpsertBulk) SetTotalBytes(v uint64) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetTotalBytes(v)
	})
}

// AddTotalBytes adds v to the "total_bytes" field.
func (u *FileUploadUpsertBulk) AddTotalBytes(v uint64) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.AddTotalBytes(v)
	})
}

// UpdateTotalBytes sets the "total_bytes" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateTotalBytes() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateTotalBytes()
	})
}

// SetEtag sets the "etag" field.
func (u *FileUploadUpsertBulk) SetEtag(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetEtag(v)
	})
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateEtag() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateEtag()
	})
}

// ClearEtag clears the value of the "etag" field.
func (u *FileUploadUpsertBulk) ClearEtag() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearEtag()
	})
}

// SetKey sets the "key" field.
func (u *FileUploadUpsertBulk) SetKey(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateKey() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateKey()
	})
}

// SetUploadID sets the "upload_id" field.
func (u *FileUploadUpsertBulk) SetUploadID(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetUploadID(v)
	})
}

// UpdateUploadID sets the "upload_id" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateUploadID() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateUploadID()
	})
}

// ClearUploadID clears the value of the "upload_id" field.
func (u *FileUploadUpsertBulk) ClearUploadID() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.ClearUploadID()
	})
}

// SetStatus sets the "status" field.
func (u *FileUploadUpsertBulk) SetStatus(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateStatus() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *FileUploadUpsertBulk) SetType(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateType() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateType()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *FileUploadUpsertBulk) SetAlgoGroupID(v uint64) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *FileUploadUpsertBulk) AddAlgoGroupID(v uint64) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateAlgoGroupID() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// SetMeta sets the "meta" field.
func (u *FileUploadUpsertBulk) SetMeta(v string) *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *FileUploadUpsertBulk) UpdateMeta() *FileUploadUpsertBulk {
	return u.Update(func(s *FileUploadUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *FileUploadUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileUploadCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileUploadCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUploadUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
