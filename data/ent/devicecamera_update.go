// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/devicecamera"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/task"
)

// DeviceCameraUpdate is the builder for updating DeviceCamera entities.
type DeviceCameraUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceCameraMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceCameraUpdate builder.
func (dcu *DeviceCameraUpdate) Where(ps ...predicate.DeviceCamera) *DeviceCameraUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DeviceCameraUpdate) SetUpdatedAt(t time.Time) *DeviceCameraUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetDeviceID sets the "device_id" field.
func (dcu *DeviceCameraUpdate) SetDeviceID(u uint64) *DeviceCameraUpdate {
	dcu.mutation.SetDeviceID(u)
	return dcu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dcu *DeviceCameraUpdate) SetNillableDeviceID(u *uint64) *DeviceCameraUpdate {
	if u != nil {
		dcu.SetDeviceID(*u)
	}
	return dcu
}

// SetCameraID sets the "camera_id" field.
func (dcu *DeviceCameraUpdate) SetCameraID(u uint64) *DeviceCameraUpdate {
	dcu.mutation.SetCameraID(u)
	return dcu
}

// SetNillableCameraID sets the "camera_id" field if the given value is not nil.
func (dcu *DeviceCameraUpdate) SetNillableCameraID(u *uint64) *DeviceCameraUpdate {
	if u != nil {
		dcu.SetCameraID(*u)
	}
	return dcu
}

// SetCamera sets the "camera" edge to the Camera entity.
func (dcu *DeviceCameraUpdate) SetCamera(c *Camera) *DeviceCameraUpdate {
	return dcu.SetCameraID(c.ID)
}

// SetDevice sets the "device" edge to the Task entity.
func (dcu *DeviceCameraUpdate) SetDevice(t *Task) *DeviceCameraUpdate {
	return dcu.SetDeviceID(t.ID)
}

// Mutation returns the DeviceCameraMutation object of the builder.
func (dcu *DeviceCameraUpdate) Mutation() *DeviceCameraMutation {
	return dcu.mutation
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (dcu *DeviceCameraUpdate) ClearCamera() *DeviceCameraUpdate {
	dcu.mutation.ClearCamera()
	return dcu
}

// ClearDevice clears the "device" edge to the Task entity.
func (dcu *DeviceCameraUpdate) ClearDevice() *DeviceCameraUpdate {
	dcu.mutation.ClearDevice()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeviceCameraUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeviceCameraUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeviceCameraUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeviceCameraUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DeviceCameraUpdate) defaults() {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		v := devicecamera.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DeviceCameraUpdate) check() error {
	if _, ok := dcu.mutation.CameraID(); dcu.mutation.CameraCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeviceCamera.camera"`)
	}
	if _, ok := dcu.mutation.DeviceID(); dcu.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeviceCamera.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcu *DeviceCameraUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceCameraUpdate {
	dcu.modifiers = append(dcu.modifiers, modifiers...)
	return dcu
}

func (dcu *DeviceCameraUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicecamera.Table, devicecamera.Columns, sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicecamera.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.CameraTable,
			Columns: []string{devicecamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.CameraTable,
			Columns: []string{devicecamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.DeviceTable,
			Columns: []string{devicecamera.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.DeviceTable,
			Columns: []string{devicecamera.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicecamera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DeviceCameraUpdateOne is the builder for updating a single DeviceCamera entity.
type DeviceCameraUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceCameraMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DeviceCameraUpdateOne) SetUpdatedAt(t time.Time) *DeviceCameraUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetDeviceID sets the "device_id" field.
func (dcuo *DeviceCameraUpdateOne) SetDeviceID(u uint64) *DeviceCameraUpdateOne {
	dcuo.mutation.SetDeviceID(u)
	return dcuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dcuo *DeviceCameraUpdateOne) SetNillableDeviceID(u *uint64) *DeviceCameraUpdateOne {
	if u != nil {
		dcuo.SetDeviceID(*u)
	}
	return dcuo
}

// SetCameraID sets the "camera_id" field.
func (dcuo *DeviceCameraUpdateOne) SetCameraID(u uint64) *DeviceCameraUpdateOne {
	dcuo.mutation.SetCameraID(u)
	return dcuo
}

// SetNillableCameraID sets the "camera_id" field if the given value is not nil.
func (dcuo *DeviceCameraUpdateOne) SetNillableCameraID(u *uint64) *DeviceCameraUpdateOne {
	if u != nil {
		dcuo.SetCameraID(*u)
	}
	return dcuo
}

// SetCamera sets the "camera" edge to the Camera entity.
func (dcuo *DeviceCameraUpdateOne) SetCamera(c *Camera) *DeviceCameraUpdateOne {
	return dcuo.SetCameraID(c.ID)
}

// SetDevice sets the "device" edge to the Task entity.
func (dcuo *DeviceCameraUpdateOne) SetDevice(t *Task) *DeviceCameraUpdateOne {
	return dcuo.SetDeviceID(t.ID)
}

// Mutation returns the DeviceCameraMutation object of the builder.
func (dcuo *DeviceCameraUpdateOne) Mutation() *DeviceCameraMutation {
	return dcuo.mutation
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (dcuo *DeviceCameraUpdateOne) ClearCamera() *DeviceCameraUpdateOne {
	dcuo.mutation.ClearCamera()
	return dcuo
}

// ClearDevice clears the "device" edge to the Task entity.
func (dcuo *DeviceCameraUpdateOne) ClearDevice() *DeviceCameraUpdateOne {
	dcuo.mutation.ClearDevice()
	return dcuo
}

// Where appends a list predicates to the DeviceCameraUpdate builder.
func (dcuo *DeviceCameraUpdateOne) Where(ps ...predicate.DeviceCamera) *DeviceCameraUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeviceCameraUpdateOne) Select(field string, fields ...string) *DeviceCameraUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeviceCamera entity.
func (dcuo *DeviceCameraUpdateOne) Save(ctx context.Context) (*DeviceCamera, error) {
	dcuo.defaults()
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeviceCameraUpdateOne) SaveX(ctx context.Context) *DeviceCamera {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeviceCameraUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeviceCameraUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DeviceCameraUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		v := devicecamera.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DeviceCameraUpdateOne) check() error {
	if _, ok := dcuo.mutation.CameraID(); dcuo.mutation.CameraCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeviceCamera.camera"`)
	}
	if _, ok := dcuo.mutation.DeviceID(); dcuo.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeviceCamera.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcuo *DeviceCameraUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceCameraUpdateOne {
	dcuo.modifiers = append(dcuo.modifiers, modifiers...)
	return dcuo
}

func (dcuo *DeviceCameraUpdateOne) sqlSave(ctx context.Context) (_node *DeviceCamera, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicecamera.Table, devicecamera.Columns, sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceCamera.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicecamera.FieldID)
		for _, f := range fields {
			if !devicecamera.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicecamera.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicecamera.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.CameraTable,
			Columns: []string{devicecamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.CameraTable,
			Columns: []string{devicecamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.DeviceTable,
			Columns: []string{devicecamera.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.DeviceTable,
			Columns: []string{devicecamera.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcuo.modifiers...)
	_node = &DeviceCamera{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicecamera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
