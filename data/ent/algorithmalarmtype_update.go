// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/algorithmalarmtype"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// AlgorithmAlarmTypeUpdate is the builder for updating AlgorithmAlarmType entities.
type AlgorithmAlarmTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *AlgorithmAlarmTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlgorithmAlarmTypeUpdate builder.
func (aatu *AlgorithmAlarmTypeUpdate) Where(ps ...predicate.AlgorithmAlarmType) *AlgorithmAlarmTypeUpdate {
	aatu.mutation.Where(ps...)
	return aatu
}

// SetUpdatedAt sets the "updated_at" field.
func (aatu *AlgorithmAlarmTypeUpdate) SetUpdatedAt(t time.Time) *AlgorithmAlarmTypeUpdate {
	aatu.mutation.SetUpdatedAt(t)
	return aatu
}

// SetDeletedAt sets the "deleted_at" field.
func (aatu *AlgorithmAlarmTypeUpdate) SetDeletedAt(t time.Time) *AlgorithmAlarmTypeUpdate {
	aatu.mutation.SetDeletedAt(t)
	return aatu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aatu *AlgorithmAlarmTypeUpdate) SetNillableDeletedAt(t *time.Time) *AlgorithmAlarmTypeUpdate {
	if t != nil {
		aatu.SetDeletedAt(*t)
	}
	return aatu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aatu *AlgorithmAlarmTypeUpdate) ClearDeletedAt() *AlgorithmAlarmTypeUpdate {
	aatu.mutation.ClearDeletedAt()
	return aatu
}

// SetTypeName sets the "type_name" field.
func (aatu *AlgorithmAlarmTypeUpdate) SetTypeName(s string) *AlgorithmAlarmTypeUpdate {
	aatu.mutation.SetTypeName(s)
	return aatu
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (aatu *AlgorithmAlarmTypeUpdate) SetNillableTypeName(s *string) *AlgorithmAlarmTypeUpdate {
	if s != nil {
		aatu.SetTypeName(*s)
	}
	return aatu
}

// Mutation returns the AlgorithmAlarmTypeMutation object of the builder.
func (aatu *AlgorithmAlarmTypeUpdate) Mutation() *AlgorithmAlarmTypeMutation {
	return aatu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aatu *AlgorithmAlarmTypeUpdate) Save(ctx context.Context) (int, error) {
	if err := aatu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, aatu.sqlSave, aatu.mutation, aatu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aatu *AlgorithmAlarmTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := aatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aatu *AlgorithmAlarmTypeUpdate) Exec(ctx context.Context) error {
	_, err := aatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aatu *AlgorithmAlarmTypeUpdate) ExecX(ctx context.Context) {
	if err := aatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aatu *AlgorithmAlarmTypeUpdate) defaults() error {
	if _, ok := aatu.mutation.UpdatedAt(); !ok {
		if algorithmalarmtype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithmalarmtype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := algorithmalarmtype.UpdateDefaultUpdatedAt()
		aatu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aatu *AlgorithmAlarmTypeUpdate) check() error {
	if v, ok := aatu.mutation.TypeName(); ok {
		if err := algorithmalarmtype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "AlgorithmAlarmType.type_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aatu *AlgorithmAlarmTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlgorithmAlarmTypeUpdate {
	aatu.modifiers = append(aatu.modifiers, modifiers...)
	return aatu
}

func (aatu *AlgorithmAlarmTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aatu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(algorithmalarmtype.Table, algorithmalarmtype.Columns, sqlgraph.NewFieldSpec(algorithmalarmtype.FieldID, field.TypeUint64))
	if ps := aatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aatu.mutation.UpdatedAt(); ok {
		_spec.SetField(algorithmalarmtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aatu.mutation.DeletedAt(); ok {
		_spec.SetField(algorithmalarmtype.FieldDeletedAt, field.TypeTime, value)
	}
	if aatu.mutation.DeletedAtCleared() {
		_spec.ClearField(algorithmalarmtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aatu.mutation.TypeName(); ok {
		_spec.SetField(algorithmalarmtype.FieldTypeName, field.TypeString, value)
	}
	_spec.AddModifiers(aatu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{algorithmalarmtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aatu.mutation.done = true
	return n, nil
}

// AlgorithmAlarmTypeUpdateOne is the builder for updating a single AlgorithmAlarmType entity.
type AlgorithmAlarmTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlgorithmAlarmTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SetUpdatedAt(t time.Time) *AlgorithmAlarmTypeUpdateOne {
	aatuo.mutation.SetUpdatedAt(t)
	return aatuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SetDeletedAt(t time.Time) *AlgorithmAlarmTypeUpdateOne {
	aatuo.mutation.SetDeletedAt(t)
	return aatuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *AlgorithmAlarmTypeUpdateOne {
	if t != nil {
		aatuo.SetDeletedAt(*t)
	}
	return aatuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aatuo *AlgorithmAlarmTypeUpdateOne) ClearDeletedAt() *AlgorithmAlarmTypeUpdateOne {
	aatuo.mutation.ClearDeletedAt()
	return aatuo
}

// SetTypeName sets the "type_name" field.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SetTypeName(s string) *AlgorithmAlarmTypeUpdateOne {
	aatuo.mutation.SetTypeName(s)
	return aatuo
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SetNillableTypeName(s *string) *AlgorithmAlarmTypeUpdateOne {
	if s != nil {
		aatuo.SetTypeName(*s)
	}
	return aatuo
}

// Mutation returns the AlgorithmAlarmTypeMutation object of the builder.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Mutation() *AlgorithmAlarmTypeMutation {
	return aatuo.mutation
}

// Where appends a list predicates to the AlgorithmAlarmTypeUpdate builder.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Where(ps ...predicate.AlgorithmAlarmType) *AlgorithmAlarmTypeUpdateOne {
	aatuo.mutation.Where(ps...)
	return aatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Select(field string, fields ...string) *AlgorithmAlarmTypeUpdateOne {
	aatuo.fields = append([]string{field}, fields...)
	return aatuo
}

// Save executes the query and returns the updated AlgorithmAlarmType entity.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Save(ctx context.Context) (*AlgorithmAlarmType, error) {
	if err := aatuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aatuo.sqlSave, aatuo.mutation, aatuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aatuo *AlgorithmAlarmTypeUpdateOne) SaveX(ctx context.Context) *AlgorithmAlarmType {
	node, err := aatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := aatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aatuo *AlgorithmAlarmTypeUpdateOne) ExecX(ctx context.Context) {
	if err := aatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aatuo *AlgorithmAlarmTypeUpdateOne) defaults() error {
	if _, ok := aatuo.mutation.UpdatedAt(); !ok {
		if algorithmalarmtype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithmalarmtype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := algorithmalarmtype.UpdateDefaultUpdatedAt()
		aatuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aatuo *AlgorithmAlarmTypeUpdateOne) check() error {
	if v, ok := aatuo.mutation.TypeName(); ok {
		if err := algorithmalarmtype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "AlgorithmAlarmType.type_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aatuo *AlgorithmAlarmTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlgorithmAlarmTypeUpdateOne {
	aatuo.modifiers = append(aatuo.modifiers, modifiers...)
	return aatuo
}

func (aatuo *AlgorithmAlarmTypeUpdateOne) sqlSave(ctx context.Context) (_node *AlgorithmAlarmType, err error) {
	if err := aatuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(algorithmalarmtype.Table, algorithmalarmtype.Columns, sqlgraph.NewFieldSpec(algorithmalarmtype.FieldID, field.TypeUint64))
	id, ok := aatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlgorithmAlarmType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, algorithmalarmtype.FieldID)
		for _, f := range fields {
			if !algorithmalarmtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != algorithmalarmtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aatuo.mutation.UpdatedAt(); ok {
		_spec.SetField(algorithmalarmtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aatuo.mutation.DeletedAt(); ok {
		_spec.SetField(algorithmalarmtype.FieldDeletedAt, field.TypeTime, value)
	}
	if aatuo.mutation.DeletedAtCleared() {
		_spec.ClearField(algorithmalarmtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aatuo.mutation.TypeName(); ok {
		_spec.SetField(algorithmalarmtype.FieldTypeName, field.TypeString, value)
	}
	_spec.AddModifiers(aatuo.modifiers...)
	_node = &AlgorithmAlarmType{config: aatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{algorithmalarmtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aatuo.mutation.done = true
	return _node, nil
}
