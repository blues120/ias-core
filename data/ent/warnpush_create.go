// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
)

// WarnPushCreate is the builder for creating a WarnPush entity.
type WarnPushCreate struct {
	config
	mutation *WarnPushMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wpc *WarnPushCreate) SetCreatedAt(t time.Time) *WarnPushCreate {
	wpc.mutation.SetCreatedAt(t)
	return wpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wpc *WarnPushCreate) SetNillableCreatedAt(t *time.Time) *WarnPushCreate {
	if t != nil {
		wpc.SetCreatedAt(*t)
	}
	return wpc
}

// SetUpdatedAt sets the "updated_at" field.
func (wpc *WarnPushCreate) SetUpdatedAt(t time.Time) *WarnPushCreate {
	wpc.mutation.SetUpdatedAt(t)
	return wpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wpc *WarnPushCreate) SetNillableUpdatedAt(t *time.Time) *WarnPushCreate {
	if t != nil {
		wpc.SetUpdatedAt(*t)
	}
	return wpc
}

// SetDeletedAt sets the "deleted_at" field.
func (wpc *WarnPushCreate) SetDeletedAt(t time.Time) *WarnPushCreate {
	wpc.mutation.SetDeletedAt(t)
	return wpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wpc *WarnPushCreate) SetNillableDeletedAt(t *time.Time) *WarnPushCreate {
	if t != nil {
		wpc.SetDeletedAt(*t)
	}
	return wpc
}

// SetTenantID sets the "tenant_id" field.
func (wpc *WarnPushCreate) SetTenantID(s string) *WarnPushCreate {
	wpc.mutation.SetTenantID(s)
	return wpc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wpc *WarnPushCreate) SetNillableTenantID(s *string) *WarnPushCreate {
	if s != nil {
		wpc.SetTenantID(*s)
	}
	return wpc
}

// SetAccessOrgList sets the "access_org_list" field.
func (wpc *WarnPushCreate) SetAccessOrgList(s string) *WarnPushCreate {
	wpc.mutation.SetAccessOrgList(s)
	return wpc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wpc *WarnPushCreate) SetNillableAccessOrgList(s *string) *WarnPushCreate {
	if s != nil {
		wpc.SetAccessOrgList(*s)
	}
	return wpc
}

// SetName sets the "name" field.
func (wpc *WarnPushCreate) SetName(s string) *WarnPushCreate {
	wpc.mutation.SetName(s)
	return wpc
}

// SetType sets the "type" field.
func (wpc *WarnPushCreate) SetType(bpt biz.WarnPushType) *WarnPushCreate {
	wpc.mutation.SetType(bpt)
	return wpc
}

// SetURL sets the "url" field.
func (wpc *WarnPushCreate) SetURL(s string) *WarnPushCreate {
	wpc.mutation.SetURL(s)
	return wpc
}

// SetRemark sets the "remark" field.
func (wpc *WarnPushCreate) SetRemark(s string) *WarnPushCreate {
	wpc.mutation.SetRemark(s)
	return wpc
}

// SetMode sets the "mode" field.
func (wpc *WarnPushCreate) SetMode(bpm biz.WarnPushMode) *WarnPushCreate {
	wpc.mutation.SetMode(bpm)
	return wpc
}

// SetStatus sets the "status" field.
func (wpc *WarnPushCreate) SetStatus(bps biz.WarnPushStatus) *WarnPushCreate {
	wpc.mutation.SetStatus(bps)
	return wpc
}

// SetID sets the "id" field.
func (wpc *WarnPushCreate) SetID(u uint64) *WarnPushCreate {
	wpc.mutation.SetID(u)
	return wpc
}

// Mutation returns the WarnPushMutation object of the builder.
func (wpc *WarnPushCreate) Mutation() *WarnPushMutation {
	return wpc.mutation
}

// Save creates the WarnPush in the database.
func (wpc *WarnPushCreate) Save(ctx context.Context) (*WarnPush, error) {
	if err := wpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wpc.sqlSave, wpc.mutation, wpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wpc *WarnPushCreate) SaveX(ctx context.Context) *WarnPush {
	v, err := wpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpc *WarnPushCreate) Exec(ctx context.Context) error {
	_, err := wpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpc *WarnPushCreate) ExecX(ctx context.Context) {
	if err := wpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpc *WarnPushCreate) defaults() error {
	if _, ok := wpc.mutation.CreatedAt(); !ok {
		if warnpush.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpush.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := warnpush.DefaultCreatedAt()
		wpc.mutation.SetCreatedAt(v)
	}
	if _, ok := wpc.mutation.UpdatedAt(); !ok {
		if warnpush.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpush.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpush.DefaultUpdatedAt()
		wpc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wpc *WarnPushCreate) check() error {
	if _, ok := wpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WarnPush.created_at"`)}
	}
	if _, ok := wpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WarnPush.updated_at"`)}
	}
	if _, ok := wpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WarnPush.name"`)}
	}
	if _, ok := wpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WarnPush.type"`)}
	}
	if v, ok := wpc.mutation.GetType(); ok {
		if err := warnpush.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WarnPush.type": %w`, err)}
		}
	}
	if _, ok := wpc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "WarnPush.url"`)}
	}
	if _, ok := wpc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "WarnPush.remark"`)}
	}
	if _, ok := wpc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "WarnPush.mode"`)}
	}
	if v, ok := wpc.mutation.Mode(); ok {
		if err := warnpush.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "WarnPush.mode": %w`, err)}
		}
	}
	if _, ok := wpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WarnPush.status"`)}
	}
	if v, ok := wpc.mutation.Status(); ok {
		if err := warnpush.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPush.status": %w`, err)}
		}
	}
	return nil
}

func (wpc *WarnPushCreate) sqlSave(ctx context.Context) (*WarnPush, error) {
	if err := wpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	wpc.mutation.id = &_node.ID
	wpc.mutation.done = true
	return _node, nil
}

func (wpc *WarnPushCreate) createSpec() (*WarnPush, *sqlgraph.CreateSpec) {
	var (
		_node = &WarnPush{config: wpc.config}
		_spec = sqlgraph.NewCreateSpec(warnpush.Table, sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = wpc.conflict
	if id, ok := wpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wpc.mutation.CreatedAt(); ok {
		_spec.SetField(warnpush.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wpc.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpush.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wpc.mutation.DeletedAt(); ok {
		_spec.SetField(warnpush.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wpc.mutation.TenantID(); ok {
		_spec.SetField(warnpush.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := wpc.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpush.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := wpc.mutation.Name(); ok {
		_spec.SetField(warnpush.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wpc.mutation.GetType(); ok {
		_spec.SetField(warnpush.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := wpc.mutation.URL(); ok {
		_spec.SetField(warnpush.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wpc.mutation.Remark(); ok {
		_spec.SetField(warnpush.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := wpc.mutation.Mode(); ok {
		_spec.SetField(warnpush.FieldMode, field.TypeEnum, value)
		_node.Mode = value
	}
	if value, ok := wpc.mutation.Status(); ok {
		_spec.SetField(warnpush.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnPush.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnPushUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wpc *WarnPushCreate) OnConflict(opts ...sql.ConflictOption) *WarnPushUpsertOne {
	wpc.conflict = opts
	return &WarnPushUpsertOne{
		create: wpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wpc *WarnPushCreate) OnConflictColumns(columns ...string) *WarnPushUpsertOne {
	wpc.conflict = append(wpc.conflict, sql.ConflictColumns(columns...))
	return &WarnPushUpsertOne{
		create: wpc,
	}
}

type (
	// WarnPushUpsertOne is the builder for "upsert"-ing
	//  one WarnPush node.
	WarnPushUpsertOne struct {
		create *WarnPushCreate
	}

	// WarnPushUpsert is the "OnConflict" setter.
	WarnPushUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushUpsert) SetUpdatedAt(v time.Time) *WarnPushUpsert {
	u.Set(warnpush.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateUpdatedAt() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushUpsert) SetDeletedAt(v time.Time) *WarnPushUpsert {
	u.Set(warnpush.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateDeletedAt() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushUpsert) ClearDeletedAt() *WarnPushUpsert {
	u.SetNull(warnpush.FieldDeletedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushUpsert) SetTenantID(v string) *WarnPushUpsert {
	u.Set(warnpush.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateTenantID() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushUpsert) ClearTenantID() *WarnPushUpsert {
	u.SetNull(warnpush.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushUpsert) SetAccessOrgList(v string) *WarnPushUpsert {
	u.Set(warnpush.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateAccessOrgList() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushUpsert) ClearAccessOrgList() *WarnPushUpsert {
	u.SetNull(warnpush.FieldAccessOrgList)
	return u
}

// SetName sets the "name" field.
func (u *WarnPushUpsert) SetName(v string) *WarnPushUpsert {
	u.Set(warnpush.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateName() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *WarnPushUpsert) SetType(v biz.WarnPushType) *WarnPushUpsert {
	u.Set(warnpush.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateType() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldType)
	return u
}

// SetURL sets the "url" field.
func (u *WarnPushUpsert) SetURL(v string) *WarnPushUpsert {
	u.Set(warnpush.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateURL() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldURL)
	return u
}

// SetRemark sets the "remark" field.
func (u *WarnPushUpsert) SetRemark(v string) *WarnPushUpsert {
	u.Set(warnpush.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateRemark() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldRemark)
	return u
}

// SetMode sets the "mode" field.
func (u *WarnPushUpsert) SetMode(v biz.WarnPushMode) *WarnPushUpsert {
	u.Set(warnpush.FieldMode, v)
	return u
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateMode() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldMode)
	return u
}

// SetStatus sets the "status" field.
func (u *WarnPushUpsert) SetStatus(v biz.WarnPushStatus) *WarnPushUpsert {
	u.Set(warnpush.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushUpsert) UpdateStatus() *WarnPushUpsert {
	u.SetExcluded(warnpush.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnpush.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnPushUpsertOne) UpdateNewValues() *WarnPushUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(warnpush.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warnpush.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarnPushUpsertOne) Ignore() *WarnPushUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnPushUpsertOne) DoNothing() *WarnPushUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnPushCreate.OnConflict
// documentation for more info.
func (u *WarnPushUpsertOne) Update(set func(*WarnPushUpsert)) *WarnPushUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnPushUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushUpsertOne) SetUpdatedAt(v time.Time) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateUpdatedAt() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushUpsertOne) SetDeletedAt(v time.Time) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateDeletedAt() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushUpsertOne) ClearDeletedAt() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushUpsertOne) SetTenantID(v string) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateTenantID() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushUpsertOne) ClearTenantID() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushUpsertOne) SetAccessOrgList(v string) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateAccessOrgList() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushUpsertOne) ClearAccessOrgList() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *WarnPushUpsertOne) SetName(v string) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateName() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WarnPushUpsertOne) SetType(v biz.WarnPushType) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateType() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *WarnPushUpsertOne) SetURL(v string) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateURL() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateURL()
	})
}

// SetRemark sets the "remark" field.
func (u *WarnPushUpsertOne) SetRemark(v string) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateRemark() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateRemark()
	})
}

// SetMode sets the "mode" field.
func (u *WarnPushUpsertOne) SetMode(v biz.WarnPushMode) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateMode() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateMode()
	})
}

// SetStatus sets the "status" field.
func (u *WarnPushUpsertOne) SetStatus(v biz.WarnPushStatus) *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushUpsertOne) UpdateStatus() *WarnPushUpsertOne {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarnPushUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnPushCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnPushUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarnPushUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarnPushUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarnPushCreateBulk is the builder for creating many WarnPush entities in bulk.
type WarnPushCreateBulk struct {
	config
	err      error
	builders []*WarnPushCreate
	conflict []sql.ConflictOption
}

// Save creates the WarnPush entities in the database.
func (wpcb *WarnPushCreateBulk) Save(ctx context.Context) ([]*WarnPush, error) {
	if wpcb.err != nil {
		return nil, wpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wpcb.builders))
	nodes := make([]*WarnPush, len(wpcb.builders))
	mutators := make([]Mutator, len(wpcb.builders))
	for i := range wpcb.builders {
		func(i int, root context.Context) {
			builder := wpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarnPushMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wpcb *WarnPushCreateBulk) SaveX(ctx context.Context) []*WarnPush {
	v, err := wpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpcb *WarnPushCreateBulk) Exec(ctx context.Context) error {
	_, err := wpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpcb *WarnPushCreateBulk) ExecX(ctx context.Context) {
	if err := wpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnPush.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnPushUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wpcb *WarnPushCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarnPushUpsertBulk {
	wpcb.conflict = opts
	return &WarnPushUpsertBulk{
		create: wpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wpcb *WarnPushCreateBulk) OnConflictColumns(columns ...string) *WarnPushUpsertBulk {
	wpcb.conflict = append(wpcb.conflict, sql.ConflictColumns(columns...))
	return &WarnPushUpsertBulk{
		create: wpcb,
	}
}

// WarnPushUpsertBulk is the builder for "upsert"-ing
// a bulk of WarnPush nodes.
type WarnPushUpsertBulk struct {
	create *WarnPushCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnpush.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnPushUpsertBulk) UpdateNewValues() *WarnPushUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(warnpush.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warnpush.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnPush.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarnPushUpsertBulk) Ignore() *WarnPushUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnPushUpsertBulk) DoNothing() *WarnPushUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnPushCreateBulk.OnConflict
// documentation for more info.
func (u *WarnPushUpsertBulk) Update(set func(*WarnPushUpsert)) *WarnPushUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnPushUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushUpsertBulk) SetUpdatedAt(v time.Time) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateUpdatedAt() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushUpsertBulk) SetDeletedAt(v time.Time) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateDeletedAt() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushUpsertBulk) ClearDeletedAt() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushUpsertBulk) SetTenantID(v string) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateTenantID() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushUpsertBulk) ClearTenantID() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushUpsertBulk) SetAccessOrgList(v string) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateAccessOrgList() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushUpsertBulk) ClearAccessOrgList() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *WarnPushUpsertBulk) SetName(v string) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateName() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WarnPushUpsertBulk) SetType(v biz.WarnPushType) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateType() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *WarnPushUpsertBulk) SetURL(v string) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateURL() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateURL()
	})
}

// SetRemark sets the "remark" field.
func (u *WarnPushUpsertBulk) SetRemark(v string) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateRemark() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateRemark()
	})
}

// SetMode sets the "mode" field.
func (u *WarnPushUpsertBulk) SetMode(v biz.WarnPushMode) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateMode() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateMode()
	})
}

// SetStatus sets the "status" field.
func (u *WarnPushUpsertBulk) SetStatus(v biz.WarnPushStatus) *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushUpsertBulk) UpdateStatus() *WarnPushUpsertBulk {
	return u.Update(func(s *WarnPushUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarnPushUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WarnPushCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnPushCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnPushUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
