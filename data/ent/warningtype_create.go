// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/warningtype"
)

// WarningTypeCreate is the builder for creating a WarningType entity.
type WarningTypeCreate struct {
	config
	mutation *WarningTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wtc *WarningTypeCreate) SetCreatedAt(t time.Time) *WarningTypeCreate {
	wtc.mutation.SetCreatedAt(t)
	return wtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wtc *WarningTypeCreate) SetNillableCreatedAt(t *time.Time) *WarningTypeCreate {
	if t != nil {
		wtc.SetCreatedAt(*t)
	}
	return wtc
}

// SetUpdatedAt sets the "updated_at" field.
func (wtc *WarningTypeCreate) SetUpdatedAt(t time.Time) *WarningTypeCreate {
	wtc.mutation.SetUpdatedAt(t)
	return wtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wtc *WarningTypeCreate) SetNillableUpdatedAt(t *time.Time) *WarningTypeCreate {
	if t != nil {
		wtc.SetUpdatedAt(*t)
	}
	return wtc
}

// SetDeletedAt sets the "deleted_at" field.
func (wtc *WarningTypeCreate) SetDeletedAt(t time.Time) *WarningTypeCreate {
	wtc.mutation.SetDeletedAt(t)
	return wtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtc *WarningTypeCreate) SetNillableDeletedAt(t *time.Time) *WarningTypeCreate {
	if t != nil {
		wtc.SetDeletedAt(*t)
	}
	return wtc
}

// SetAlarmType sets the "alarm_type" field.
func (wtc *WarningTypeCreate) SetAlarmType(s string) *WarningTypeCreate {
	wtc.mutation.SetAlarmType(s)
	return wtc
}

// SetAlarmName sets the "alarm_name" field.
func (wtc *WarningTypeCreate) SetAlarmName(s string) *WarningTypeCreate {
	wtc.mutation.SetAlarmName(s)
	return wtc
}

// SetID sets the "id" field.
func (wtc *WarningTypeCreate) SetID(u uint64) *WarningTypeCreate {
	wtc.mutation.SetID(u)
	return wtc
}

// Mutation returns the WarningTypeMutation object of the builder.
func (wtc *WarningTypeCreate) Mutation() *WarningTypeMutation {
	return wtc.mutation
}

// Save creates the WarningType in the database.
func (wtc *WarningTypeCreate) Save(ctx context.Context) (*WarningType, error) {
	if err := wtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wtc.sqlSave, wtc.mutation, wtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wtc *WarningTypeCreate) SaveX(ctx context.Context) *WarningType {
	v, err := wtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtc *WarningTypeCreate) Exec(ctx context.Context) error {
	_, err := wtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtc *WarningTypeCreate) ExecX(ctx context.Context) {
	if err := wtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtc *WarningTypeCreate) defaults() error {
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		if warningtype.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized warningtype.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := warningtype.DefaultCreatedAt()
		wtc.mutation.SetCreatedAt(v)
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		if warningtype.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warningtype.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warningtype.DefaultUpdatedAt()
		wtc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wtc *WarningTypeCreate) check() error {
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WarningType.created_at"`)}
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WarningType.updated_at"`)}
	}
	if _, ok := wtc.mutation.AlarmType(); !ok {
		return &ValidationError{Name: "alarm_type", err: errors.New(`ent: missing required field "WarningType.alarm_type"`)}
	}
	if _, ok := wtc.mutation.AlarmName(); !ok {
		return &ValidationError{Name: "alarm_name", err: errors.New(`ent: missing required field "WarningType.alarm_name"`)}
	}
	return nil
}

func (wtc *WarningTypeCreate) sqlSave(ctx context.Context) (*WarningType, error) {
	if err := wtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	wtc.mutation.id = &_node.ID
	wtc.mutation.done = true
	return _node, nil
}

func (wtc *WarningTypeCreate) createSpec() (*WarningType, *sqlgraph.CreateSpec) {
	var (
		_node = &WarningType{config: wtc.config}
		_spec = sqlgraph.NewCreateSpec(warningtype.Table, sqlgraph.NewFieldSpec(warningtype.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = wtc.conflict
	if id, ok := wtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wtc.mutation.CreatedAt(); ok {
		_spec.SetField(warningtype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wtc.mutation.UpdatedAt(); ok {
		_spec.SetField(warningtype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wtc.mutation.DeletedAt(); ok {
		_spec.SetField(warningtype.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wtc.mutation.AlarmType(); ok {
		_spec.SetField(warningtype.FieldAlarmType, field.TypeString, value)
		_node.AlarmType = value
	}
	if value, ok := wtc.mutation.AlarmName(); ok {
		_spec.SetField(warningtype.FieldAlarmName, field.TypeString, value)
		_node.AlarmName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarningType.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarningTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wtc *WarningTypeCreate) OnConflict(opts ...sql.ConflictOption) *WarningTypeUpsertOne {
	wtc.conflict = opts
	return &WarningTypeUpsertOne{
		create: wtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarningType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wtc *WarningTypeCreate) OnConflictColumns(columns ...string) *WarningTypeUpsertOne {
	wtc.conflict = append(wtc.conflict, sql.ConflictColumns(columns...))
	return &WarningTypeUpsertOne{
		create: wtc,
	}
}

type (
	// WarningTypeUpsertOne is the builder for "upsert"-ing
	//  one WarningType node.
	WarningTypeUpsertOne struct {
		create *WarningTypeCreate
	}

	// WarningTypeUpsert is the "OnConflict" setter.
	WarningTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarningTypeUpsert) SetUpdatedAt(v time.Time) *WarningTypeUpsert {
	u.Set(warningtype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarningTypeUpsert) UpdateUpdatedAt() *WarningTypeUpsert {
	u.SetExcluded(warningtype.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarningTypeUpsert) SetDeletedAt(v time.Time) *WarningTypeUpsert {
	u.Set(warningtype.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarningTypeUpsert) UpdateDeletedAt() *WarningTypeUpsert {
	u.SetExcluded(warningtype.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarningTypeUpsert) ClearDeletedAt() *WarningTypeUpsert {
	u.SetNull(warningtype.FieldDeletedAt)
	return u
}

// SetAlarmType sets the "alarm_type" field.
func (u *WarningTypeUpsert) SetAlarmType(v string) *WarningTypeUpsert {
	u.Set(warningtype.FieldAlarmType, v)
	return u
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *WarningTypeUpsert) UpdateAlarmType() *WarningTypeUpsert {
	u.SetExcluded(warningtype.FieldAlarmType)
	return u
}

// SetAlarmName sets the "alarm_name" field.
func (u *WarningTypeUpsert) SetAlarmName(v string) *WarningTypeUpsert {
	u.Set(warningtype.FieldAlarmName, v)
	return u
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *WarningTypeUpsert) UpdateAlarmName() *WarningTypeUpsert {
	u.SetExcluded(warningtype.FieldAlarmName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WarningType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warningtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarningTypeUpsertOne) UpdateNewValues() *WarningTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(warningtype.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warningtype.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarningType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarningTypeUpsertOne) Ignore() *WarningTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarningTypeUpsertOne) DoNothing() *WarningTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarningTypeCreate.OnConflict
// documentation for more info.
func (u *WarningTypeUpsertOne) Update(set func(*WarningTypeUpsert)) *WarningTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarningTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarningTypeUpsertOne) SetUpdatedAt(v time.Time) *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarningTypeUpsertOne) UpdateUpdatedAt() *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarningTypeUpsertOne) SetDeletedAt(v time.Time) *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarningTypeUpsertOne) UpdateDeletedAt() *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarningTypeUpsertOne) ClearDeletedAt() *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *WarningTypeUpsertOne) SetAlarmType(v string) *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *WarningTypeUpsertOne) UpdateAlarmType() *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateAlarmType()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *WarningTypeUpsertOne) SetAlarmName(v string) *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *WarningTypeUpsertOne) UpdateAlarmName() *WarningTypeUpsertOne {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateAlarmName()
	})
}

// Exec executes the query.
func (u *WarningTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarningTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarningTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarningTypeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarningTypeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarningTypeCreateBulk is the builder for creating many WarningType entities in bulk.
type WarningTypeCreateBulk struct {
	config
	err      error
	builders []*WarningTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the WarningType entities in the database.
func (wtcb *WarningTypeCreateBulk) Save(ctx context.Context) ([]*WarningType, error) {
	if wtcb.err != nil {
		return nil, wtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wtcb.builders))
	nodes := make([]*WarningType, len(wtcb.builders))
	mutators := make([]Mutator, len(wtcb.builders))
	for i := range wtcb.builders {
		func(i int, root context.Context) {
			builder := wtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarningTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wtcb *WarningTypeCreateBulk) SaveX(ctx context.Context) []*WarningType {
	v, err := wtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtcb *WarningTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := wtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtcb *WarningTypeCreateBulk) ExecX(ctx context.Context) {
	if err := wtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarningType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarningTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wtcb *WarningTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarningTypeUpsertBulk {
	wtcb.conflict = opts
	return &WarningTypeUpsertBulk{
		create: wtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarningType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wtcb *WarningTypeCreateBulk) OnConflictColumns(columns ...string) *WarningTypeUpsertBulk {
	wtcb.conflict = append(wtcb.conflict, sql.ConflictColumns(columns...))
	return &WarningTypeUpsertBulk{
		create: wtcb,
	}
}

// WarningTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of WarningType nodes.
type WarningTypeUpsertBulk struct {
	create *WarningTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WarningType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warningtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarningTypeUpsertBulk) UpdateNewValues() *WarningTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(warningtype.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warningtype.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarningType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarningTypeUpsertBulk) Ignore() *WarningTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarningTypeUpsertBulk) DoNothing() *WarningTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarningTypeCreateBulk.OnConflict
// documentation for more info.
func (u *WarningTypeUpsertBulk) Update(set func(*WarningTypeUpsert)) *WarningTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarningTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarningTypeUpsertBulk) SetUpdatedAt(v time.Time) *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarningTypeUpsertBulk) UpdateUpdatedAt() *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarningTypeUpsertBulk) SetDeletedAt(v time.Time) *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarningTypeUpsertBulk) UpdateDeletedAt() *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarningTypeUpsertBulk) ClearDeletedAt() *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *WarningTypeUpsertBulk) SetAlarmType(v string) *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *WarningTypeUpsertBulk) UpdateAlarmType() *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateAlarmType()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *WarningTypeUpsertBulk) SetAlarmName(v string) *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *WarningTypeUpsertBulk) UpdateAlarmName() *WarningTypeUpsertBulk {
	return u.Update(func(s *WarningTypeUpsert) {
		s.UpdateAlarmName()
	})
}

// Exec executes the query.
func (u *WarningTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WarningTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarningTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarningTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
