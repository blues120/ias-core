// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicecamera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeviceCreate) SetCreatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeviceCreate) SetUpdatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DeviceCreate) SetDeletedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeletedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetTenantID sets the "tenant_id" field.
func (dc *DeviceCreate) SetTenantID(s string) *DeviceCreate {
	dc.mutation.SetTenantID(s)
	return dc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableTenantID(s *string) *DeviceCreate {
	if s != nil {
		dc.SetTenantID(*s)
	}
	return dc
}

// SetAccessOrgList sets the "access_org_list" field.
func (dc *DeviceCreate) SetAccessOrgList(s string) *DeviceCreate {
	dc.mutation.SetAccessOrgList(s)
	return dc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableAccessOrgList(s *string) *DeviceCreate {
	if s != nil {
		dc.SetAccessOrgList(*s)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DeviceCreate) SetName(s string) *DeviceCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetDisplayName sets the "display_name" field.
func (dc *DeviceCreate) SetDisplayName(s string) *DeviceCreate {
	dc.mutation.SetDisplayName(s)
	return dc
}

// SetType sets the "type" field.
func (dc *DeviceCreate) SetType(bdt biz.EdgeDeviceType) *DeviceCreate {
	dc.mutation.SetType(bdt)
	return dc
}

// SetExtID sets the "ext_id" field.
func (dc *DeviceCreate) SetExtID(s string) *DeviceCreate {
	dc.mutation.SetExtID(s)
	return dc
}

// SetSerialNo sets the "serial_no" field.
func (dc *DeviceCreate) SetSerialNo(s string) *DeviceCreate {
	dc.mutation.SetSerialNo(s)
	return dc
}

// SetState sets the "state" field.
func (dc *DeviceCreate) SetState(bs biz.DeviceState) *DeviceCreate {
	dc.mutation.SetState(bs)
	return dc
}

// SetMAC sets the "mac" field.
func (dc *DeviceCreate) SetMAC(s string) *DeviceCreate {
	dc.mutation.SetMAC(s)
	return dc
}

// SetZoneName sets the "zone_name" field.
func (dc *DeviceCreate) SetZoneName(s string) *DeviceCreate {
	dc.mutation.SetZoneName(s)
	return dc
}

// SetZoneID sets the "zone_id" field.
func (dc *DeviceCreate) SetZoneID(s string) *DeviceCreate {
	dc.mutation.SetZoneID(s)
	return dc
}

// SetWorkspaceID sets the "workspace_id" field.
func (dc *DeviceCreate) SetWorkspaceID(s string) *DeviceCreate {
	dc.mutation.SetWorkspaceID(s)
	return dc
}

// SetEquipID sets the "equip_id" field.
func (dc *DeviceCreate) SetEquipID(s string) *DeviceCreate {
	dc.mutation.SetEquipID(s)
	return dc
}

// SetEquipPassword sets the "equip_password" field.
func (dc *DeviceCreate) SetEquipPassword(s string) *DeviceCreate {
	dc.mutation.SetEquipPassword(s)
	return dc
}

// SetDeviceInfo sets the "device_info" field.
func (dc *DeviceCreate) SetDeviceInfo(s string) *DeviceCreate {
	dc.mutation.SetDeviceInfo(s)
	return dc
}

// SetModel sets the "model" field.
func (dc *DeviceCreate) SetModel(s string) *DeviceCreate {
	dc.mutation.SetModel(s)
	return dc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableModel(s *string) *DeviceCreate {
	if s != nil {
		dc.SetModel(*s)
	}
	return dc
}

// SetAuthDeadline sets the "auth_deadline" field.
func (dc *DeviceCreate) SetAuthDeadline(i int64) *DeviceCreate {
	dc.mutation.SetAuthDeadline(i)
	return dc
}

// SetNillableAuthDeadline sets the "auth_deadline" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableAuthDeadline(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetAuthDeadline(*i)
	}
	return dc
}

// SetActivatedAt sets the "activated_at" field.
func (dc *DeviceCreate) SetActivatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetActivatedAt(t)
	return dc
}

// SetID sets the "id" field.
func (dc *DeviceCreate) SetID(u uint64) *DeviceCreate {
	dc.mutation.SetID(u)
	return dc
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (dc *DeviceCreate) AddCameraIDs(ids ...uint64) *DeviceCreate {
	dc.mutation.AddCameraIDs(ids...)
	return dc
}

// AddCamera adds the "camera" edges to the Camera entity.
func (dc *DeviceCreate) AddCamera(c ...*Camera) *DeviceCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dc.AddCameraIDs(ids...)
}

// AddTaskDeviceIDs adds the "task_device" edge to the Task entity by IDs.
func (dc *DeviceCreate) AddTaskDeviceIDs(ids ...uint64) *DeviceCreate {
	dc.mutation.AddTaskDeviceIDs(ids...)
	return dc
}

// AddTaskDevice adds the "task_device" edges to the Task entity.
func (dc *DeviceCreate) AddTaskDevice(t ...*Task) *DeviceCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTaskDeviceIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (dc *DeviceCreate) AddDeviceCameraIDs(ids ...uint64) *DeviceCreate {
	dc.mutation.AddDeviceCameraIDs(ids...)
	return dc
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (dc *DeviceCreate) AddDeviceCamera(d ...*DeviceCamera) *DeviceCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDeviceCameraIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if device.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized device.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := device.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if device.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized device.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := device.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Device.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Device.updated_at"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Device.name"`)}
	}
	if _, ok := dc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Device.display_name"`)}
	}
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Device.type"`)}
	}
	if v, ok := dc.mutation.GetType(); ok {
		if err := device.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Device.type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.ExtID(); !ok {
		return &ValidationError{Name: "ext_id", err: errors.New(`ent: missing required field "Device.ext_id"`)}
	}
	if _, ok := dc.mutation.SerialNo(); !ok {
		return &ValidationError{Name: "serial_no", err: errors.New(`ent: missing required field "Device.serial_no"`)}
	}
	if _, ok := dc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Device.state"`)}
	}
	if v, ok := dc.mutation.State(); ok {
		if err := device.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Device.state": %w`, err)}
		}
	}
	if _, ok := dc.mutation.MAC(); !ok {
		return &ValidationError{Name: "mac", err: errors.New(`ent: missing required field "Device.mac"`)}
	}
	if _, ok := dc.mutation.ZoneName(); !ok {
		return &ValidationError{Name: "zone_name", err: errors.New(`ent: missing required field "Device.zone_name"`)}
	}
	if _, ok := dc.mutation.ZoneID(); !ok {
		return &ValidationError{Name: "zone_id", err: errors.New(`ent: missing required field "Device.zone_id"`)}
	}
	if _, ok := dc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "Device.workspace_id"`)}
	}
	if _, ok := dc.mutation.EquipID(); !ok {
		return &ValidationError{Name: "equip_id", err: errors.New(`ent: missing required field "Device.equip_id"`)}
	}
	if _, ok := dc.mutation.EquipPassword(); !ok {
		return &ValidationError{Name: "equip_password", err: errors.New(`ent: missing required field "Device.equip_password"`)}
	}
	if _, ok := dc.mutation.DeviceInfo(); !ok {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required field "Device.device_info"`)}
	}
	if _, ok := dc.mutation.ActivatedAt(); !ok {
		return &ValidationError{Name: "activated_at", err: errors.New(`ent: missing required field "Device.activated_at"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.TenantID(); ok {
		_spec.SetField(device.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := dc.mutation.AccessOrgList(); ok {
		_spec.SetField(device.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.DisplayName(); ok {
		_spec.SetField(device.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dc.mutation.ExtID(); ok {
		_spec.SetField(device.FieldExtID, field.TypeString, value)
		_node.ExtID = value
	}
	if value, ok := dc.mutation.SerialNo(); ok {
		_spec.SetField(device.FieldSerialNo, field.TypeString, value)
		_node.SerialNo = value
	}
	if value, ok := dc.mutation.State(); ok {
		_spec.SetField(device.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := dc.mutation.MAC(); ok {
		_spec.SetField(device.FieldMAC, field.TypeString, value)
		_node.MAC = value
	}
	if value, ok := dc.mutation.ZoneName(); ok {
		_spec.SetField(device.FieldZoneName, field.TypeString, value)
		_node.ZoneName = value
	}
	if value, ok := dc.mutation.ZoneID(); ok {
		_spec.SetField(device.FieldZoneID, field.TypeString, value)
		_node.ZoneID = value
	}
	if value, ok := dc.mutation.WorkspaceID(); ok {
		_spec.SetField(device.FieldWorkspaceID, field.TypeString, value)
		_node.WorkspaceID = value
	}
	if value, ok := dc.mutation.EquipID(); ok {
		_spec.SetField(device.FieldEquipID, field.TypeString, value)
		_node.EquipID = value
	}
	if value, ok := dc.mutation.EquipPassword(); ok {
		_spec.SetField(device.FieldEquipPassword, field.TypeString, value)
		_node.EquipPassword = value
	}
	if value, ok := dc.mutation.DeviceInfo(); ok {
		_spec.SetField(device.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if value, ok := dc.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := dc.mutation.AuthDeadline(); ok {
		_spec.SetField(device.FieldAuthDeadline, field.TypeInt64, value)
		_node.AuthDeadline = value
	}
	if value, ok := dc.mutation.ActivatedAt(); ok {
		_spec.SetField(device.FieldActivatedAt, field.TypeTime, value)
		_node.ActivatedAt = value
	}
	if nodes := dc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: dc.config, mutation: newDeviceCameraMutation(dc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.TaskDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertOne {
	dc.conflict = opts
	return &DeviceUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflictColumns(columns ...string) *DeviceUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertOne{
		create: dc,
	}
}

type (
	// DeviceUpsertOne is the builder for "upsert"-ing
	//  one Device node.
	DeviceUpsertOne struct {
		create *DeviceCreate
	}

	// DeviceUpsert is the "OnConflict" setter.
	DeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsert) SetUpdatedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateUpdatedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsert) SetDeletedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDeletedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DeviceUpsert) ClearDeletedAt() *DeviceUpsert {
	u.SetNull(device.FieldDeletedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeviceUpsert) SetTenantID(v string) *DeviceUpsert {
	u.Set(device.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateTenantID() *DeviceUpsert {
	u.SetExcluded(device.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *DeviceUpsert) ClearTenantID() *DeviceUpsert {
	u.SetNull(device.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *DeviceUpsert) SetAccessOrgList(v string) *DeviceUpsert {
	u.Set(device.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateAccessOrgList() *DeviceUpsert {
	u.SetExcluded(device.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *DeviceUpsert) ClearAccessOrgList() *DeviceUpsert {
	u.SetNull(device.FieldAccessOrgList)
	return u
}

// SetName sets the "name" field.
func (u *DeviceUpsert) SetName(v string) *DeviceUpsert {
	u.Set(device.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateName() *DeviceUpsert {
	u.SetExcluded(device.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *DeviceUpsert) SetDisplayName(v string) *DeviceUpsert {
	u.Set(device.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDisplayName() *DeviceUpsert {
	u.SetExcluded(device.FieldDisplayName)
	return u
}

// SetType sets the "type" field.
func (u *DeviceUpsert) SetType(v biz.EdgeDeviceType) *DeviceUpsert {
	u.Set(device.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateType() *DeviceUpsert {
	u.SetExcluded(device.FieldType)
	return u
}

// SetExtID sets the "ext_id" field.
func (u *DeviceUpsert) SetExtID(v string) *DeviceUpsert {
	u.Set(device.FieldExtID, v)
	return u
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateExtID() *DeviceUpsert {
	u.SetExcluded(device.FieldExtID)
	return u
}

// SetSerialNo sets the "serial_no" field.
func (u *DeviceUpsert) SetSerialNo(v string) *DeviceUpsert {
	u.Set(device.FieldSerialNo, v)
	return u
}

// UpdateSerialNo sets the "serial_no" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateSerialNo() *DeviceUpsert {
	u.SetExcluded(device.FieldSerialNo)
	return u
}

// SetState sets the "state" field.
func (u *DeviceUpsert) SetState(v biz.DeviceState) *DeviceUpsert {
	u.Set(device.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateState() *DeviceUpsert {
	u.SetExcluded(device.FieldState)
	return u
}

// SetMAC sets the "mac" field.
func (u *DeviceUpsert) SetMAC(v string) *DeviceUpsert {
	u.Set(device.FieldMAC, v)
	return u
}

// UpdateMAC sets the "mac" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateMAC() *DeviceUpsert {
	u.SetExcluded(device.FieldMAC)
	return u
}

// SetZoneName sets the "zone_name" field.
func (u *DeviceUpsert) SetZoneName(v string) *DeviceUpsert {
	u.Set(device.FieldZoneName, v)
	return u
}

// UpdateZoneName sets the "zone_name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateZoneName() *DeviceUpsert {
	u.SetExcluded(device.FieldZoneName)
	return u
}

// SetZoneID sets the "zone_id" field.
func (u *DeviceUpsert) SetZoneID(v string) *DeviceUpsert {
	u.Set(device.FieldZoneID, v)
	return u
}

// UpdateZoneID sets the "zone_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateZoneID() *DeviceUpsert {
	u.SetExcluded(device.FieldZoneID)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *DeviceUpsert) SetWorkspaceID(v string) *DeviceUpsert {
	u.Set(device.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateWorkspaceID() *DeviceUpsert {
	u.SetExcluded(device.FieldWorkspaceID)
	return u
}

// SetEquipID sets the "equip_id" field.
func (u *DeviceUpsert) SetEquipID(v string) *DeviceUpsert {
	u.Set(device.FieldEquipID, v)
	return u
}

// UpdateEquipID sets the "equip_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateEquipID() *DeviceUpsert {
	u.SetExcluded(device.FieldEquipID)
	return u
}

// SetEquipPassword sets the "equip_password" field.
func (u *DeviceUpsert) SetEquipPassword(v string) *DeviceUpsert {
	u.Set(device.FieldEquipPassword, v)
	return u
}

// UpdateEquipPassword sets the "equip_password" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateEquipPassword() *DeviceUpsert {
	u.SetExcluded(device.FieldEquipPassword)
	return u
}

// SetDeviceInfo sets the "device_info" field.
func (u *DeviceUpsert) SetDeviceInfo(v string) *DeviceUpsert {
	u.Set(device.FieldDeviceInfo, v)
	return u
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDeviceInfo() *DeviceUpsert {
	u.SetExcluded(device.FieldDeviceInfo)
	return u
}

// SetModel sets the "model" field.
func (u *DeviceUpsert) SetModel(v string) *DeviceUpsert {
	u.Set(device.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateModel() *DeviceUpsert {
	u.SetExcluded(device.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *DeviceUpsert) ClearModel() *DeviceUpsert {
	u.SetNull(device.FieldModel)
	return u
}

// SetAuthDeadline sets the "auth_deadline" field.
func (u *DeviceUpsert) SetAuthDeadline(v int64) *DeviceUpsert {
	u.Set(device.FieldAuthDeadline, v)
	return u
}

// UpdateAuthDeadline sets the "auth_deadline" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateAuthDeadline() *DeviceUpsert {
	u.SetExcluded(device.FieldAuthDeadline)
	return u
}

// AddAuthDeadline adds v to the "auth_deadline" field.
func (u *DeviceUpsert) AddAuthDeadline(v int64) *DeviceUpsert {
	u.Add(device.FieldAuthDeadline, v)
	return u
}

// ClearAuthDeadline clears the value of the "auth_deadline" field.
func (u *DeviceUpsert) ClearAuthDeadline() *DeviceUpsert {
	u.SetNull(device.FieldAuthDeadline)
	return u
}

// SetActivatedAt sets the "activated_at" field.
func (u *DeviceUpsert) SetActivatedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldActivatedAt, v)
	return u
}

// UpdateActivatedAt sets the "activated_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateActivatedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldActivatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertOne) UpdateNewValues() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(device.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(device.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceUpsertOne) Ignore() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertOne) DoNothing() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreate.OnConflict
// documentation for more info.
func (u *DeviceUpsertOne) Update(set func(*DeviceUpsert)) *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertOne) SetUpdatedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateUpdatedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsertOne) SetDeletedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDeletedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DeviceUpsertOne) ClearDeletedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *DeviceUpsertOne) SetTenantID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateTenantID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *DeviceUpsertOne) ClearTenantID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *DeviceUpsertOne) SetAccessOrgList(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateAccessOrgList() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *DeviceUpsertOne) ClearAccessOrgList() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *DeviceUpsertOne) SetName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *DeviceUpsertOne) SetDisplayName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDisplayName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDisplayName()
	})
}

// SetType sets the "type" field.
func (u *DeviceUpsertOne) SetType(v biz.EdgeDeviceType) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateType() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateType()
	})
}

// SetExtID sets the "ext_id" field.
func (u *DeviceUpsertOne) SetExtID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetExtID(v)
	})
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateExtID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateExtID()
	})
}

// SetSerialNo sets the "serial_no" field.
func (u *DeviceUpsertOne) SetSerialNo(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSerialNo(v)
	})
}

// UpdateSerialNo sets the "serial_no" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateSerialNo() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSerialNo()
	})
}

// SetState sets the "state" field.
func (u *DeviceUpsertOne) SetState(v biz.DeviceState) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateState() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateState()
	})
}

// SetMAC sets the "mac" field.
func (u *DeviceUpsertOne) SetMAC(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetMAC(v)
	})
}

// UpdateMAC sets the "mac" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateMAC() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateMAC()
	})
}

// SetZoneName sets the "zone_name" field.
func (u *DeviceUpsertOne) SetZoneName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetZoneName(v)
	})
}

// UpdateZoneName sets the "zone_name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateZoneName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateZoneName()
	})
}

// SetZoneID sets the "zone_id" field.
func (u *DeviceUpsertOne) SetZoneID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetZoneID(v)
	})
}

// UpdateZoneID sets the "zone_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateZoneID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateZoneID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *DeviceUpsertOne) SetWorkspaceID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateWorkspaceID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetEquipID sets the "equip_id" field.
func (u *DeviceUpsertOne) SetEquipID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetEquipID(v)
	})
}

// UpdateEquipID sets the "equip_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateEquipID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateEquipID()
	})
}

// SetEquipPassword sets the "equip_password" field.
func (u *DeviceUpsertOne) SetEquipPassword(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetEquipPassword(v)
	})
}

// UpdateEquipPassword sets the "equip_password" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateEquipPassword() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateEquipPassword()
	})
}

// SetDeviceInfo sets the "device_info" field.
func (u *DeviceUpsertOne) SetDeviceInfo(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeviceInfo(v)
	})
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDeviceInfo() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeviceInfo()
	})
}

// SetModel sets the "model" field.
func (u *DeviceUpsertOne) SetModel(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateModel() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *DeviceUpsertOne) ClearModel() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearModel()
	})
}

// SetAuthDeadline sets the "auth_deadline" field.
func (u *DeviceUpsertOne) SetAuthDeadline(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetAuthDeadline(v)
	})
}

// AddAuthDeadline adds v to the "auth_deadline" field.
func (u *DeviceUpsertOne) AddAuthDeadline(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddAuthDeadline(v)
	})
}

// UpdateAuthDeadline sets the "auth_deadline" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateAuthDeadline() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateAuthDeadline()
	})
}

// ClearAuthDeadline clears the value of the "auth_deadline" field.
func (u *DeviceUpsertOne) ClearAuthDeadline() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearAuthDeadline()
	})
}

// SetActivatedAt sets the "activated_at" field.
func (u *DeviceUpsertOne) SetActivatedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetActivatedAt(v)
	})
}

// UpdateActivatedAt sets the "activated_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateActivatedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateActivatedAt()
	})
}

// Exec executes the query.
func (u *DeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertBulk {
	dcb.conflict = opts
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflictColumns(columns ...string) *DeviceUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// DeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of Device nodes.
type DeviceUpsertBulk struct {
	create *DeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertBulk) UpdateNewValues() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(device.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(device.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceUpsertBulk) Ignore() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertBulk) DoNothing() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceUpsertBulk) Update(set func(*DeviceUpsert)) *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertBulk) SetUpdatedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateUpdatedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsertBulk) SetDeletedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDeletedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DeviceUpsertBulk) ClearDeletedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *DeviceUpsertBulk) SetTenantID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateTenantID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *DeviceUpsertBulk) ClearTenantID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *DeviceUpsertBulk) SetAccessOrgList(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateAccessOrgList() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *DeviceUpsertBulk) ClearAccessOrgList() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *DeviceUpsertBulk) SetName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *DeviceUpsertBulk) SetDisplayName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDisplayName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDisplayName()
	})
}

// SetType sets the "type" field.
func (u *DeviceUpsertBulk) SetType(v biz.EdgeDeviceType) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateType() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateType()
	})
}

// SetExtID sets the "ext_id" field.
func (u *DeviceUpsertBulk) SetExtID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetExtID(v)
	})
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateExtID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateExtID()
	})
}

// SetSerialNo sets the "serial_no" field.
func (u *DeviceUpsertBulk) SetSerialNo(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSerialNo(v)
	})
}

// UpdateSerialNo sets the "serial_no" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateSerialNo() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSerialNo()
	})
}

// SetState sets the "state" field.
func (u *DeviceUpsertBulk) SetState(v biz.DeviceState) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateState() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateState()
	})
}

// SetMAC sets the "mac" field.
func (u *DeviceUpsertBulk) SetMAC(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetMAC(v)
	})
}

// UpdateMAC sets the "mac" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateMAC() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateMAC()
	})
}

// SetZoneName sets the "zone_name" field.
func (u *DeviceUpsertBulk) SetZoneName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetZoneName(v)
	})
}

// UpdateZoneName sets the "zone_name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateZoneName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateZoneName()
	})
}

// SetZoneID sets the "zone_id" field.
func (u *DeviceUpsertBulk) SetZoneID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetZoneID(v)
	})
}

// UpdateZoneID sets the "zone_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateZoneID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateZoneID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *DeviceUpsertBulk) SetWorkspaceID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateWorkspaceID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetEquipID sets the "equip_id" field.
func (u *DeviceUpsertBulk) SetEquipID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetEquipID(v)
	})
}

// UpdateEquipID sets the "equip_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateEquipID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateEquipID()
	})
}

// SetEquipPassword sets the "equip_password" field.
func (u *DeviceUpsertBulk) SetEquipPassword(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetEquipPassword(v)
	})
}

// UpdateEquipPassword sets the "equip_password" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateEquipPassword() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateEquipPassword()
	})
}

// SetDeviceInfo sets the "device_info" field.
func (u *DeviceUpsertBulk) SetDeviceInfo(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeviceInfo(v)
	})
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDeviceInfo() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeviceInfo()
	})
}

// SetModel sets the "model" field.
func (u *DeviceUpsertBulk) SetModel(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateModel() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *DeviceUpsertBulk) ClearModel() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearModel()
	})
}

// SetAuthDeadline sets the "auth_deadline" field.
func (u *DeviceUpsertBulk) SetAuthDeadline(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetAuthDeadline(v)
	})
}

// AddAuthDeadline adds v to the "auth_deadline" field.
func (u *DeviceUpsertBulk) AddAuthDeadline(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddAuthDeadline(v)
	})
}

// UpdateAuthDeadline sets the "auth_deadline" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateAuthDeadline() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateAuthDeadline()
	})
}

// ClearAuthDeadline clears the value of the "auth_deadline" field.
func (u *DeviceUpsertBulk) ClearAuthDeadline() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearAuthDeadline()
	})
}

// SetActivatedAt sets the "activated_at" field.
func (u *DeviceUpsertBulk) SetActivatedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetActivatedAt(v)
	})
}

// UpdateActivatedAt sets the "activated_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateActivatedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateActivatedAt()
	})
}

// Exec executes the query.
func (u *DeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
