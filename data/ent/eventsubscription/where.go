// Code generated by ent, DO NOT EDIT.

package eventsubscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// BoxID applies equality check predicate on the "box_id" field. It's identical to BoxIDEQ.
func BoxID(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldBoxID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldChannelID, v))
}

// Callback applies equality check predicate on the "callback" field. It's identical to CallbackEQ.
func Callback(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldCallback, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldTemplateID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotNull(FieldDeletedAt))
}

// BoxIDEQ applies the EQ predicate on the "box_id" field.
func BoxIDEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldBoxID, v))
}

// BoxIDNEQ applies the NEQ predicate on the "box_id" field.
func BoxIDNEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldBoxID, v))
}

// BoxIDIn applies the In predicate on the "box_id" field.
func BoxIDIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldBoxID, vs...))
}

// BoxIDNotIn applies the NotIn predicate on the "box_id" field.
func BoxIDNotIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldBoxID, vs...))
}

// BoxIDGT applies the GT predicate on the "box_id" field.
func BoxIDGT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldBoxID, v))
}

// BoxIDGTE applies the GTE predicate on the "box_id" field.
func BoxIDGTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldBoxID, v))
}

// BoxIDLT applies the LT predicate on the "box_id" field.
func BoxIDLT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldBoxID, v))
}

// BoxIDLTE applies the LTE predicate on the "box_id" field.
func BoxIDLTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldBoxID, v))
}

// BoxIDContains applies the Contains predicate on the "box_id" field.
func BoxIDContains(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContains(FieldBoxID, v))
}

// BoxIDHasPrefix applies the HasPrefix predicate on the "box_id" field.
func BoxIDHasPrefix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasPrefix(FieldBoxID, v))
}

// BoxIDHasSuffix applies the HasSuffix predicate on the "box_id" field.
func BoxIDHasSuffix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasSuffix(FieldBoxID, v))
}

// BoxIDEqualFold applies the EqualFold predicate on the "box_id" field.
func BoxIDEqualFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEqualFold(FieldBoxID, v))
}

// BoxIDContainsFold applies the ContainsFold predicate on the "box_id" field.
func BoxIDContainsFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContainsFold(FieldBoxID, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldChannelID, v))
}

// ChannelIDContains applies the Contains predicate on the "channel_id" field.
func ChannelIDContains(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContains(FieldChannelID, v))
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channel_id" field.
func ChannelIDHasPrefix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasPrefix(FieldChannelID, v))
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channel_id" field.
func ChannelIDHasSuffix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasSuffix(FieldChannelID, v))
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channel_id" field.
func ChannelIDEqualFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEqualFold(FieldChannelID, v))
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channel_id" field.
func ChannelIDContainsFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContainsFold(FieldChannelID, v))
}

// CallbackEQ applies the EQ predicate on the "callback" field.
func CallbackEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldCallback, v))
}

// CallbackNEQ applies the NEQ predicate on the "callback" field.
func CallbackNEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldCallback, v))
}

// CallbackIn applies the In predicate on the "callback" field.
func CallbackIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldCallback, vs...))
}

// CallbackNotIn applies the NotIn predicate on the "callback" field.
func CallbackNotIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldCallback, vs...))
}

// CallbackGT applies the GT predicate on the "callback" field.
func CallbackGT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldCallback, v))
}

// CallbackGTE applies the GTE predicate on the "callback" field.
func CallbackGTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldCallback, v))
}

// CallbackLT applies the LT predicate on the "callback" field.
func CallbackLT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldCallback, v))
}

// CallbackLTE applies the LTE predicate on the "callback" field.
func CallbackLTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldCallback, v))
}

// CallbackContains applies the Contains predicate on the "callback" field.
func CallbackContains(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContains(FieldCallback, v))
}

// CallbackHasPrefix applies the HasPrefix predicate on the "callback" field.
func CallbackHasPrefix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasPrefix(FieldCallback, v))
}

// CallbackHasSuffix applies the HasSuffix predicate on the "callback" field.
func CallbackHasSuffix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasSuffix(FieldCallback, v))
}

// CallbackEqualFold applies the EqualFold predicate on the "callback" field.
func CallbackEqualFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEqualFold(FieldCallback, v))
}

// CallbackContainsFold applies the ContainsFold predicate on the "callback" field.
func CallbackContainsFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContainsFold(FieldCallback, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.EventSubscription {
	return predicate.EventSubscription(sql.FieldContainsFold(FieldTemplateID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v biz.EventSubStatus) predicate.EventSubscription {
	vc := v
	return predicate.EventSubscription(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v biz.EventSubStatus) predicate.EventSubscription {
	vc := v
	return predicate.EventSubscription(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...biz.EventSubStatus) predicate.EventSubscription {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventSubscription(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...biz.EventSubStatus) predicate.EventSubscription {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventSubscription(sql.FieldNotIn(FieldStatus, v...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventSubscription) predicate.EventSubscription {
	return predicate.EventSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventSubscription) predicate.EventSubscription {
	return predicate.EventSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventSubscription) predicate.EventSubscription {
	return predicate.EventSubscription(sql.NotPredicates(p))
}
