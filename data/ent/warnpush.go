// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
)

// WarnPush is the model entity for the WarnPush schema.
type WarnPush struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// 授权的组织 id 列表，#分隔
	AccessOrgList string `json:"access_org_list,omitempty"`
	// 推送名称
	Name string `json:"name,omitempty"`
	// 推送方式
	Type biz.WarnPushType `json:"type,omitempty"`
	// 推送地址
	URL string `json:"url,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 推送模式
	Mode biz.WarnPushMode `json:"mode,omitempty"`
	// 推送状态
	Status       biz.WarnPushStatus `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WarnPush) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warnpush.FieldID:
			values[i] = new(sql.NullInt64)
		case warnpush.FieldTenantID, warnpush.FieldAccessOrgList, warnpush.FieldName, warnpush.FieldType, warnpush.FieldURL, warnpush.FieldRemark, warnpush.FieldMode, warnpush.FieldStatus:
			values[i] = new(sql.NullString)
		case warnpush.FieldCreatedAt, warnpush.FieldUpdatedAt, warnpush.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WarnPush fields.
func (wp *WarnPush) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warnpush.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wp.ID = uint64(value.Int64)
		case warnpush.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wp.CreatedAt = value.Time
			}
		case warnpush.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wp.UpdatedAt = value.Time
			}
		case warnpush.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wp.DeletedAt = value.Time
			}
		case warnpush.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				wp.TenantID = value.String
			}
		case warnpush.FieldAccessOrgList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_org_list", values[i])
			} else if value.Valid {
				wp.AccessOrgList = value.String
			}
		case warnpush.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wp.Name = value.String
			}
		case warnpush.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				wp.Type = biz.WarnPushType(value.String)
			}
		case warnpush.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				wp.URL = value.String
			}
		case warnpush.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				wp.Remark = value.String
			}
		case warnpush.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				wp.Mode = biz.WarnPushMode(value.String)
			}
		case warnpush.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wp.Status = biz.WarnPushStatus(value.String)
			}
		default:
			wp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WarnPush.
// This includes values selected through modifiers, order, etc.
func (wp *WarnPush) Value(name string) (ent.Value, error) {
	return wp.selectValues.Get(name)
}

// Update returns a builder for updating this WarnPush.
// Note that you need to call WarnPush.Unwrap() before calling this method if this WarnPush
// was returned from a transaction, and the transaction was committed or rolled back.
func (wp *WarnPush) Update() *WarnPushUpdateOne {
	return NewWarnPushClient(wp.config).UpdateOne(wp)
}

// Unwrap unwraps the WarnPush entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wp *WarnPush) Unwrap() *WarnPush {
	_tx, ok := wp.config.driver.(*txDriver)
	if !ok {
		panic("ent: WarnPush is not a transactional entity")
	}
	wp.config.driver = _tx.drv
	return wp
}

// String implements the fmt.Stringer.
func (wp *WarnPush) String() string {
	var builder strings.Builder
	builder.WriteString("WarnPush(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(wp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(wp.TenantID)
	builder.WriteString(", ")
	builder.WriteString("access_org_list=")
	builder.WriteString(wp.AccessOrgList)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wp.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", wp.Type))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(wp.URL)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(wp.Remark)
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(fmt.Sprintf("%v", wp.Mode))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wp.Status))
	builder.WriteByte(')')
	return builder.String()
}

// WarnPushes is a parsable slice of WarnPush.
type WarnPushes []*WarnPush
