// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/warnsmserr"
)

// WarnSmsErrUpdate is the builder for updating WarnSmsErr entities.
type WarnSmsErrUpdate struct {
	config
	hooks     []Hook
	mutation  *WarnSmsErrMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarnSmsErrUpdate builder.
func (wseu *WarnSmsErrUpdate) Where(ps ...predicate.WarnSmsErr) *WarnSmsErrUpdate {
	wseu.mutation.Where(ps...)
	return wseu
}

// SetUpdatedAt sets the "updated_at" field.
func (wseu *WarnSmsErrUpdate) SetUpdatedAt(t time.Time) *WarnSmsErrUpdate {
	wseu.mutation.SetUpdatedAt(t)
	return wseu
}

// SetTenantID sets the "tenant_id" field.
func (wseu *WarnSmsErrUpdate) SetTenantID(s string) *WarnSmsErrUpdate {
	wseu.mutation.SetTenantID(s)
	return wseu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wseu *WarnSmsErrUpdate) SetNillableTenantID(s *string) *WarnSmsErrUpdate {
	if s != nil {
		wseu.SetTenantID(*s)
	}
	return wseu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wseu *WarnSmsErrUpdate) ClearTenantID() *WarnSmsErrUpdate {
	wseu.mutation.ClearTenantID()
	return wseu
}

// SetAccessOrgList sets the "access_org_list" field.
func (wseu *WarnSmsErrUpdate) SetAccessOrgList(s string) *WarnSmsErrUpdate {
	wseu.mutation.SetAccessOrgList(s)
	return wseu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wseu *WarnSmsErrUpdate) SetNillableAccessOrgList(s *string) *WarnSmsErrUpdate {
	if s != nil {
		wseu.SetAccessOrgList(*s)
	}
	return wseu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wseu *WarnSmsErrUpdate) ClearAccessOrgList() *WarnSmsErrUpdate {
	wseu.mutation.ClearAccessOrgList()
	return wseu
}

// SetAppName sets the "app_name" field.
func (wseu *WarnSmsErrUpdate) SetAppName(s string) *WarnSmsErrUpdate {
	wseu.mutation.SetAppName(s)
	return wseu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (wseu *WarnSmsErrUpdate) SetNillableAppName(s *string) *WarnSmsErrUpdate {
	if s != nil {
		wseu.SetAppName(*s)
	}
	return wseu
}

// SetRecordID sets the "record_id" field.
func (wseu *WarnSmsErrUpdate) SetRecordID(u uint64) *WarnSmsErrUpdate {
	wseu.mutation.ResetRecordID()
	wseu.mutation.SetRecordID(u)
	return wseu
}

// SetNillableRecordID sets the "record_id" field if the given value is not nil.
func (wseu *WarnSmsErrUpdate) SetNillableRecordID(u *uint64) *WarnSmsErrUpdate {
	if u != nil {
		wseu.SetRecordID(*u)
	}
	return wseu
}

// AddRecordID adds u to the "record_id" field.
func (wseu *WarnSmsErrUpdate) AddRecordID(u int64) *WarnSmsErrUpdate {
	wseu.mutation.AddRecordID(u)
	return wseu
}

// SetErrorMsg sets the "error_msg" field.
func (wseu *WarnSmsErrUpdate) SetErrorMsg(s string) *WarnSmsErrUpdate {
	wseu.mutation.SetErrorMsg(s)
	return wseu
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (wseu *WarnSmsErrUpdate) SetNillableErrorMsg(s *string) *WarnSmsErrUpdate {
	if s != nil {
		wseu.SetErrorMsg(*s)
	}
	return wseu
}

// Mutation returns the WarnSmsErrMutation object of the builder.
func (wseu *WarnSmsErrUpdate) Mutation() *WarnSmsErrMutation {
	return wseu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wseu *WarnSmsErrUpdate) Save(ctx context.Context) (int, error) {
	if err := wseu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wseu.sqlSave, wseu.mutation, wseu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wseu *WarnSmsErrUpdate) SaveX(ctx context.Context) int {
	affected, err := wseu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wseu *WarnSmsErrUpdate) Exec(ctx context.Context) error {
	_, err := wseu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wseu *WarnSmsErrUpdate) ExecX(ctx context.Context) {
	if err := wseu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wseu *WarnSmsErrUpdate) defaults() error {
	if _, ok := wseu.mutation.UpdatedAt(); !ok {
		if warnsmserr.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnsmserr.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnsmserr.UpdateDefaultUpdatedAt()
		wseu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wseu *WarnSmsErrUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnSmsErrUpdate {
	wseu.modifiers = append(wseu.modifiers, modifiers...)
	return wseu
}

func (wseu *WarnSmsErrUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(warnsmserr.Table, warnsmserr.Columns, sqlgraph.NewFieldSpec(warnsmserr.FieldID, field.TypeUint64))
	if ps := wseu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wseu.mutation.UpdatedAt(); ok {
		_spec.SetField(warnsmserr.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wseu.mutation.TenantID(); ok {
		_spec.SetField(warnsmserr.FieldTenantID, field.TypeString, value)
	}
	if wseu.mutation.TenantIDCleared() {
		_spec.ClearField(warnsmserr.FieldTenantID, field.TypeString)
	}
	if value, ok := wseu.mutation.AccessOrgList(); ok {
		_spec.SetField(warnsmserr.FieldAccessOrgList, field.TypeString, value)
	}
	if wseu.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnsmserr.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wseu.mutation.AppName(); ok {
		_spec.SetField(warnsmserr.FieldAppName, field.TypeString, value)
	}
	if value, ok := wseu.mutation.RecordID(); ok {
		_spec.SetField(warnsmserr.FieldRecordID, field.TypeUint64, value)
	}
	if value, ok := wseu.mutation.AddedRecordID(); ok {
		_spec.AddField(warnsmserr.FieldRecordID, field.TypeUint64, value)
	}
	if value, ok := wseu.mutation.ErrorMsg(); ok {
		_spec.SetField(warnsmserr.FieldErrorMsg, field.TypeString, value)
	}
	_spec.AddModifiers(wseu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wseu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnsmserr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wseu.mutation.done = true
	return n, nil
}

// WarnSmsErrUpdateOne is the builder for updating a single WarnSmsErr entity.
type WarnSmsErrUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarnSmsErrMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wseuo *WarnSmsErrUpdateOne) SetUpdatedAt(t time.Time) *WarnSmsErrUpdateOne {
	wseuo.mutation.SetUpdatedAt(t)
	return wseuo
}

// SetTenantID sets the "tenant_id" field.
func (wseuo *WarnSmsErrUpdateOne) SetTenantID(s string) *WarnSmsErrUpdateOne {
	wseuo.mutation.SetTenantID(s)
	return wseuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wseuo *WarnSmsErrUpdateOne) SetNillableTenantID(s *string) *WarnSmsErrUpdateOne {
	if s != nil {
		wseuo.SetTenantID(*s)
	}
	return wseuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wseuo *WarnSmsErrUpdateOne) ClearTenantID() *WarnSmsErrUpdateOne {
	wseuo.mutation.ClearTenantID()
	return wseuo
}

// SetAccessOrgList sets the "access_org_list" field.
func (wseuo *WarnSmsErrUpdateOne) SetAccessOrgList(s string) *WarnSmsErrUpdateOne {
	wseuo.mutation.SetAccessOrgList(s)
	return wseuo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wseuo *WarnSmsErrUpdateOne) SetNillableAccessOrgList(s *string) *WarnSmsErrUpdateOne {
	if s != nil {
		wseuo.SetAccessOrgList(*s)
	}
	return wseuo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wseuo *WarnSmsErrUpdateOne) ClearAccessOrgList() *WarnSmsErrUpdateOne {
	wseuo.mutation.ClearAccessOrgList()
	return wseuo
}

// SetAppName sets the "app_name" field.
func (wseuo *WarnSmsErrUpdateOne) SetAppName(s string) *WarnSmsErrUpdateOne {
	wseuo.mutation.SetAppName(s)
	return wseuo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (wseuo *WarnSmsErrUpdateOne) SetNillableAppName(s *string) *WarnSmsErrUpdateOne {
	if s != nil {
		wseuo.SetAppName(*s)
	}
	return wseuo
}

// SetRecordID sets the "record_id" field.
func (wseuo *WarnSmsErrUpdateOne) SetRecordID(u uint64) *WarnSmsErrUpdateOne {
	wseuo.mutation.ResetRecordID()
	wseuo.mutation.SetRecordID(u)
	return wseuo
}

// SetNillableRecordID sets the "record_id" field if the given value is not nil.
func (wseuo *WarnSmsErrUpdateOne) SetNillableRecordID(u *uint64) *WarnSmsErrUpdateOne {
	if u != nil {
		wseuo.SetRecordID(*u)
	}
	return wseuo
}

// AddRecordID adds u to the "record_id" field.
func (wseuo *WarnSmsErrUpdateOne) AddRecordID(u int64) *WarnSmsErrUpdateOne {
	wseuo.mutation.AddRecordID(u)
	return wseuo
}

// SetErrorMsg sets the "error_msg" field.
func (wseuo *WarnSmsErrUpdateOne) SetErrorMsg(s string) *WarnSmsErrUpdateOne {
	wseuo.mutation.SetErrorMsg(s)
	return wseuo
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (wseuo *WarnSmsErrUpdateOne) SetNillableErrorMsg(s *string) *WarnSmsErrUpdateOne {
	if s != nil {
		wseuo.SetErrorMsg(*s)
	}
	return wseuo
}

// Mutation returns the WarnSmsErrMutation object of the builder.
func (wseuo *WarnSmsErrUpdateOne) Mutation() *WarnSmsErrMutation {
	return wseuo.mutation
}

// Where appends a list predicates to the WarnSmsErrUpdate builder.
func (wseuo *WarnSmsErrUpdateOne) Where(ps ...predicate.WarnSmsErr) *WarnSmsErrUpdateOne {
	wseuo.mutation.Where(ps...)
	return wseuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wseuo *WarnSmsErrUpdateOne) Select(field string, fields ...string) *WarnSmsErrUpdateOne {
	wseuo.fields = append([]string{field}, fields...)
	return wseuo
}

// Save executes the query and returns the updated WarnSmsErr entity.
func (wseuo *WarnSmsErrUpdateOne) Save(ctx context.Context) (*WarnSmsErr, error) {
	if err := wseuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wseuo.sqlSave, wseuo.mutation, wseuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wseuo *WarnSmsErrUpdateOne) SaveX(ctx context.Context) *WarnSmsErr {
	node, err := wseuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wseuo *WarnSmsErrUpdateOne) Exec(ctx context.Context) error {
	_, err := wseuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wseuo *WarnSmsErrUpdateOne) ExecX(ctx context.Context) {
	if err := wseuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wseuo *WarnSmsErrUpdateOne) defaults() error {
	if _, ok := wseuo.mutation.UpdatedAt(); !ok {
		if warnsmserr.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnsmserr.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnsmserr.UpdateDefaultUpdatedAt()
		wseuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wseuo *WarnSmsErrUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnSmsErrUpdateOne {
	wseuo.modifiers = append(wseuo.modifiers, modifiers...)
	return wseuo
}

func (wseuo *WarnSmsErrUpdateOne) sqlSave(ctx context.Context) (_node *WarnSmsErr, err error) {
	_spec := sqlgraph.NewUpdateSpec(warnsmserr.Table, warnsmserr.Columns, sqlgraph.NewFieldSpec(warnsmserr.FieldID, field.TypeUint64))
	id, ok := wseuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WarnSmsErr.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wseuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warnsmserr.FieldID)
		for _, f := range fields {
			if !warnsmserr.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warnsmserr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wseuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wseuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warnsmserr.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wseuo.mutation.TenantID(); ok {
		_spec.SetField(warnsmserr.FieldTenantID, field.TypeString, value)
	}
	if wseuo.mutation.TenantIDCleared() {
		_spec.ClearField(warnsmserr.FieldTenantID, field.TypeString)
	}
	if value, ok := wseuo.mutation.AccessOrgList(); ok {
		_spec.SetField(warnsmserr.FieldAccessOrgList, field.TypeString, value)
	}
	if wseuo.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnsmserr.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wseuo.mutation.AppName(); ok {
		_spec.SetField(warnsmserr.FieldAppName, field.TypeString, value)
	}
	if value, ok := wseuo.mutation.RecordID(); ok {
		_spec.SetField(warnsmserr.FieldRecordID, field.TypeUint64, value)
	}
	if value, ok := wseuo.mutation.AddedRecordID(); ok {
		_spec.AddField(warnsmserr.FieldRecordID, field.TypeUint64, value)
	}
	if value, ok := wseuo.mutation.ErrorMsg(); ok {
		_spec.SetField(warnsmserr.FieldErrorMsg, field.TypeString, value)
	}
	_spec.AddModifiers(wseuo.modifiers...)
	_node = &WarnSmsErr{config: wseuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wseuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnsmserr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wseuo.mutation.done = true
	return _node, nil
}
