// Code generated by ent, DO NOT EDIT.

package fileupload

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fileupload type in the database.
	Label = "file_upload"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldMd5 holds the string denoting the md5 field in the database.
	FieldMd5 = "md5"
	// FieldTotalBytes holds the string denoting the total_bytes field in the database.
	FieldTotalBytes = "total_bytes"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldUploadID holds the string denoting the upload_id field in the database.
	FieldUploadID = "upload_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAlgoGroupID holds the string denoting the algo_group_id field in the database.
	FieldAlgoGroupID = "algo_group_id"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// Table holds the table name of the fileupload in the database.
	Table = "file_upload"
)

// Columns holds all SQL columns for fileupload fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldProvider,
	FieldFileName,
	FieldMd5,
	FieldTotalBytes,
	FieldEtag,
	FieldKey,
	FieldUploadID,
	FieldStatus,
	FieldType,
	FieldAlgoGroupID,
	FieldMeta,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/blues120/ias-core/data/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the FileUpload queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByMd5 orders the results by the md5 field.
func ByMd5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMd5, opts...).ToFunc()
}

// ByTotalBytes orders the results by the total_bytes field.
func ByTotalBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalBytes, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByUploadID orders the results by the upload_id field.
func ByUploadID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAlgoGroupID orders the results by the algo_group_id field.
func ByAlgoGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgoGroupID, opts...).ToFunc()
}

// ByMeta orders the results by the meta field.
func ByMeta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeta, opts...).ToFunc()
}
