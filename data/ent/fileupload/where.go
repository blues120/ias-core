// Code generated by ent, DO NOT EDIT.

package fileupload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldDeletedAt, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldProvider, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileName, v))
}

// Md5 applies equality check predicate on the "md5" field. It's identical to Md5EQ.
func Md5(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMd5, v))
}

// TotalBytes applies equality check predicate on the "total_bytes" field. It's identical to TotalBytesEQ.
func TotalBytes(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldTotalBytes, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldEtag, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldKey, v))
}

// UploadID applies equality check predicate on the "upload_id" field. It's identical to UploadIDEQ.
func UploadID(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUploadID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldStatus, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldType, v))
}

// AlgoGroupID applies equality check predicate on the "algo_group_id" field. It's identical to AlgoGroupIDEQ.
func AlgoGroupID(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldAlgoGroupID, v))
}

// Meta applies equality check predicate on the "meta" field. It's identical to MetaEQ.
func Meta(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMeta, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldDeletedAt))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldProvider, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldFileName, v))
}

// Md5EQ applies the EQ predicate on the "md5" field.
func Md5EQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMd5, v))
}

// Md5NEQ applies the NEQ predicate on the "md5" field.
func Md5NEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldMd5, v))
}

// Md5In applies the In predicate on the "md5" field.
func Md5In(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldMd5, vs...))
}

// Md5NotIn applies the NotIn predicate on the "md5" field.
func Md5NotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldMd5, vs...))
}

// Md5GT applies the GT predicate on the "md5" field.
func Md5GT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldMd5, v))
}

// Md5GTE applies the GTE predicate on the "md5" field.
func Md5GTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldMd5, v))
}

// Md5LT applies the LT predicate on the "md5" field.
func Md5LT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldMd5, v))
}

// Md5LTE applies the LTE predicate on the "md5" field.
func Md5LTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldMd5, v))
}

// Md5Contains applies the Contains predicate on the "md5" field.
func Md5Contains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldMd5, v))
}

// Md5HasPrefix applies the HasPrefix predicate on the "md5" field.
func Md5HasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldMd5, v))
}

// Md5HasSuffix applies the HasSuffix predicate on the "md5" field.
func Md5HasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldMd5, v))
}

// Md5EqualFold applies the EqualFold predicate on the "md5" field.
func Md5EqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldMd5, v))
}

// Md5ContainsFold applies the ContainsFold predicate on the "md5" field.
func Md5ContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldMd5, v))
}

// TotalBytesEQ applies the EQ predicate on the "total_bytes" field.
func TotalBytesEQ(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldTotalBytes, v))
}

// TotalBytesNEQ applies the NEQ predicate on the "total_bytes" field.
func TotalBytesNEQ(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldTotalBytes, v))
}

// TotalBytesIn applies the In predicate on the "total_bytes" field.
func TotalBytesIn(vs ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldTotalBytes, vs...))
}

// TotalBytesNotIn applies the NotIn predicate on the "total_bytes" field.
func TotalBytesNotIn(vs ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldTotalBytes, vs...))
}

// TotalBytesGT applies the GT predicate on the "total_bytes" field.
func TotalBytesGT(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldTotalBytes, v))
}

// TotalBytesGTE applies the GTE predicate on the "total_bytes" field.
func TotalBytesGTE(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldTotalBytes, v))
}

// TotalBytesLT applies the LT predicate on the "total_bytes" field.
func TotalBytesLT(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldTotalBytes, v))
}

// TotalBytesLTE applies the LTE predicate on the "total_bytes" field.
func TotalBytesLTE(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldTotalBytes, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagIsNil applies the IsNil predicate on the "etag" field.
func EtagIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldEtag))
}

// EtagNotNil applies the NotNil predicate on the "etag" field.
func EtagNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldEtag))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldEtag, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldKey, v))
}

// UploadIDEQ applies the EQ predicate on the "upload_id" field.
func UploadIDEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUploadID, v))
}

// UploadIDNEQ applies the NEQ predicate on the "upload_id" field.
func UploadIDNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldUploadID, v))
}

// UploadIDIn applies the In predicate on the "upload_id" field.
func UploadIDIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldUploadID, vs...))
}

// UploadIDNotIn applies the NotIn predicate on the "upload_id" field.
func UploadIDNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldUploadID, vs...))
}

// UploadIDGT applies the GT predicate on the "upload_id" field.
func UploadIDGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldUploadID, v))
}

// UploadIDGTE applies the GTE predicate on the "upload_id" field.
func UploadIDGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldUploadID, v))
}

// UploadIDLT applies the LT predicate on the "upload_id" field.
func UploadIDLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldUploadID, v))
}

// UploadIDLTE applies the LTE predicate on the "upload_id" field.
func UploadIDLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldUploadID, v))
}

// UploadIDContains applies the Contains predicate on the "upload_id" field.
func UploadIDContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldUploadID, v))
}

// UploadIDHasPrefix applies the HasPrefix predicate on the "upload_id" field.
func UploadIDHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldUploadID, v))
}

// UploadIDHasSuffix applies the HasSuffix predicate on the "upload_id" field.
func UploadIDHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldUploadID, v))
}

// UploadIDIsNil applies the IsNil predicate on the "upload_id" field.
func UploadIDIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldUploadID))
}

// UploadIDNotNil applies the NotNil predicate on the "upload_id" field.
func UploadIDNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldUploadID))
}

// UploadIDEqualFold applies the EqualFold predicate on the "upload_id" field.
func UploadIDEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldUploadID, v))
}

// UploadIDContainsFold applies the ContainsFold predicate on the "upload_id" field.
func UploadIDContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldUploadID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldStatus, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldType, v))
}

// AlgoGroupIDEQ applies the EQ predicate on the "algo_group_id" field.
func AlgoGroupIDEQ(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDNEQ applies the NEQ predicate on the "algo_group_id" field.
func AlgoGroupIDNEQ(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDIn applies the In predicate on the "algo_group_id" field.
func AlgoGroupIDIn(vs ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDNotIn applies the NotIn predicate on the "algo_group_id" field.
func AlgoGroupIDNotIn(vs ...uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDGT applies the GT predicate on the "algo_group_id" field.
func AlgoGroupIDGT(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldAlgoGroupID, v))
}

// AlgoGroupIDGTE applies the GTE predicate on the "algo_group_id" field.
func AlgoGroupIDGTE(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDLT applies the LT predicate on the "algo_group_id" field.
func AlgoGroupIDLT(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldAlgoGroupID, v))
}

// AlgoGroupIDLTE applies the LTE predicate on the "algo_group_id" field.
func AlgoGroupIDLTE(v uint64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldAlgoGroupID, v))
}

// MetaEQ applies the EQ predicate on the "meta" field.
func MetaEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMeta, v))
}

// MetaNEQ applies the NEQ predicate on the "meta" field.
func MetaNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldMeta, v))
}

// MetaIn applies the In predicate on the "meta" field.
func MetaIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldMeta, vs...))
}

// MetaNotIn applies the NotIn predicate on the "meta" field.
func MetaNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldMeta, vs...))
}

// MetaGT applies the GT predicate on the "meta" field.
func MetaGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldMeta, v))
}

// MetaGTE applies the GTE predicate on the "meta" field.
func MetaGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldMeta, v))
}

// MetaLT applies the LT predicate on the "meta" field.
func MetaLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldMeta, v))
}

// MetaLTE applies the LTE predicate on the "meta" field.
func MetaLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldMeta, v))
}

// MetaContains applies the Contains predicate on the "meta" field.
func MetaContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldMeta, v))
}

// MetaHasPrefix applies the HasPrefix predicate on the "meta" field.
func MetaHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldMeta, v))
}

// MetaHasSuffix applies the HasSuffix predicate on the "meta" field.
func MetaHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldMeta, v))
}

// MetaEqualFold applies the EqualFold predicate on the "meta" field.
func MetaEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldMeta, v))
}

// MetaContainsFold applies the ContainsFold predicate on the "meta" field.
func MetaContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldMeta, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.NotPredicates(p))
}
