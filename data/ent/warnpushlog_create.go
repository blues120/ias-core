// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpushlog"
)

// WarnPushLogCreate is the builder for creating a WarnPushLog entity.
type WarnPushLogCreate struct {
	config
	mutation *WarnPushLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wplc *WarnPushLogCreate) SetCreatedAt(t time.Time) *WarnPushLogCreate {
	wplc.mutation.SetCreatedAt(t)
	return wplc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wplc *WarnPushLogCreate) SetNillableCreatedAt(t *time.Time) *WarnPushLogCreate {
	if t != nil {
		wplc.SetCreatedAt(*t)
	}
	return wplc
}

// SetUpdatedAt sets the "updated_at" field.
func (wplc *WarnPushLogCreate) SetUpdatedAt(t time.Time) *WarnPushLogCreate {
	wplc.mutation.SetUpdatedAt(t)
	return wplc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wplc *WarnPushLogCreate) SetNillableUpdatedAt(t *time.Time) *WarnPushLogCreate {
	if t != nil {
		wplc.SetUpdatedAt(*t)
	}
	return wplc
}

// SetDeletedAt sets the "deleted_at" field.
func (wplc *WarnPushLogCreate) SetDeletedAt(t time.Time) *WarnPushLogCreate {
	wplc.mutation.SetDeletedAt(t)
	return wplc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wplc *WarnPushLogCreate) SetNillableDeletedAt(t *time.Time) *WarnPushLogCreate {
	if t != nil {
		wplc.SetDeletedAt(*t)
	}
	return wplc
}

// SetTenantID sets the "tenant_id" field.
func (wplc *WarnPushLogCreate) SetTenantID(s string) *WarnPushLogCreate {
	wplc.mutation.SetTenantID(s)
	return wplc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wplc *WarnPushLogCreate) SetNillableTenantID(s *string) *WarnPushLogCreate {
	if s != nil {
		wplc.SetTenantID(*s)
	}
	return wplc
}

// SetAccessOrgList sets the "access_org_list" field.
func (wplc *WarnPushLogCreate) SetAccessOrgList(s string) *WarnPushLogCreate {
	wplc.mutation.SetAccessOrgList(s)
	return wplc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wplc *WarnPushLogCreate) SetNillableAccessOrgList(s *string) *WarnPushLogCreate {
	if s != nil {
		wplc.SetAccessOrgList(*s)
	}
	return wplc
}

// SetPushID sets the "push_id" field.
func (wplc *WarnPushLogCreate) SetPushID(u uint64) *WarnPushLogCreate {
	wplc.mutation.SetPushID(u)
	return wplc
}

// SetParam sets the "param" field.
func (wplc *WarnPushLogCreate) SetParam(s string) *WarnPushLogCreate {
	wplc.mutation.SetParam(s)
	return wplc
}

// SetRemark sets the "remark" field.
func (wplc *WarnPushLogCreate) SetRemark(s string) *WarnPushLogCreate {
	wplc.mutation.SetRemark(s)
	return wplc
}

// SetStatus sets the "status" field.
func (wplc *WarnPushLogCreate) SetStatus(bpls biz.WarnPushLogStatus) *WarnPushLogCreate {
	wplc.mutation.SetStatus(bpls)
	return wplc
}

// SetID sets the "id" field.
func (wplc *WarnPushLogCreate) SetID(u uint64) *WarnPushLogCreate {
	wplc.mutation.SetID(u)
	return wplc
}

// SetPush sets the "push" edge to the WarnPush entity.
func (wplc *WarnPushLogCreate) SetPush(w *WarnPush) *WarnPushLogCreate {
	return wplc.SetPushID(w.ID)
}

// Mutation returns the WarnPushLogMutation object of the builder.
func (wplc *WarnPushLogCreate) Mutation() *WarnPushLogMutation {
	return wplc.mutation
}

// Save creates the WarnPushLog in the database.
func (wplc *WarnPushLogCreate) Save(ctx context.Context) (*WarnPushLog, error) {
	if err := wplc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wplc.sqlSave, wplc.mutation, wplc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wplc *WarnPushLogCreate) SaveX(ctx context.Context) *WarnPushLog {
	v, err := wplc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wplc *WarnPushLogCreate) Exec(ctx context.Context) error {
	_, err := wplc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wplc *WarnPushLogCreate) ExecX(ctx context.Context) {
	if err := wplc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wplc *WarnPushLogCreate) defaults() error {
	if _, ok := wplc.mutation.CreatedAt(); !ok {
		if warnpushlog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpushlog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := warnpushlog.DefaultCreatedAt()
		wplc.mutation.SetCreatedAt(v)
	}
	if _, ok := wplc.mutation.UpdatedAt(); !ok {
		if warnpushlog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpushlog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpushlog.DefaultUpdatedAt()
		wplc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wplc *WarnPushLogCreate) check() error {
	if _, ok := wplc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WarnPushLog.created_at"`)}
	}
	if _, ok := wplc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WarnPushLog.updated_at"`)}
	}
	if _, ok := wplc.mutation.PushID(); !ok {
		return &ValidationError{Name: "push_id", err: errors.New(`ent: missing required field "WarnPushLog.push_id"`)}
	}
	if _, ok := wplc.mutation.Param(); !ok {
		return &ValidationError{Name: "param", err: errors.New(`ent: missing required field "WarnPushLog.param"`)}
	}
	if _, ok := wplc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "WarnPushLog.remark"`)}
	}
	if _, ok := wplc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WarnPushLog.status"`)}
	}
	if v, ok := wplc.mutation.Status(); ok {
		if err := warnpushlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPushLog.status": %w`, err)}
		}
	}
	if _, ok := wplc.mutation.PushID(); !ok {
		return &ValidationError{Name: "push", err: errors.New(`ent: missing required edge "WarnPushLog.push"`)}
	}
	return nil
}

func (wplc *WarnPushLogCreate) sqlSave(ctx context.Context) (*WarnPushLog, error) {
	if err := wplc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wplc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wplc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	wplc.mutation.id = &_node.ID
	wplc.mutation.done = true
	return _node, nil
}

func (wplc *WarnPushLogCreate) createSpec() (*WarnPushLog, *sqlgraph.CreateSpec) {
	var (
		_node = &WarnPushLog{config: wplc.config}
		_spec = sqlgraph.NewCreateSpec(warnpushlog.Table, sqlgraph.NewFieldSpec(warnpushlog.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = wplc.conflict
	if id, ok := wplc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wplc.mutation.CreatedAt(); ok {
		_spec.SetField(warnpushlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wplc.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpushlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wplc.mutation.DeletedAt(); ok {
		_spec.SetField(warnpushlog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wplc.mutation.TenantID(); ok {
		_spec.SetField(warnpushlog.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := wplc.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpushlog.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := wplc.mutation.Param(); ok {
		_spec.SetField(warnpushlog.FieldParam, field.TypeString, value)
		_node.Param = value
	}
	if value, ok := wplc.mutation.Remark(); ok {
		_spec.SetField(warnpushlog.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := wplc.mutation.Status(); ok {
		_spec.SetField(warnpushlog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := wplc.mutation.PushIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warnpushlog.PushTable,
			Columns: []string{warnpushlog.PushColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PushID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnPushLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnPushLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wplc *WarnPushLogCreate) OnConflict(opts ...sql.ConflictOption) *WarnPushLogUpsertOne {
	wplc.conflict = opts
	return &WarnPushLogUpsertOne{
		create: wplc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wplc *WarnPushLogCreate) OnConflictColumns(columns ...string) *WarnPushLogUpsertOne {
	wplc.conflict = append(wplc.conflict, sql.ConflictColumns(columns...))
	return &WarnPushLogUpsertOne{
		create: wplc,
	}
}

type (
	// WarnPushLogUpsertOne is the builder for "upsert"-ing
	//  one WarnPushLog node.
	WarnPushLogUpsertOne struct {
		create *WarnPushLogCreate
	}

	// WarnPushLogUpsert is the "OnConflict" setter.
	WarnPushLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushLogUpsert) SetUpdatedAt(v time.Time) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateUpdatedAt() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushLogUpsert) SetDeletedAt(v time.Time) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateDeletedAt() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushLogUpsert) ClearDeletedAt() *WarnPushLogUpsert {
	u.SetNull(warnpushlog.FieldDeletedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushLogUpsert) SetTenantID(v string) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateTenantID() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushLogUpsert) ClearTenantID() *WarnPushLogUpsert {
	u.SetNull(warnpushlog.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushLogUpsert) SetAccessOrgList(v string) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateAccessOrgList() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushLogUpsert) ClearAccessOrgList() *WarnPushLogUpsert {
	u.SetNull(warnpushlog.FieldAccessOrgList)
	return u
}

// SetPushID sets the "push_id" field.
func (u *WarnPushLogUpsert) SetPushID(v uint64) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldPushID, v)
	return u
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdatePushID() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldPushID)
	return u
}

// SetParam sets the "param" field.
func (u *WarnPushLogUpsert) SetParam(v string) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldParam, v)
	return u
}

// UpdateParam sets the "param" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateParam() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldParam)
	return u
}

// SetRemark sets the "remark" field.
func (u *WarnPushLogUpsert) SetRemark(v string) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateRemark() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *WarnPushLogUpsert) SetStatus(v biz.WarnPushLogStatus) *WarnPushLogUpsert {
	u.Set(warnpushlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushLogUpsert) UpdateStatus() *WarnPushLogUpsert {
	u.SetExcluded(warnpushlog.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnpushlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnPushLogUpsertOne) UpdateNewValues() *WarnPushLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(warnpushlog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warnpushlog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarnPushLogUpsertOne) Ignore() *WarnPushLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnPushLogUpsertOne) DoNothing() *WarnPushLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnPushLogCreate.OnConflict
// documentation for more info.
func (u *WarnPushLogUpsertOne) Update(set func(*WarnPushLogUpsert)) *WarnPushLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnPushLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushLogUpsertOne) SetUpdatedAt(v time.Time) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateUpdatedAt() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushLogUpsertOne) SetDeletedAt(v time.Time) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateDeletedAt() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushLogUpsertOne) ClearDeletedAt() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushLogUpsertOne) SetTenantID(v string) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateTenantID() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushLogUpsertOne) ClearTenantID() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushLogUpsertOne) SetAccessOrgList(v string) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateAccessOrgList() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushLogUpsertOne) ClearAccessOrgList() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetPushID sets the "push_id" field.
func (u *WarnPushLogUpsertOne) SetPushID(v uint64) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdatePushID() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdatePushID()
	})
}

// SetParam sets the "param" field.
func (u *WarnPushLogUpsertOne) SetParam(v string) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetParam(v)
	})
}

// UpdateParam sets the "param" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateParam() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateParam()
	})
}

// SetRemark sets the "remark" field.
func (u *WarnPushLogUpsertOne) SetRemark(v string) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateRemark() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *WarnPushLogUpsertOne) SetStatus(v biz.WarnPushLogStatus) *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushLogUpsertOne) UpdateStatus() *WarnPushLogUpsertOne {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarnPushLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnPushLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnPushLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarnPushLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarnPushLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarnPushLogCreateBulk is the builder for creating many WarnPushLog entities in bulk.
type WarnPushLogCreateBulk struct {
	config
	err      error
	builders []*WarnPushLogCreate
	conflict []sql.ConflictOption
}

// Save creates the WarnPushLog entities in the database.
func (wplcb *WarnPushLogCreateBulk) Save(ctx context.Context) ([]*WarnPushLog, error) {
	if wplcb.err != nil {
		return nil, wplcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wplcb.builders))
	nodes := make([]*WarnPushLog, len(wplcb.builders))
	mutators := make([]Mutator, len(wplcb.builders))
	for i := range wplcb.builders {
		func(i int, root context.Context) {
			builder := wplcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarnPushLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wplcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wplcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wplcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wplcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wplcb *WarnPushLogCreateBulk) SaveX(ctx context.Context) []*WarnPushLog {
	v, err := wplcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wplcb *WarnPushLogCreateBulk) Exec(ctx context.Context) error {
	_, err := wplcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wplcb *WarnPushLogCreateBulk) ExecX(ctx context.Context) {
	if err := wplcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnPushLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnPushLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wplcb *WarnPushLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarnPushLogUpsertBulk {
	wplcb.conflict = opts
	return &WarnPushLogUpsertBulk{
		create: wplcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wplcb *WarnPushLogCreateBulk) OnConflictColumns(columns ...string) *WarnPushLogUpsertBulk {
	wplcb.conflict = append(wplcb.conflict, sql.ConflictColumns(columns...))
	return &WarnPushLogUpsertBulk{
		create: wplcb,
	}
}

// WarnPushLogUpsertBulk is the builder for "upsert"-ing
// a bulk of WarnPushLog nodes.
type WarnPushLogUpsertBulk struct {
	create *WarnPushLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnpushlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnPushLogUpsertBulk) UpdateNewValues() *WarnPushLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(warnpushlog.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warnpushlog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnPushLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarnPushLogUpsertBulk) Ignore() *WarnPushLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnPushLogUpsertBulk) DoNothing() *WarnPushLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnPushLogCreateBulk.OnConflict
// documentation for more info.
func (u *WarnPushLogUpsertBulk) Update(set func(*WarnPushLogUpsert)) *WarnPushLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnPushLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnPushLogUpsertBulk) SetUpdatedAt(v time.Time) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateUpdatedAt() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarnPushLogUpsertBulk) SetDeletedAt(v time.Time) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateDeletedAt() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarnPushLogUpsertBulk) ClearDeletedAt() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnPushLogUpsertBulk) SetTenantID(v string) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateTenantID() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnPushLogUpsertBulk) ClearTenantID() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnPushLogUpsertBulk) SetAccessOrgList(v string) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateAccessOrgList() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnPushLogUpsertBulk) ClearAccessOrgList() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetPushID sets the "push_id" field.
func (u *WarnPushLogUpsertBulk) SetPushID(v uint64) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdatePushID() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdatePushID()
	})
}

// SetParam sets the "param" field.
func (u *WarnPushLogUpsertBulk) SetParam(v string) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetParam(v)
	})
}

// UpdateParam sets the "param" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateParam() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateParam()
	})
}

// SetRemark sets the "remark" field.
func (u *WarnPushLogUpsertBulk) SetRemark(v string) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateRemark() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *WarnPushLogUpsertBulk) SetStatus(v biz.WarnPushLogStatus) *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarnPushLogUpsertBulk) UpdateStatus() *WarnPushLogUpsertBulk {
	return u.Update(func(s *WarnPushLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarnPushLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WarnPushLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnPushLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnPushLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
