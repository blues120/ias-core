// Code generated by ent, DO NOT EDIT.

package area

import (
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Area {
	return predicate.Area(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Area {
	return predicate.Area(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Area {
	return predicate.Area(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Area {
	return predicate.Area(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Area {
	return predicate.Area(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Area {
	return predicate.Area(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Area {
	return predicate.Area(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v uint64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldLevel, v))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v int64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldPid, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Area {
	return predicate.Area(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Area {
	return predicate.Area(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Area {
	return predicate.Area(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Area {
	return predicate.Area(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Area {
	return predicate.Area(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Area {
	return predicate.Area(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Area {
	return predicate.Area(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Area {
	return predicate.Area(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Area {
	return predicate.Area(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Area {
	return predicate.Area(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Area {
	return predicate.Area(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Area {
	return predicate.Area(sql.FieldContainsFold(FieldName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v uint64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v uint64) predicate.Area {
	return predicate.Area(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...uint64) predicate.Area {
	return predicate.Area(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...uint64) predicate.Area {
	return predicate.Area(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v uint64) predicate.Area {
	return predicate.Area(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v uint64) predicate.Area {
	return predicate.Area(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v uint64) predicate.Area {
	return predicate.Area(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v uint64) predicate.Area {
	return predicate.Area(sql.FieldLTE(FieldLevel, v))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v int64) predicate.Area {
	return predicate.Area(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v int64) predicate.Area {
	return predicate.Area(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...int64) predicate.Area {
	return predicate.Area(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...int64) predicate.Area {
	return predicate.Area(sql.FieldNotIn(FieldPid, vs...))
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v int64) predicate.Area {
	return predicate.Area(sql.FieldGT(FieldPid, v))
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v int64) predicate.Area {
	return predicate.Area(sql.FieldGTE(FieldPid, v))
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v int64) predicate.Area {
	return predicate.Area(sql.FieldLT(FieldPid, v))
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v int64) predicate.Area {
	return predicate.Area(sql.FieldLTE(FieldPid, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Area) predicate.Area {
	return predicate.Area(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Area) predicate.Area {
	return predicate.Area(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Area) predicate.Area {
	return predicate.Area(sql.NotPredicates(p))
}
