// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/blues120/ias-core/data/ent"
)

// The ActiveInfoFunc type is an adapter to allow the use of ordinary
// function as ActiveInfo mutator.
type ActiveInfoFunc func(context.Context, *ent.ActiveInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActiveInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActiveInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActiveInfoMutation", m)
}

// The AlgorithmFunc type is an adapter to allow the use of ordinary
// function as Algorithm mutator.
type AlgorithmFunc func(context.Context, *ent.AlgorithmMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AlgorithmFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AlgorithmMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AlgorithmMutation", m)
}

// The AlgorithmAlarmTypeFunc type is an adapter to allow the use of ordinary
// function as AlgorithmAlarmType mutator.
type AlgorithmAlarmTypeFunc func(context.Context, *ent.AlgorithmAlarmTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AlgorithmAlarmTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AlgorithmAlarmTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AlgorithmAlarmTypeMutation", m)
}

// The AreaFunc type is an adapter to allow the use of ordinary
// function as Area mutator.
type AreaFunc func(context.Context, *ent.AreaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AreaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AreaMutation", m)
}

// The CameraFunc type is an adapter to allow the use of ordinary
// function as Camera mutator.
type CameraFunc func(context.Context, *ent.CameraMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CameraFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CameraMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CameraMutation", m)
}

// The DeviceFunc type is an adapter to allow the use of ordinary
// function as Device mutator.
type DeviceFunc func(context.Context, *ent.DeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceMutation", m)
}

// The DeviceAlgoFunc type is an adapter to allow the use of ordinary
// function as DeviceAlgo mutator.
type DeviceAlgoFunc func(context.Context, *ent.DeviceAlgoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceAlgoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeviceAlgoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceAlgoMutation", m)
}

// The DeviceCameraFunc type is an adapter to allow the use of ordinary
// function as DeviceCamera mutator.
type DeviceCameraFunc func(context.Context, *ent.DeviceCameraMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceCameraFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeviceCameraMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceCameraMutation", m)
}

// The DeviceTokenFunc type is an adapter to allow the use of ordinary
// function as DeviceToken mutator.
type DeviceTokenFunc func(context.Context, *ent.DeviceTokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceTokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeviceTokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceTokenMutation", m)
}

// The EquipAttrFunc type is an adapter to allow the use of ordinary
// function as EquipAttr mutator.
type EquipAttrFunc func(context.Context, *ent.EquipAttrMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipAttrFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EquipAttrMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipAttrMutation", m)
}

// The EventSubscriptionFunc type is an adapter to allow the use of ordinary
// function as EventSubscription mutator.
type EventSubscriptionFunc func(context.Context, *ent.EventSubscriptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventSubscriptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EventSubscriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventSubscriptionMutation", m)
}

// The FileUploadFunc type is an adapter to allow the use of ordinary
// function as FileUpload mutator.
type FileUploadFunc func(context.Context, *ent.FileUploadMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FileUploadFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FileUploadMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FileUploadMutation", m)
}

// The InformFunc type is an adapter to allow the use of ordinary
// function as Inform mutator.
type InformFunc func(context.Context, *ent.InformMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InformFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InformMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InformMutation", m)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary
// function as Organization mutator.
type OrganizationFunc func(context.Context, *ent.OrganizationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrganizationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrganizationMutation", m)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
}

// The SignatureFunc type is an adapter to allow the use of ordinary
// function as Signature mutator.
type SignatureFunc func(context.Context, *ent.SignatureMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SignatureFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SignatureMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SignatureMutation", m)
}

// The TaskFunc type is an adapter to allow the use of ordinary
// function as Task mutator.
type TaskFunc func(context.Context, *ent.TaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TaskMutation", m)
}

// The TaskCameraFunc type is an adapter to allow the use of ordinary
// function as TaskCamera mutator.
type TaskCameraFunc func(context.Context, *ent.TaskCameraMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TaskCameraFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TaskCameraMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TaskCameraMutation", m)
}

// The TaskLimitsFunc type is an adapter to allow the use of ordinary
// function as TaskLimits mutator.
type TaskLimitsFunc func(context.Context, *ent.TaskLimitsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TaskLimitsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TaskLimitsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TaskLimitsMutation", m)
}

// The UpPlatformFunc type is an adapter to allow the use of ordinary
// function as UpPlatform mutator.
type UpPlatformFunc func(context.Context, *ent.UpPlatformMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpPlatformFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpPlatformMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpPlatformMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The WarnPushFunc type is an adapter to allow the use of ordinary
// function as WarnPush mutator.
type WarnPushFunc func(context.Context, *ent.WarnPushMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarnPushFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WarnPushMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarnPushMutation", m)
}

// The WarnPushLogFunc type is an adapter to allow the use of ordinary
// function as WarnPushLog mutator.
type WarnPushLogFunc func(context.Context, *ent.WarnPushLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarnPushLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WarnPushLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarnPushLogMutation", m)
}

// The WarnSmsErrFunc type is an adapter to allow the use of ordinary
// function as WarnSmsErr mutator.
type WarnSmsErrFunc func(context.Context, *ent.WarnSmsErrMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarnSmsErrFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WarnSmsErrMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarnSmsErrMutation", m)
}

// The WarningTypeFunc type is an adapter to allow the use of ordinary
// function as WarningType mutator.
type WarningTypeFunc func(context.Context, *ent.WarningTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarningTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WarningTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarningTypeMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
