// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/algorithm"
)

// Algorithm is the model entity for the Algorithm schema.
type Algorithm struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 算法名称
	Name string `json:"name,omitempty"`
	// 算法类型:图片帧image/视频流video
	Type string `json:"type,omitempty"`
	// 算法描述
	Description string `json:"description,omitempty"`
	// 算法版本
	Version string `json:"version,omitempty"`
	// 应用名称
	AppName string `json:"app_name,omitempty"`
	// 告警类型
	AlarmType string `json:"alarm_type,omitempty"`
	// 告警名称
	AlarmName string `json:"alarm_name,omitempty"`
	// 是否告警
	Notify uint `json:"notify,omitempty"`
	// 非通用属性
	Extend map[string]interface{} `json:"extend,omitempty"`
	// 绘制区域类型 多边形区域/流量方向及界线 1/2
	DrawType uint `json:"draw_type,omitempty"`
	// 底库类型 无/人员/车辆 0/1/2
	BaseType uint `json:"base_type,omitempty"`
	// 是否可用 默认为1,不可用为0
	Available uint `json:"available,omitempty"`
	// 算法镜像
	Image string `json:"image,omitempty"`
	// 英中文label映射
	LabelMap string `json:"label_map,omitempty"`
	// 检测目标
	Target string `json:"target,omitempty"`
	// 算法英文名，下发给agent配置需要
	AlgoNameEn string `json:"algo_name_en,omitempty"`
	// 算法组ID
	AlgoGroupID uint `json:"algo_group_id,omitempty"`
	// 算法组name(如十二合一算法)，前端显示用
	AlgoGroupName string `json:"algo_group_name,omitempty"`
	// 算法组版本号，用于算法组整体更新场景
	AlgoGroupVersion string `json:"algo_group_version,omitempty"`
	// 算法特有配置，如算能算法的单独配置
	Config string `json:"config,omitempty"`
	// 算法供应商 ctyun_ias/sophgo_park/sophgo_city
	Provider string `json:"provider,omitempty"`
	// 算法 id，非自增 id，用于填充园区算法 alg_flag 字段（使用时需转换为 Uint）
	AlgoID string `json:"algo_id,omitempty"`
	// 平台类型,服务器/边缘设备
	Platform string `json:"platform,omitempty"`
	// 设备型号
	DeviceModel string `json:"device_model,omitempty"`
	// 是否是多合一算法组类型算法, 否/是 0/1
	IsGroupType uint `json:"is_group_type,omitempty"`
	// 算法包服务启动api前缀 ip:port
	Prefix string `json:"prefix,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlgorithmQuery when eager-loading is set.
	Edges        AlgorithmEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AlgorithmEdges holds the relations/edges for other nodes in the graph.
type AlgorithmEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e AlgorithmEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Algorithm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case algorithm.FieldExtend:
			values[i] = new([]byte)
		case algorithm.FieldID, algorithm.FieldNotify, algorithm.FieldDrawType, algorithm.FieldBaseType, algorithm.FieldAvailable, algorithm.FieldAlgoGroupID, algorithm.FieldIsGroupType:
			values[i] = new(sql.NullInt64)
		case algorithm.FieldName, algorithm.FieldType, algorithm.FieldDescription, algorithm.FieldVersion, algorithm.FieldAppName, algorithm.FieldAlarmType, algorithm.FieldAlarmName, algorithm.FieldImage, algorithm.FieldLabelMap, algorithm.FieldTarget, algorithm.FieldAlgoNameEn, algorithm.FieldAlgoGroupName, algorithm.FieldAlgoGroupVersion, algorithm.FieldConfig, algorithm.FieldProvider, algorithm.FieldAlgoID, algorithm.FieldPlatform, algorithm.FieldDeviceModel, algorithm.FieldPrefix:
			values[i] = new(sql.NullString)
		case algorithm.FieldCreatedAt, algorithm.FieldUpdatedAt, algorithm.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Algorithm fields.
func (a *Algorithm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case algorithm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case algorithm.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case algorithm.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case algorithm.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case algorithm.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case algorithm.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case algorithm.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case algorithm.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				a.Version = value.String
			}
		case algorithm.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				a.AppName = value.String
			}
		case algorithm.FieldAlarmType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_type", values[i])
			} else if value.Valid {
				a.AlarmType = value.String
			}
		case algorithm.FieldAlarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_name", values[i])
			} else if value.Valid {
				a.AlarmName = value.String
			}
		case algorithm.FieldNotify:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notify", values[i])
			} else if value.Valid {
				a.Notify = uint(value.Int64)
			}
		case algorithm.FieldExtend:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extend", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Extend); err != nil {
					return fmt.Errorf("unmarshal field extend: %w", err)
				}
			}
		case algorithm.FieldDrawType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field draw_type", values[i])
			} else if value.Valid {
				a.DrawType = uint(value.Int64)
			}
		case algorithm.FieldBaseType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field base_type", values[i])
			} else if value.Valid {
				a.BaseType = uint(value.Int64)
			}
		case algorithm.FieldAvailable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				a.Available = uint(value.Int64)
			}
		case algorithm.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				a.Image = value.String
			}
		case algorithm.FieldLabelMap:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_map", values[i])
			} else if value.Valid {
				a.LabelMap = value.String
			}
		case algorithm.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				a.Target = value.String
			}
		case algorithm.FieldAlgoNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_name_en", values[i])
			} else if value.Valid {
				a.AlgoNameEn = value.String
			}
		case algorithm.FieldAlgoGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_id", values[i])
			} else if value.Valid {
				a.AlgoGroupID = uint(value.Int64)
			}
		case algorithm.FieldAlgoGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_name", values[i])
			} else if value.Valid {
				a.AlgoGroupName = value.String
			}
		case algorithm.FieldAlgoGroupVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_version", values[i])
			} else if value.Valid {
				a.AlgoGroupVersion = value.String
			}
		case algorithm.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				a.Config = value.String
			}
		case algorithm.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				a.Provider = value.String
			}
		case algorithm.FieldAlgoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_id", values[i])
			} else if value.Valid {
				a.AlgoID = value.String
			}
		case algorithm.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				a.Platform = value.String
			}
		case algorithm.FieldDeviceModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_model", values[i])
			} else if value.Valid {
				a.DeviceModel = value.String
			}
		case algorithm.FieldIsGroupType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_group_type", values[i])
			} else if value.Valid {
				a.IsGroupType = uint(value.Int64)
			}
		case algorithm.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				a.Prefix = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Algorithm.
// This includes values selected through modifiers, order, etc.
func (a *Algorithm) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryTasks queries the "tasks" edge of the Algorithm entity.
func (a *Algorithm) QueryTasks() *TaskQuery {
	return NewAlgorithmClient(a.config).QueryTasks(a)
}

// Update returns a builder for updating this Algorithm.
// Note that you need to call Algorithm.Unwrap() before calling this method if this Algorithm
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Algorithm) Update() *AlgorithmUpdateOne {
	return NewAlgorithmClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Algorithm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Algorithm) Unwrap() *Algorithm {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Algorithm is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Algorithm) String() string {
	var builder strings.Builder
	builder.WriteString("Algorithm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(a.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(a.Version)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(a.AppName)
	builder.WriteString(", ")
	builder.WriteString("alarm_type=")
	builder.WriteString(a.AlarmType)
	builder.WriteString(", ")
	builder.WriteString("alarm_name=")
	builder.WriteString(a.AlarmName)
	builder.WriteString(", ")
	builder.WriteString("notify=")
	builder.WriteString(fmt.Sprintf("%v", a.Notify))
	builder.WriteString(", ")
	builder.WriteString("extend=")
	builder.WriteString(fmt.Sprintf("%v", a.Extend))
	builder.WriteString(", ")
	builder.WriteString("draw_type=")
	builder.WriteString(fmt.Sprintf("%v", a.DrawType))
	builder.WriteString(", ")
	builder.WriteString("base_type=")
	builder.WriteString(fmt.Sprintf("%v", a.BaseType))
	builder.WriteString(", ")
	builder.WriteString("available=")
	builder.WriteString(fmt.Sprintf("%v", a.Available))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(a.Image)
	builder.WriteString(", ")
	builder.WriteString("label_map=")
	builder.WriteString(a.LabelMap)
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(a.Target)
	builder.WriteString(", ")
	builder.WriteString("algo_name_en=")
	builder.WriteString(a.AlgoNameEn)
	builder.WriteString(", ")
	builder.WriteString("algo_group_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AlgoGroupID))
	builder.WriteString(", ")
	builder.WriteString("algo_group_name=")
	builder.WriteString(a.AlgoGroupName)
	builder.WriteString(", ")
	builder.WriteString("algo_group_version=")
	builder.WriteString(a.AlgoGroupVersion)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(a.Config)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(a.Provider)
	builder.WriteString(", ")
	builder.WriteString("algo_id=")
	builder.WriteString(a.AlgoID)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(a.Platform)
	builder.WriteString(", ")
	builder.WriteString("device_model=")
	builder.WriteString(a.DeviceModel)
	builder.WriteString(", ")
	builder.WriteString("is_group_type=")
	builder.WriteString(fmt.Sprintf("%v", a.IsGroupType))
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(a.Prefix)
	builder.WriteByte(')')
	return builder.String()
}

// Algorithms is a parsable slice of Algorithm.
type Algorithms []*Algorithm
