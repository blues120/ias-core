// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/tasklimits"
)

// TaskLimitsUpdate is the builder for updating TaskLimits entities.
type TaskLimitsUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskLimitsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskLimitsUpdate builder.
func (tlu *TaskLimitsUpdate) Where(ps ...predicate.TaskLimits) *TaskLimitsUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tlu *TaskLimitsUpdate) SetUpdatedAt(t time.Time) *TaskLimitsUpdate {
	tlu.mutation.SetUpdatedAt(t)
	return tlu
}

// SetDeletedAt sets the "deleted_at" field.
func (tlu *TaskLimitsUpdate) SetDeletedAt(t time.Time) *TaskLimitsUpdate {
	tlu.mutation.SetDeletedAt(t)
	return tlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tlu *TaskLimitsUpdate) SetNillableDeletedAt(t *time.Time) *TaskLimitsUpdate {
	if t != nil {
		tlu.SetDeletedAt(*t)
	}
	return tlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tlu *TaskLimitsUpdate) ClearDeletedAt() *TaskLimitsUpdate {
	tlu.mutation.ClearDeletedAt()
	return tlu
}

// SetModel sets the "model" field.
func (tlu *TaskLimitsUpdate) SetModel(s string) *TaskLimitsUpdate {
	tlu.mutation.SetModel(s)
	return tlu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tlu *TaskLimitsUpdate) SetNillableModel(s *string) *TaskLimitsUpdate {
	if s != nil {
		tlu.SetModel(*s)
	}
	return tlu
}

// ClearModel clears the value of the "model" field.
func (tlu *TaskLimitsUpdate) ClearModel() *TaskLimitsUpdate {
	tlu.mutation.ClearModel()
	return tlu
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (tlu *TaskLimitsUpdate) SetMaxCameraNum(u uint64) *TaskLimitsUpdate {
	tlu.mutation.ResetMaxCameraNum()
	tlu.mutation.SetMaxCameraNum(u)
	return tlu
}

// SetNillableMaxCameraNum sets the "maxCameraNum" field if the given value is not nil.
func (tlu *TaskLimitsUpdate) SetNillableMaxCameraNum(u *uint64) *TaskLimitsUpdate {
	if u != nil {
		tlu.SetMaxCameraNum(*u)
	}
	return tlu
}

// AddMaxCameraNum adds u to the "maxCameraNum" field.
func (tlu *TaskLimitsUpdate) AddMaxCameraNum(u int64) *TaskLimitsUpdate {
	tlu.mutation.AddMaxCameraNum(u)
	return tlu
}

// SetAlgoNum sets the "algoNum" field.
func (tlu *TaskLimitsUpdate) SetAlgoNum(u uint64) *TaskLimitsUpdate {
	tlu.mutation.ResetAlgoNum()
	tlu.mutation.SetAlgoNum(u)
	return tlu
}

// SetNillableAlgoNum sets the "algoNum" field if the given value is not nil.
func (tlu *TaskLimitsUpdate) SetNillableAlgoNum(u *uint64) *TaskLimitsUpdate {
	if u != nil {
		tlu.SetAlgoNum(*u)
	}
	return tlu
}

// AddAlgoNum adds u to the "algoNum" field.
func (tlu *TaskLimitsUpdate) AddAlgoNum(u int64) *TaskLimitsUpdate {
	tlu.mutation.AddAlgoNum(u)
	return tlu
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (tlu *TaskLimitsUpdate) SetMaxSubTaskNum(u uint64) *TaskLimitsUpdate {
	tlu.mutation.ResetMaxSubTaskNum()
	tlu.mutation.SetMaxSubTaskNum(u)
	return tlu
}

// SetNillableMaxSubTaskNum sets the "maxSubTaskNum" field if the given value is not nil.
func (tlu *TaskLimitsUpdate) SetNillableMaxSubTaskNum(u *uint64) *TaskLimitsUpdate {
	if u != nil {
		tlu.SetMaxSubTaskNum(*u)
	}
	return tlu
}

// AddMaxSubTaskNum adds u to the "maxSubTaskNum" field.
func (tlu *TaskLimitsUpdate) AddMaxSubTaskNum(u int64) *TaskLimitsUpdate {
	tlu.mutation.AddMaxSubTaskNum(u)
	return tlu
}

// Mutation returns the TaskLimitsMutation object of the builder.
func (tlu *TaskLimitsUpdate) Mutation() *TaskLimitsMutation {
	return tlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TaskLimitsUpdate) Save(ctx context.Context) (int, error) {
	if err := tlu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TaskLimitsUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TaskLimitsUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TaskLimitsUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TaskLimitsUpdate) defaults() error {
	if _, ok := tlu.mutation.UpdatedAt(); !ok {
		if tasklimits.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tasklimits.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tasklimits.UpdateDefaultUpdatedAt()
		tlu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tlu *TaskLimitsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskLimitsUpdate {
	tlu.modifiers = append(tlu.modifiers, modifiers...)
	return tlu
}

func (tlu *TaskLimitsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasklimits.Table, tasklimits.Columns, sqlgraph.NewFieldSpec(tasklimits.FieldID, field.TypeUint64))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.UpdatedAt(); ok {
		_spec.SetField(tasklimits.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tlu.mutation.DeletedAt(); ok {
		_spec.SetField(tasklimits.FieldDeletedAt, field.TypeTime, value)
	}
	if tlu.mutation.DeletedAtCleared() {
		_spec.ClearField(tasklimits.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tlu.mutation.Model(); ok {
		_spec.SetField(tasklimits.FieldModel, field.TypeString, value)
	}
	if tlu.mutation.ModelCleared() {
		_spec.ClearField(tasklimits.FieldModel, field.TypeString)
	}
	if value, ok := tlu.mutation.MaxCameraNum(); ok {
		_spec.SetField(tasklimits.FieldMaxCameraNum, field.TypeUint64, value)
	}
	if value, ok := tlu.mutation.AddedMaxCameraNum(); ok {
		_spec.AddField(tasklimits.FieldMaxCameraNum, field.TypeUint64, value)
	}
	if value, ok := tlu.mutation.AlgoNum(); ok {
		_spec.SetField(tasklimits.FieldAlgoNum, field.TypeUint64, value)
	}
	if value, ok := tlu.mutation.AddedAlgoNum(); ok {
		_spec.AddField(tasklimits.FieldAlgoNum, field.TypeUint64, value)
	}
	if value, ok := tlu.mutation.MaxSubTaskNum(); ok {
		_spec.SetField(tasklimits.FieldMaxSubTaskNum, field.TypeUint64, value)
	}
	if value, ok := tlu.mutation.AddedMaxSubTaskNum(); ok {
		_spec.AddField(tasklimits.FieldMaxSubTaskNum, field.TypeUint64, value)
	}
	_spec.AddModifiers(tlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklimits.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TaskLimitsUpdateOne is the builder for updating a single TaskLimits entity.
type TaskLimitsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskLimitsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tluo *TaskLimitsUpdateOne) SetUpdatedAt(t time.Time) *TaskLimitsUpdateOne {
	tluo.mutation.SetUpdatedAt(t)
	return tluo
}

// SetDeletedAt sets the "deleted_at" field.
func (tluo *TaskLimitsUpdateOne) SetDeletedAt(t time.Time) *TaskLimitsUpdateOne {
	tluo.mutation.SetDeletedAt(t)
	return tluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tluo *TaskLimitsUpdateOne) SetNillableDeletedAt(t *time.Time) *TaskLimitsUpdateOne {
	if t != nil {
		tluo.SetDeletedAt(*t)
	}
	return tluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tluo *TaskLimitsUpdateOne) ClearDeletedAt() *TaskLimitsUpdateOne {
	tluo.mutation.ClearDeletedAt()
	return tluo
}

// SetModel sets the "model" field.
func (tluo *TaskLimitsUpdateOne) SetModel(s string) *TaskLimitsUpdateOne {
	tluo.mutation.SetModel(s)
	return tluo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tluo *TaskLimitsUpdateOne) SetNillableModel(s *string) *TaskLimitsUpdateOne {
	if s != nil {
		tluo.SetModel(*s)
	}
	return tluo
}

// ClearModel clears the value of the "model" field.
func (tluo *TaskLimitsUpdateOne) ClearModel() *TaskLimitsUpdateOne {
	tluo.mutation.ClearModel()
	return tluo
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (tluo *TaskLimitsUpdateOne) SetMaxCameraNum(u uint64) *TaskLimitsUpdateOne {
	tluo.mutation.ResetMaxCameraNum()
	tluo.mutation.SetMaxCameraNum(u)
	return tluo
}

// SetNillableMaxCameraNum sets the "maxCameraNum" field if the given value is not nil.
func (tluo *TaskLimitsUpdateOne) SetNillableMaxCameraNum(u *uint64) *TaskLimitsUpdateOne {
	if u != nil {
		tluo.SetMaxCameraNum(*u)
	}
	return tluo
}

// AddMaxCameraNum adds u to the "maxCameraNum" field.
func (tluo *TaskLimitsUpdateOne) AddMaxCameraNum(u int64) *TaskLimitsUpdateOne {
	tluo.mutation.AddMaxCameraNum(u)
	return tluo
}

// SetAlgoNum sets the "algoNum" field.
func (tluo *TaskLimitsUpdateOne) SetAlgoNum(u uint64) *TaskLimitsUpdateOne {
	tluo.mutation.ResetAlgoNum()
	tluo.mutation.SetAlgoNum(u)
	return tluo
}

// SetNillableAlgoNum sets the "algoNum" field if the given value is not nil.
func (tluo *TaskLimitsUpdateOne) SetNillableAlgoNum(u *uint64) *TaskLimitsUpdateOne {
	if u != nil {
		tluo.SetAlgoNum(*u)
	}
	return tluo
}

// AddAlgoNum adds u to the "algoNum" field.
func (tluo *TaskLimitsUpdateOne) AddAlgoNum(u int64) *TaskLimitsUpdateOne {
	tluo.mutation.AddAlgoNum(u)
	return tluo
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (tluo *TaskLimitsUpdateOne) SetMaxSubTaskNum(u uint64) *TaskLimitsUpdateOne {
	tluo.mutation.ResetMaxSubTaskNum()
	tluo.mutation.SetMaxSubTaskNum(u)
	return tluo
}

// SetNillableMaxSubTaskNum sets the "maxSubTaskNum" field if the given value is not nil.
func (tluo *TaskLimitsUpdateOne) SetNillableMaxSubTaskNum(u *uint64) *TaskLimitsUpdateOne {
	if u != nil {
		tluo.SetMaxSubTaskNum(*u)
	}
	return tluo
}

// AddMaxSubTaskNum adds u to the "maxSubTaskNum" field.
func (tluo *TaskLimitsUpdateOne) AddMaxSubTaskNum(u int64) *TaskLimitsUpdateOne {
	tluo.mutation.AddMaxSubTaskNum(u)
	return tluo
}

// Mutation returns the TaskLimitsMutation object of the builder.
func (tluo *TaskLimitsUpdateOne) Mutation() *TaskLimitsMutation {
	return tluo.mutation
}

// Where appends a list predicates to the TaskLimitsUpdate builder.
func (tluo *TaskLimitsUpdateOne) Where(ps ...predicate.TaskLimits) *TaskLimitsUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TaskLimitsUpdateOne) Select(field string, fields ...string) *TaskLimitsUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TaskLimits entity.
func (tluo *TaskLimitsUpdateOne) Save(ctx context.Context) (*TaskLimits, error) {
	if err := tluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TaskLimitsUpdateOne) SaveX(ctx context.Context) *TaskLimits {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TaskLimitsUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TaskLimitsUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TaskLimitsUpdateOne) defaults() error {
	if _, ok := tluo.mutation.UpdatedAt(); !ok {
		if tasklimits.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tasklimits.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tasklimits.UpdateDefaultUpdatedAt()
		tluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tluo *TaskLimitsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskLimitsUpdateOne {
	tluo.modifiers = append(tluo.modifiers, modifiers...)
	return tluo
}

func (tluo *TaskLimitsUpdateOne) sqlSave(ctx context.Context) (_node *TaskLimits, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasklimits.Table, tasklimits.Columns, sqlgraph.NewFieldSpec(tasklimits.FieldID, field.TypeUint64))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskLimits.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasklimits.FieldID)
		for _, f := range fields {
			if !tasklimits.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasklimits.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.UpdatedAt(); ok {
		_spec.SetField(tasklimits.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tluo.mutation.DeletedAt(); ok {
		_spec.SetField(tasklimits.FieldDeletedAt, field.TypeTime, value)
	}
	if tluo.mutation.DeletedAtCleared() {
		_spec.ClearField(tasklimits.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tluo.mutation.Model(); ok {
		_spec.SetField(tasklimits.FieldModel, field.TypeString, value)
	}
	if tluo.mutation.ModelCleared() {
		_spec.ClearField(tasklimits.FieldModel, field.TypeString)
	}
	if value, ok := tluo.mutation.MaxCameraNum(); ok {
		_spec.SetField(tasklimits.FieldMaxCameraNum, field.TypeUint64, value)
	}
	if value, ok := tluo.mutation.AddedMaxCameraNum(); ok {
		_spec.AddField(tasklimits.FieldMaxCameraNum, field.TypeUint64, value)
	}
	if value, ok := tluo.mutation.AlgoNum(); ok {
		_spec.SetField(tasklimits.FieldAlgoNum, field.TypeUint64, value)
	}
	if value, ok := tluo.mutation.AddedAlgoNum(); ok {
		_spec.AddField(tasklimits.FieldAlgoNum, field.TypeUint64, value)
	}
	if value, ok := tluo.mutation.MaxSubTaskNum(); ok {
		_spec.SetField(tasklimits.FieldMaxSubTaskNum, field.TypeUint64, value)
	}
	if value, ok := tluo.mutation.AddedMaxSubTaskNum(); ok {
		_spec.AddField(tasklimits.FieldMaxSubTaskNum, field.TypeUint64, value)
	}
	_spec.AddModifiers(tluo.modifiers...)
	_node = &TaskLimits{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklimits.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
