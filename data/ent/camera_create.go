// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz/streaming"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicecamera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/taskcamera"
)

// CameraCreate is the builder for creating a Camera entity.
type CameraCreate struct {
	config
	mutation *CameraMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CameraCreate) SetCreatedAt(t time.Time) *CameraCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CameraCreate) SetNillableCreatedAt(t *time.Time) *CameraCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CameraCreate) SetUpdatedAt(t time.Time) *CameraCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CameraCreate) SetNillableUpdatedAt(t *time.Time) *CameraCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CameraCreate) SetDeletedAt(t time.Time) *CameraCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CameraCreate) SetNillableDeletedAt(t *time.Time) *CameraCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetTenantID sets the "tenant_id" field.
func (cc *CameraCreate) SetTenantID(s string) *CameraCreate {
	cc.mutation.SetTenantID(s)
	return cc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cc *CameraCreate) SetNillableTenantID(s *string) *CameraCreate {
	if s != nil {
		cc.SetTenantID(*s)
	}
	return cc
}

// SetAccessOrgList sets the "access_org_list" field.
func (cc *CameraCreate) SetAccessOrgList(s string) *CameraCreate {
	cc.mutation.SetAccessOrgList(s)
	return cc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (cc *CameraCreate) SetNillableAccessOrgList(s *string) *CameraCreate {
	if s != nil {
		cc.SetAccessOrgList(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CameraCreate) SetName(s string) *CameraCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetPosition sets the "position" field.
func (cc *CameraCreate) SetPosition(s string) *CameraCreate {
	cc.mutation.SetPosition(s)
	return cc
}

// SetRegion sets the "region" field.
func (cc *CameraCreate) SetRegion(s string) *CameraCreate {
	cc.mutation.SetRegion(s)
	return cc
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (cc *CameraCreate) SetNillableRegion(s *string) *CameraCreate {
	if s != nil {
		cc.SetRegion(*s)
	}
	return cc
}

// SetRegionStr sets the "region_str" field.
func (cc *CameraCreate) SetRegionStr(s string) *CameraCreate {
	cc.mutation.SetRegionStr(s)
	return cc
}

// SetNillableRegionStr sets the "region_str" field if the given value is not nil.
func (cc *CameraCreate) SetNillableRegionStr(s *string) *CameraCreate {
	if s != nil {
		cc.SetRegionStr(*s)
	}
	return cc
}

// SetLongitude sets the "longitude" field.
func (cc *CameraCreate) SetLongitude(f float64) *CameraCreate {
	cc.mutation.SetLongitude(f)
	return cc
}

// SetLatitude sets the "latitude" field.
func (cc *CameraCreate) SetLatitude(f float64) *CameraCreate {
	cc.mutation.SetLatitude(f)
	return cc
}

// SetCustomNumber sets the "custom_number" field.
func (cc *CameraCreate) SetCustomNumber(i int) *CameraCreate {
	cc.mutation.SetCustomNumber(i)
	return cc
}

// SetChannelID sets the "channel_id" field.
func (cc *CameraCreate) SetChannelID(s string) *CameraCreate {
	cc.mutation.SetChannelID(s)
	return cc
}

// SetSerialNumber sets the "serial_number" field.
func (cc *CameraCreate) SetSerialNumber(s string) *CameraCreate {
	cc.mutation.SetSerialNumber(s)
	return cc
}

// SetPoleNumber sets the "pole_number" field.
func (cc *CameraCreate) SetPoleNumber(s string) *CameraCreate {
	cc.mutation.SetPoleNumber(s)
	return cc
}

// SetDeviceDescription sets the "device_description" field.
func (cc *CameraCreate) SetDeviceDescription(s string) *CameraCreate {
	cc.mutation.SetDeviceDescription(s)
	return cc
}

// SetScene sets the "scene" field.
func (cc *CameraCreate) SetScene(s string) *CameraCreate {
	cc.mutation.SetScene(s)
	return cc
}

// SetPlace sets the "place" field.
func (cc *CameraCreate) SetPlace(s string) *CameraCreate {
	cc.mutation.SetPlace(s)
	return cc
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (cc *CameraCreate) SetNillablePlace(s *string) *CameraCreate {
	if s != nil {
		cc.SetPlace(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CameraCreate) SetStatus(bs biz.CameraStatus) *CameraCreate {
	cc.mutation.SetStatus(bs)
	return cc
}

// SetSpType sets the "sp_type" field.
func (cc *CameraCreate) SetSpType(st streaming.ProtocolType) *CameraCreate {
	cc.mutation.SetSpType(st)
	return cc
}

// SetSpSource sets the "sp_source" field.
func (cc *CameraCreate) SetSpSource(s string) *CameraCreate {
	cc.mutation.SetSpSource(s)
	return cc
}

// SetSpCodecName sets the "sp_codec_name" field.
func (cc *CameraCreate) SetSpCodecName(s string) *CameraCreate {
	cc.mutation.SetSpCodecName(s)
	return cc
}

// SetSpWidth sets the "sp_width" field.
func (cc *CameraCreate) SetSpWidth(i int32) *CameraCreate {
	cc.mutation.SetSpWidth(i)
	return cc
}

// SetSpHeight sets the "sp_height" field.
func (cc *CameraCreate) SetSpHeight(i int32) *CameraCreate {
	cc.mutation.SetSpHeight(i)
	return cc
}

// SetTransType sets the "trans_type" field.
func (cc *CameraCreate) SetTransType(s string) *CameraCreate {
	cc.mutation.SetTransType(s)
	return cc
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (cc *CameraCreate) SetNillableTransType(s *string) *CameraCreate {
	if s != nil {
		cc.SetTransType(*s)
	}
	return cc
}

// SetDeviceIP sets the "device_ip" field.
func (cc *CameraCreate) SetDeviceIP(s string) *CameraCreate {
	cc.mutation.SetDeviceIP(s)
	return cc
}

// SetNillableDeviceIP sets the "device_ip" field if the given value is not nil.
func (cc *CameraCreate) SetNillableDeviceIP(s *string) *CameraCreate {
	if s != nil {
		cc.SetDeviceIP(*s)
	}
	return cc
}

// SetDevicePort sets the "device_port" field.
func (cc *CameraCreate) SetDevicePort(i int32) *CameraCreate {
	cc.mutation.SetDevicePort(i)
	return cc
}

// SetNillableDevicePort sets the "device_port" field if the given value is not nil.
func (cc *CameraCreate) SetNillableDevicePort(i *int32) *CameraCreate {
	if i != nil {
		cc.SetDevicePort(*i)
	}
	return cc
}

// SetGBID sets the "gb_id" field.
func (cc *CameraCreate) SetGBID(s string) *CameraCreate {
	cc.mutation.SetGBID(s)
	return cc
}

// SetNillableGBID sets the "gb_id" field if the given value is not nil.
func (cc *CameraCreate) SetNillableGBID(s *string) *CameraCreate {
	if s != nil {
		cc.SetGBID(*s)
	}
	return cc
}

// SetSipUser sets the "sip_user" field.
func (cc *CameraCreate) SetSipUser(s string) *CameraCreate {
	cc.mutation.SetSipUser(s)
	return cc
}

// SetNillableSipUser sets the "sip_user" field if the given value is not nil.
func (cc *CameraCreate) SetNillableSipUser(s *string) *CameraCreate {
	if s != nil {
		cc.SetSipUser(*s)
	}
	return cc
}

// SetSipPassword sets the "sip_password" field.
func (cc *CameraCreate) SetSipPassword(s string) *CameraCreate {
	cc.mutation.SetSipPassword(s)
	return cc
}

// SetNillableSipPassword sets the "sip_password" field if the given value is not nil.
func (cc *CameraCreate) SetNillableSipPassword(s *string) *CameraCreate {
	if s != nil {
		cc.SetSipPassword(*s)
	}
	return cc
}

// SetGBChannelID sets the "gb_channel_id" field.
func (cc *CameraCreate) SetGBChannelID(s string) *CameraCreate {
	cc.mutation.SetGBChannelID(s)
	return cc
}

// SetNillableGBChannelID sets the "gb_channel_id" field if the given value is not nil.
func (cc *CameraCreate) SetNillableGBChannelID(s *string) *CameraCreate {
	if s != nil {
		cc.SetGBChannelID(*s)
	}
	return cc
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (cc *CameraCreate) SetUpGBChannelID(s string) *CameraCreate {
	cc.mutation.SetUpGBChannelID(s)
	return cc
}

// SetNillableUpGBChannelID sets the "up_gb_channel_id" field if the given value is not nil.
func (cc *CameraCreate) SetNillableUpGBChannelID(s *string) *CameraCreate {
	if s != nil {
		cc.SetUpGBChannelID(*s)
	}
	return cc
}

// SetGBDeviceType sets the "gb_device_type" field.
func (cc *CameraCreate) SetGBDeviceType(s string) *CameraCreate {
	cc.mutation.SetGBDeviceType(s)
	return cc
}

// SetNillableGBDeviceType sets the "gb_device_type" field if the given value is not nil.
func (cc *CameraCreate) SetNillableGBDeviceType(s *string) *CameraCreate {
	if s != nil {
		cc.SetGBDeviceType(*s)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CameraCreate) SetType(bt biz.MediaType) *CameraCreate {
	cc.mutation.SetType(bt)
	return cc
}

// SetID sets the "id" field.
func (cc *CameraCreate) SetID(u uint64) *CameraCreate {
	cc.mutation.SetID(u)
	return cc
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cc *CameraCreate) AddTaskIDs(ids ...uint64) *CameraCreate {
	cc.mutation.AddTaskIDs(ids...)
	return cc
}

// AddTask adds the "task" edges to the Task entity.
func (cc *CameraCreate) AddTask(t ...*Task) *CameraCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTaskIDs(ids...)
}

// AddDeviceIDs adds the "device" edge to the Device entity by IDs.
func (cc *CameraCreate) AddDeviceIDs(ids ...uint64) *CameraCreate {
	cc.mutation.AddDeviceIDs(ids...)
	return cc
}

// AddDevice adds the "device" edges to the Device entity.
func (cc *CameraCreate) AddDevice(d ...*Device) *CameraCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeviceIDs(ids...)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (cc *CameraCreate) AddTaskCameraIDs(ids ...uint64) *CameraCreate {
	cc.mutation.AddTaskCameraIDs(ids...)
	return cc
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (cc *CameraCreate) AddTaskCamera(t ...*TaskCamera) *CameraCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTaskCameraIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (cc *CameraCreate) AddDeviceCameraIDs(ids ...uint64) *CameraCreate {
	cc.mutation.AddDeviceCameraIDs(ids...)
	return cc
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (cc *CameraCreate) AddDeviceCamera(d ...*DeviceCamera) *CameraCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeviceCameraIDs(ids...)
}

// Mutation returns the CameraMutation object of the builder.
func (cc *CameraCreate) Mutation() *CameraMutation {
	return cc.mutation
}

// Save creates the Camera in the database.
func (cc *CameraCreate) Save(ctx context.Context) (*Camera, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CameraCreate) SaveX(ctx context.Context) *Camera {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CameraCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CameraCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CameraCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if camera.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized camera.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := camera.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if camera.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized camera.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := camera.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Place(); !ok {
		v := camera.DefaultPlace
		cc.mutation.SetPlace(v)
	}
	if _, ok := cc.mutation.TransType(); !ok {
		v := camera.DefaultTransType
		cc.mutation.SetTransType(v)
	}
	if _, ok := cc.mutation.DeviceIP(); !ok {
		v := camera.DefaultDeviceIP
		cc.mutation.SetDeviceIP(v)
	}
	if _, ok := cc.mutation.DevicePort(); !ok {
		v := camera.DefaultDevicePort
		cc.mutation.SetDevicePort(v)
	}
	if _, ok := cc.mutation.GBID(); !ok {
		v := camera.DefaultGBID
		cc.mutation.SetGBID(v)
	}
	if _, ok := cc.mutation.SipUser(); !ok {
		v := camera.DefaultSipUser
		cc.mutation.SetSipUser(v)
	}
	if _, ok := cc.mutation.SipPassword(); !ok {
		v := camera.DefaultSipPassword
		cc.mutation.SetSipPassword(v)
	}
	if _, ok := cc.mutation.GBChannelID(); !ok {
		v := camera.DefaultGBChannelID
		cc.mutation.SetGBChannelID(v)
	}
	if _, ok := cc.mutation.UpGBChannelID(); !ok {
		v := camera.DefaultUpGBChannelID
		cc.mutation.SetUpGBChannelID(v)
	}
	if _, ok := cc.mutation.GBDeviceType(); !ok {
		v := camera.DefaultGBDeviceType
		cc.mutation.SetGBDeviceType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CameraCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Camera.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Camera.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Camera.name"`)}
	}
	if _, ok := cc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Camera.position"`)}
	}
	if _, ok := cc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Camera.longitude"`)}
	}
	if _, ok := cc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Camera.latitude"`)}
	}
	if _, ok := cc.mutation.CustomNumber(); !ok {
		return &ValidationError{Name: "custom_number", err: errors.New(`ent: missing required field "Camera.custom_number"`)}
	}
	if _, ok := cc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "Camera.channel_id"`)}
	}
	if _, ok := cc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`ent: missing required field "Camera.serial_number"`)}
	}
	if _, ok := cc.mutation.PoleNumber(); !ok {
		return &ValidationError{Name: "pole_number", err: errors.New(`ent: missing required field "Camera.pole_number"`)}
	}
	if _, ok := cc.mutation.DeviceDescription(); !ok {
		return &ValidationError{Name: "device_description", err: errors.New(`ent: missing required field "Camera.device_description"`)}
	}
	if _, ok := cc.mutation.Scene(); !ok {
		return &ValidationError{Name: "scene", err: errors.New(`ent: missing required field "Camera.scene"`)}
	}
	if _, ok := cc.mutation.Place(); !ok {
		return &ValidationError{Name: "place", err: errors.New(`ent: missing required field "Camera.place"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Camera.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := camera.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Camera.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SpType(); !ok {
		return &ValidationError{Name: "sp_type", err: errors.New(`ent: missing required field "Camera.sp_type"`)}
	}
	if v, ok := cc.mutation.SpType(); ok {
		if err := camera.SpTypeValidator(v); err != nil {
			return &ValidationError{Name: "sp_type", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SpSource(); !ok {
		return &ValidationError{Name: "sp_source", err: errors.New(`ent: missing required field "Camera.sp_source"`)}
	}
	if v, ok := cc.mutation.SpSource(); ok {
		if err := camera.SpSourceValidator(v); err != nil {
			return &ValidationError{Name: "sp_source", err: fmt.Errorf(`ent: validator failed for field "Camera.sp_source": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SpCodecName(); !ok {
		return &ValidationError{Name: "sp_codec_name", err: errors.New(`ent: missing required field "Camera.sp_codec_name"`)}
	}
	if _, ok := cc.mutation.SpWidth(); !ok {
		return &ValidationError{Name: "sp_width", err: errors.New(`ent: missing required field "Camera.sp_width"`)}
	}
	if _, ok := cc.mutation.SpHeight(); !ok {
		return &ValidationError{Name: "sp_height", err: errors.New(`ent: missing required field "Camera.sp_height"`)}
	}
	if _, ok := cc.mutation.TransType(); !ok {
		return &ValidationError{Name: "trans_type", err: errors.New(`ent: missing required field "Camera.trans_type"`)}
	}
	if _, ok := cc.mutation.DeviceIP(); !ok {
		return &ValidationError{Name: "device_ip", err: errors.New(`ent: missing required field "Camera.device_ip"`)}
	}
	if _, ok := cc.mutation.DevicePort(); !ok {
		return &ValidationError{Name: "device_port", err: errors.New(`ent: missing required field "Camera.device_port"`)}
	}
	if _, ok := cc.mutation.GBID(); !ok {
		return &ValidationError{Name: "gb_id", err: errors.New(`ent: missing required field "Camera.gb_id"`)}
	}
	if _, ok := cc.mutation.SipUser(); !ok {
		return &ValidationError{Name: "sip_user", err: errors.New(`ent: missing required field "Camera.sip_user"`)}
	}
	if _, ok := cc.mutation.SipPassword(); !ok {
		return &ValidationError{Name: "sip_password", err: errors.New(`ent: missing required field "Camera.sip_password"`)}
	}
	if _, ok := cc.mutation.GBChannelID(); !ok {
		return &ValidationError{Name: "gb_channel_id", err: errors.New(`ent: missing required field "Camera.gb_channel_id"`)}
	}
	if _, ok := cc.mutation.UpGBChannelID(); !ok {
		return &ValidationError{Name: "up_gb_channel_id", err: errors.New(`ent: missing required field "Camera.up_gb_channel_id"`)}
	}
	if _, ok := cc.mutation.GBDeviceType(); !ok {
		return &ValidationError{Name: "gb_device_type", err: errors.New(`ent: missing required field "Camera.gb_device_type"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Camera.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := camera.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Camera.type": %w`, err)}
		}
	}
	return nil
}

func (cc *CameraCreate) sqlSave(ctx context.Context) (*Camera, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CameraCreate) createSpec() (*Camera, *sqlgraph.CreateSpec) {
	var (
		_node = &Camera{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(camera.Table, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(camera.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(camera.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.TenantID(); ok {
		_spec.SetField(camera.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cc.mutation.AccessOrgList(); ok {
		_spec.SetField(camera.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Position(); ok {
		_spec.SetField(camera.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := cc.mutation.Region(); ok {
		_spec.SetField(camera.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := cc.mutation.RegionStr(); ok {
		_spec.SetField(camera.FieldRegionStr, field.TypeString, value)
		_node.RegionStr = value
	}
	if value, ok := cc.mutation.Longitude(); ok {
		_spec.SetField(camera.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := cc.mutation.Latitude(); ok {
		_spec.SetField(camera.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := cc.mutation.CustomNumber(); ok {
		_spec.SetField(camera.FieldCustomNumber, field.TypeInt, value)
		_node.CustomNumber = value
	}
	if value, ok := cc.mutation.ChannelID(); ok {
		_spec.SetField(camera.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := cc.mutation.SerialNumber(); ok {
		_spec.SetField(camera.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := cc.mutation.PoleNumber(); ok {
		_spec.SetField(camera.FieldPoleNumber, field.TypeString, value)
		_node.PoleNumber = value
	}
	if value, ok := cc.mutation.DeviceDescription(); ok {
		_spec.SetField(camera.FieldDeviceDescription, field.TypeString, value)
		_node.DeviceDescription = value
	}
	if value, ok := cc.mutation.Scene(); ok {
		_spec.SetField(camera.FieldScene, field.TypeString, value)
		_node.Scene = value
	}
	if value, ok := cc.mutation.Place(); ok {
		_spec.SetField(camera.FieldPlace, field.TypeString, value)
		_node.Place = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(camera.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.SpType(); ok {
		_spec.SetField(camera.FieldSpType, field.TypeEnum, value)
		_node.SpType = value
	}
	if value, ok := cc.mutation.SpSource(); ok {
		_spec.SetField(camera.FieldSpSource, field.TypeString, value)
		_node.SpSource = value
	}
	if value, ok := cc.mutation.SpCodecName(); ok {
		_spec.SetField(camera.FieldSpCodecName, field.TypeString, value)
		_node.SpCodecName = value
	}
	if value, ok := cc.mutation.SpWidth(); ok {
		_spec.SetField(camera.FieldSpWidth, field.TypeInt32, value)
		_node.SpWidth = value
	}
	if value, ok := cc.mutation.SpHeight(); ok {
		_spec.SetField(camera.FieldSpHeight, field.TypeInt32, value)
		_node.SpHeight = value
	}
	if value, ok := cc.mutation.TransType(); ok {
		_spec.SetField(camera.FieldTransType, field.TypeString, value)
		_node.TransType = value
	}
	if value, ok := cc.mutation.DeviceIP(); ok {
		_spec.SetField(camera.FieldDeviceIP, field.TypeString, value)
		_node.DeviceIP = value
	}
	if value, ok := cc.mutation.DevicePort(); ok {
		_spec.SetField(camera.FieldDevicePort, field.TypeInt32, value)
		_node.DevicePort = value
	}
	if value, ok := cc.mutation.GBID(); ok {
		_spec.SetField(camera.FieldGBID, field.TypeString, value)
		_node.GBID = value
	}
	if value, ok := cc.mutation.SipUser(); ok {
		_spec.SetField(camera.FieldSipUser, field.TypeString, value)
		_node.SipUser = value
	}
	if value, ok := cc.mutation.SipPassword(); ok {
		_spec.SetField(camera.FieldSipPassword, field.TypeString, value)
		_node.SipPassword = value
	}
	if value, ok := cc.mutation.GBChannelID(); ok {
		_spec.SetField(camera.FieldGBChannelID, field.TypeString, value)
		_node.GBChannelID = value
	}
	if value, ok := cc.mutation.UpGBChannelID(); ok {
		_spec.SetField(camera.FieldUpGBChannelID, field.TypeString, value)
		_node.UpGBChannelID = value
	}
	if value, ok := cc.mutation.GBDeviceType(); ok {
		_spec.SetField(camera.FieldGBDeviceType, field.TypeString, value)
		_node.GBDeviceType = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(camera.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := cc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.TaskTable,
			Columns: camera.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: cc.config, mutation: newTaskCameraMutation(cc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   camera.DeviceTable,
			Columns: camera.DevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: cc.config, mutation: newDeviceCameraMutation(cc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TaskCameraTable,
			Columns: []string{camera.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.DeviceCameraTable,
			Columns: []string{camera.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Camera.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CameraCreate) OnConflict(opts ...sql.ConflictOption) *CameraUpsertOne {
	cc.conflict = opts
	return &CameraUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Camera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CameraCreate) OnConflictColumns(columns ...string) *CameraUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CameraUpsertOne{
		create: cc,
	}
}

type (
	// CameraUpsertOne is the builder for "upsert"-ing
	//  one Camera node.
	CameraUpsertOne struct {
		create *CameraCreate
	}

	// CameraUpsert is the "OnConflict" setter.
	CameraUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CameraUpsert) SetUpdatedAt(v time.Time) *CameraUpsert {
	u.Set(camera.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CameraUpsert) UpdateUpdatedAt() *CameraUpsert {
	u.SetExcluded(camera.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CameraUpsert) SetDeletedAt(v time.Time) *CameraUpsert {
	u.Set(camera.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CameraUpsert) UpdateDeletedAt() *CameraUpsert {
	u.SetExcluded(camera.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CameraUpsert) ClearDeletedAt() *CameraUpsert {
	u.SetNull(camera.FieldDeletedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CameraUpsert) SetTenantID(v string) *CameraUpsert {
	u.Set(camera.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CameraUpsert) UpdateTenantID() *CameraUpsert {
	u.SetExcluded(camera.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *CameraUpsert) ClearTenantID() *CameraUpsert {
	u.SetNull(camera.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *CameraUpsert) SetAccessOrgList(v string) *CameraUpsert {
	u.Set(camera.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *CameraUpsert) UpdateAccessOrgList() *CameraUpsert {
	u.SetExcluded(camera.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *CameraUpsert) ClearAccessOrgList() *CameraUpsert {
	u.SetNull(camera.FieldAccessOrgList)
	return u
}

// SetName sets the "name" field.
func (u *CameraUpsert) SetName(v string) *CameraUpsert {
	u.Set(camera.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CameraUpsert) UpdateName() *CameraUpsert {
	u.SetExcluded(camera.FieldName)
	return u
}

// SetPosition sets the "position" field.
func (u *CameraUpsert) SetPosition(v string) *CameraUpsert {
	u.Set(camera.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *CameraUpsert) UpdatePosition() *CameraUpsert {
	u.SetExcluded(camera.FieldPosition)
	return u
}

// SetRegion sets the "region" field.
func (u *CameraUpsert) SetRegion(v string) *CameraUpsert {
	u.Set(camera.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *CameraUpsert) UpdateRegion() *CameraUpsert {
	u.SetExcluded(camera.FieldRegion)
	return u
}

// ClearRegion clears the value of the "region" field.
func (u *CameraUpsert) ClearRegion() *CameraUpsert {
	u.SetNull(camera.FieldRegion)
	return u
}

// SetRegionStr sets the "region_str" field.
func (u *CameraUpsert) SetRegionStr(v string) *CameraUpsert {
	u.Set(camera.FieldRegionStr, v)
	return u
}

// UpdateRegionStr sets the "region_str" field to the value that was provided on create.
func (u *CameraUpsert) UpdateRegionStr() *CameraUpsert {
	u.SetExcluded(camera.FieldRegionStr)
	return u
}

// ClearRegionStr clears the value of the "region_str" field.
func (u *CameraUpsert) ClearRegionStr() *CameraUpsert {
	u.SetNull(camera.FieldRegionStr)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *CameraUpsert) SetLongitude(v float64) *CameraUpsert {
	u.Set(camera.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *CameraUpsert) UpdateLongitude() *CameraUpsert {
	u.SetExcluded(camera.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *CameraUpsert) AddLongitude(v float64) *CameraUpsert {
	u.Add(camera.FieldLongitude, v)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *CameraUpsert) SetLatitude(v float64) *CameraUpsert {
	u.Set(camera.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *CameraUpsert) UpdateLatitude() *CameraUpsert {
	u.SetExcluded(camera.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *CameraUpsert) AddLatitude(v float64) *CameraUpsert {
	u.Add(camera.FieldLatitude, v)
	return u
}

// SetCustomNumber sets the "custom_number" field.
func (u *CameraUpsert) SetCustomNumber(v int) *CameraUpsert {
	u.Set(camera.FieldCustomNumber, v)
	return u
}

// UpdateCustomNumber sets the "custom_number" field to the value that was provided on create.
func (u *CameraUpsert) UpdateCustomNumber() *CameraUpsert {
	u.SetExcluded(camera.FieldCustomNumber)
	return u
}

// AddCustomNumber adds v to the "custom_number" field.
func (u *CameraUpsert) AddCustomNumber(v int) *CameraUpsert {
	u.Add(camera.FieldCustomNumber, v)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *CameraUpsert) SetChannelID(v string) *CameraUpsert {
	u.Set(camera.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CameraUpsert) UpdateChannelID() *CameraUpsert {
	u.SetExcluded(camera.FieldChannelID)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *CameraUpsert) SetSerialNumber(v string) *CameraUpsert {
	u.Set(camera.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSerialNumber() *CameraUpsert {
	u.SetExcluded(camera.FieldSerialNumber)
	return u
}

// SetPoleNumber sets the "pole_number" field.
func (u *CameraUpsert) SetPoleNumber(v string) *CameraUpsert {
	u.Set(camera.FieldPoleNumber, v)
	return u
}

// UpdatePoleNumber sets the "pole_number" field to the value that was provided on create.
func (u *CameraUpsert) UpdatePoleNumber() *CameraUpsert {
	u.SetExcluded(camera.FieldPoleNumber)
	return u
}

// SetDeviceDescription sets the "device_description" field.
func (u *CameraUpsert) SetDeviceDescription(v string) *CameraUpsert {
	u.Set(camera.FieldDeviceDescription, v)
	return u
}

// UpdateDeviceDescription sets the "device_description" field to the value that was provided on create.
func (u *CameraUpsert) UpdateDeviceDescription() *CameraUpsert {
	u.SetExcluded(camera.FieldDeviceDescription)
	return u
}

// SetScene sets the "scene" field.
func (u *CameraUpsert) SetScene(v string) *CameraUpsert {
	u.Set(camera.FieldScene, v)
	return u
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *CameraUpsert) UpdateScene() *CameraUpsert {
	u.SetExcluded(camera.FieldScene)
	return u
}

// SetPlace sets the "place" field.
func (u *CameraUpsert) SetPlace(v string) *CameraUpsert {
	u.Set(camera.FieldPlace, v)
	return u
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *CameraUpsert) UpdatePlace() *CameraUpsert {
	u.SetExcluded(camera.FieldPlace)
	return u
}

// SetStatus sets the "status" field.
func (u *CameraUpsert) SetStatus(v biz.CameraStatus) *CameraUpsert {
	u.Set(camera.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CameraUpsert) UpdateStatus() *CameraUpsert {
	u.SetExcluded(camera.FieldStatus)
	return u
}

// SetSpType sets the "sp_type" field.
func (u *CameraUpsert) SetSpType(v streaming.ProtocolType) *CameraUpsert {
	u.Set(camera.FieldSpType, v)
	return u
}

// UpdateSpType sets the "sp_type" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSpType() *CameraUpsert {
	u.SetExcluded(camera.FieldSpType)
	return u
}

// SetSpSource sets the "sp_source" field.
func (u *CameraUpsert) SetSpSource(v string) *CameraUpsert {
	u.Set(camera.FieldSpSource, v)
	return u
}

// UpdateSpSource sets the "sp_source" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSpSource() *CameraUpsert {
	u.SetExcluded(camera.FieldSpSource)
	return u
}

// SetSpCodecName sets the "sp_codec_name" field.
func (u *CameraUpsert) SetSpCodecName(v string) *CameraUpsert {
	u.Set(camera.FieldSpCodecName, v)
	return u
}

// UpdateSpCodecName sets the "sp_codec_name" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSpCodecName() *CameraUpsert {
	u.SetExcluded(camera.FieldSpCodecName)
	return u
}

// SetSpWidth sets the "sp_width" field.
func (u *CameraUpsert) SetSpWidth(v int32) *CameraUpsert {
	u.Set(camera.FieldSpWidth, v)
	return u
}

// UpdateSpWidth sets the "sp_width" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSpWidth() *CameraUpsert {
	u.SetExcluded(camera.FieldSpWidth)
	return u
}

// AddSpWidth adds v to the "sp_width" field.
func (u *CameraUpsert) AddSpWidth(v int32) *CameraUpsert {
	u.Add(camera.FieldSpWidth, v)
	return u
}

// SetSpHeight sets the "sp_height" field.
func (u *CameraUpsert) SetSpHeight(v int32) *CameraUpsert {
	u.Set(camera.FieldSpHeight, v)
	return u
}

// UpdateSpHeight sets the "sp_height" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSpHeight() *CameraUpsert {
	u.SetExcluded(camera.FieldSpHeight)
	return u
}

// AddSpHeight adds v to the "sp_height" field.
func (u *CameraUpsert) AddSpHeight(v int32) *CameraUpsert {
	u.Add(camera.FieldSpHeight, v)
	return u
}

// SetTransType sets the "trans_type" field.
func (u *CameraUpsert) SetTransType(v string) *CameraUpsert {
	u.Set(camera.FieldTransType, v)
	return u
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *CameraUpsert) UpdateTransType() *CameraUpsert {
	u.SetExcluded(camera.FieldTransType)
	return u
}

// SetDeviceIP sets the "device_ip" field.
func (u *CameraUpsert) SetDeviceIP(v string) *CameraUpsert {
	u.Set(camera.FieldDeviceIP, v)
	return u
}

// UpdateDeviceIP sets the "device_ip" field to the value that was provided on create.
func (u *CameraUpsert) UpdateDeviceIP() *CameraUpsert {
	u.SetExcluded(camera.FieldDeviceIP)
	return u
}

// SetDevicePort sets the "device_port" field.
func (u *CameraUpsert) SetDevicePort(v int32) *CameraUpsert {
	u.Set(camera.FieldDevicePort, v)
	return u
}

// UpdateDevicePort sets the "device_port" field to the value that was provided on create.
func (u *CameraUpsert) UpdateDevicePort() *CameraUpsert {
	u.SetExcluded(camera.FieldDevicePort)
	return u
}

// AddDevicePort adds v to the "device_port" field.
func (u *CameraUpsert) AddDevicePort(v int32) *CameraUpsert {
	u.Add(camera.FieldDevicePort, v)
	return u
}

// SetGBID sets the "gb_id" field.
func (u *CameraUpsert) SetGBID(v string) *CameraUpsert {
	u.Set(camera.FieldGBID, v)
	return u
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *CameraUpsert) UpdateGBID() *CameraUpsert {
	u.SetExcluded(camera.FieldGBID)
	return u
}

// SetSipUser sets the "sip_user" field.
func (u *CameraUpsert) SetSipUser(v string) *CameraUpsert {
	u.Set(camera.FieldSipUser, v)
	return u
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSipUser() *CameraUpsert {
	u.SetExcluded(camera.FieldSipUser)
	return u
}

// SetSipPassword sets the "sip_password" field.
func (u *CameraUpsert) SetSipPassword(v string) *CameraUpsert {
	u.Set(camera.FieldSipPassword, v)
	return u
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *CameraUpsert) UpdateSipPassword() *CameraUpsert {
	u.SetExcluded(camera.FieldSipPassword)
	return u
}

// SetGBChannelID sets the "gb_channel_id" field.
func (u *CameraUpsert) SetGBChannelID(v string) *CameraUpsert {
	u.Set(camera.FieldGBChannelID, v)
	return u
}

// UpdateGBChannelID sets the "gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsert) UpdateGBChannelID() *CameraUpsert {
	u.SetExcluded(camera.FieldGBChannelID)
	return u
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (u *CameraUpsert) SetUpGBChannelID(v string) *CameraUpsert {
	u.Set(camera.FieldUpGBChannelID, v)
	return u
}

// UpdateUpGBChannelID sets the "up_gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsert) UpdateUpGBChannelID() *CameraUpsert {
	u.SetExcluded(camera.FieldUpGBChannelID)
	return u
}

// SetGBDeviceType sets the "gb_device_type" field.
func (u *CameraUpsert) SetGBDeviceType(v string) *CameraUpsert {
	u.Set(camera.FieldGBDeviceType, v)
	return u
}

// UpdateGBDeviceType sets the "gb_device_type" field to the value that was provided on create.
func (u *CameraUpsert) UpdateGBDeviceType() *CameraUpsert {
	u.SetExcluded(camera.FieldGBDeviceType)
	return u
}

// SetType sets the "type" field.
func (u *CameraUpsert) SetType(v biz.MediaType) *CameraUpsert {
	u.Set(camera.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CameraUpsert) UpdateType() *CameraUpsert {
	u.SetExcluded(camera.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Camera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(camera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CameraUpsertOne) UpdateNewValues() *CameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(camera.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(camera.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Camera.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CameraUpsertOne) Ignore() *CameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CameraUpsertOne) DoNothing() *CameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CameraCreate.OnConflict
// documentation for more info.
func (u *CameraUpsertOne) Update(set func(*CameraUpsert)) *CameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CameraUpsertOne) SetUpdatedAt(v time.Time) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateUpdatedAt() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CameraUpsertOne) SetDeletedAt(v time.Time) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateDeletedAt() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CameraUpsertOne) ClearDeletedAt() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *CameraUpsertOne) SetTenantID(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateTenantID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *CameraUpsertOne) ClearTenantID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *CameraUpsertOne) SetAccessOrgList(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateAccessOrgList() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *CameraUpsertOne) ClearAccessOrgList() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *CameraUpsertOne) SetName(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateName() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateName()
	})
}

// SetPosition sets the "position" field.
func (u *CameraUpsertOne) SetPosition(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdatePosition() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePosition()
	})
}

// SetRegion sets the "region" field.
func (u *CameraUpsertOne) SetRegion(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateRegion() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *CameraUpsertOne) ClearRegion() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.ClearRegion()
	})
}

// SetRegionStr sets the "region_str" field.
func (u *CameraUpsertOne) SetRegionStr(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetRegionStr(v)
	})
}

// UpdateRegionStr sets the "region_str" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateRegionStr() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateRegionStr()
	})
}

// ClearRegionStr clears the value of the "region_str" field.
func (u *CameraUpsertOne) ClearRegionStr() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.ClearRegionStr()
	})
}

// SetLongitude sets the "longitude" field.
func (u *CameraUpsertOne) SetLongitude(v float64) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *CameraUpsertOne) AddLongitude(v float64) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateLongitude() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateLongitude()
	})
}

// SetLatitude sets the "latitude" field.
func (u *CameraUpsertOne) SetLatitude(v float64) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *CameraUpsertOne) AddLatitude(v float64) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateLatitude() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateLatitude()
	})
}

// SetCustomNumber sets the "custom_number" field.
func (u *CameraUpsertOne) SetCustomNumber(v int) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetCustomNumber(v)
	})
}

// AddCustomNumber adds v to the "custom_number" field.
func (u *CameraUpsertOne) AddCustomNumber(v int) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddCustomNumber(v)
	})
}

// UpdateCustomNumber sets the "custom_number" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateCustomNumber() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateCustomNumber()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *CameraUpsertOne) SetChannelID(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateChannelID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateChannelID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *CameraUpsertOne) SetSerialNumber(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSerialNumber() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetPoleNumber sets the "pole_number" field.
func (u *CameraUpsertOne) SetPoleNumber(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetPoleNumber(v)
	})
}

// UpdatePoleNumber sets the "pole_number" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdatePoleNumber() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePoleNumber()
	})
}

// SetDeviceDescription sets the "device_description" field.
func (u *CameraUpsertOne) SetDeviceDescription(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeviceDescription(v)
	})
}

// UpdateDeviceDescription sets the "device_description" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateDeviceDescription() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeviceDescription()
	})
}

// SetScene sets the "scene" field.
func (u *CameraUpsertOne) SetScene(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetScene(v)
	})
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateScene() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateScene()
	})
}

// SetPlace sets the "place" field.
func (u *CameraUpsertOne) SetPlace(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdatePlace() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePlace()
	})
}

// SetStatus sets the "status" field.
func (u *CameraUpsertOne) SetStatus(v biz.CameraStatus) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateStatus() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateStatus()
	})
}

// SetSpType sets the "sp_type" field.
func (u *CameraUpsertOne) SetSpType(v streaming.ProtocolType) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpType(v)
	})
}

// UpdateSpType sets the "sp_type" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSpType() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpType()
	})
}

// SetSpSource sets the "sp_source" field.
func (u *CameraUpsertOne) SetSpSource(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpSource(v)
	})
}

// UpdateSpSource sets the "sp_source" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSpSource() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpSource()
	})
}

// SetSpCodecName sets the "sp_codec_name" field.
func (u *CameraUpsertOne) SetSpCodecName(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpCodecName(v)
	})
}

// UpdateSpCodecName sets the "sp_codec_name" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSpCodecName() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpCodecName()
	})
}

// SetSpWidth sets the "sp_width" field.
func (u *CameraUpsertOne) SetSpWidth(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpWidth(v)
	})
}

// AddSpWidth adds v to the "sp_width" field.
func (u *CameraUpsertOne) AddSpWidth(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddSpWidth(v)
	})
}

// UpdateSpWidth sets the "sp_width" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSpWidth() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpWidth()
	})
}

// SetSpHeight sets the "sp_height" field.
func (u *CameraUpsertOne) SetSpHeight(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpHeight(v)
	})
}

// AddSpHeight adds v to the "sp_height" field.
func (u *CameraUpsertOne) AddSpHeight(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddSpHeight(v)
	})
}

// UpdateSpHeight sets the "sp_height" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSpHeight() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpHeight()
	})
}

// SetTransType sets the "trans_type" field.
func (u *CameraUpsertOne) SetTransType(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateTransType() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateTransType()
	})
}

// SetDeviceIP sets the "device_ip" field.
func (u *CameraUpsertOne) SetDeviceIP(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeviceIP(v)
	})
}

// UpdateDeviceIP sets the "device_ip" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateDeviceIP() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeviceIP()
	})
}

// SetDevicePort sets the "device_port" field.
func (u *CameraUpsertOne) SetDevicePort(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetDevicePort(v)
	})
}

// AddDevicePort adds v to the "device_port" field.
func (u *CameraUpsertOne) AddDevicePort(v int32) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.AddDevicePort(v)
	})
}

// UpdateDevicePort sets the "device_port" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateDevicePort() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDevicePort()
	})
}

// SetGBID sets the "gb_id" field.
func (u *CameraUpsertOne) SetGBID(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBID(v)
	})
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateGBID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBID()
	})
}

// SetSipUser sets the "sip_user" field.
func (u *CameraUpsertOne) SetSipUser(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSipUser(v)
	})
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSipUser() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSipUser()
	})
}

// SetSipPassword sets the "sip_password" field.
func (u *CameraUpsertOne) SetSipPassword(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetSipPassword(v)
	})
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateSipPassword() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSipPassword()
	})
}

// SetGBChannelID sets the "gb_channel_id" field.
func (u *CameraUpsertOne) SetGBChannelID(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBChannelID(v)
	})
}

// UpdateGBChannelID sets the "gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateGBChannelID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBChannelID()
	})
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (u *CameraUpsertOne) SetUpGBChannelID(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetUpGBChannelID(v)
	})
}

// UpdateUpGBChannelID sets the "up_gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateUpGBChannelID() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateUpGBChannelID()
	})
}

// SetGBDeviceType sets the "gb_device_type" field.
func (u *CameraUpsertOne) SetGBDeviceType(v string) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBDeviceType(v)
	})
}

// UpdateGBDeviceType sets the "gb_device_type" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateGBDeviceType() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBDeviceType()
	})
}

// SetType sets the "type" field.
func (u *CameraUpsertOne) SetType(v biz.MediaType) *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CameraUpsertOne) UpdateType() *CameraUpsertOne {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *CameraUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CameraCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CameraUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CameraUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CameraUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CameraCreateBulk is the builder for creating many Camera entities in bulk.
type CameraCreateBulk struct {
	config
	err      error
	builders []*CameraCreate
	conflict []sql.ConflictOption
}

// Save creates the Camera entities in the database.
func (ccb *CameraCreateBulk) Save(ctx context.Context) ([]*Camera, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Camera, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CameraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CameraCreateBulk) SaveX(ctx context.Context) []*Camera {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CameraCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CameraCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Camera.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CameraCreateBulk) OnConflict(opts ...sql.ConflictOption) *CameraUpsertBulk {
	ccb.conflict = opts
	return &CameraUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Camera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CameraCreateBulk) OnConflictColumns(columns ...string) *CameraUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CameraUpsertBulk{
		create: ccb,
	}
}

// CameraUpsertBulk is the builder for "upsert"-ing
// a bulk of Camera nodes.
type CameraUpsertBulk struct {
	create *CameraCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Camera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(camera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CameraUpsertBulk) UpdateNewValues() *CameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(camera.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(camera.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Camera.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CameraUpsertBulk) Ignore() *CameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CameraUpsertBulk) DoNothing() *CameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CameraCreateBulk.OnConflict
// documentation for more info.
func (u *CameraUpsertBulk) Update(set func(*CameraUpsert)) *CameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CameraUpsertBulk) SetUpdatedAt(v time.Time) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateUpdatedAt() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CameraUpsertBulk) SetDeletedAt(v time.Time) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateDeletedAt() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CameraUpsertBulk) ClearDeletedAt() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *CameraUpsertBulk) SetTenantID(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateTenantID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *CameraUpsertBulk) ClearTenantID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *CameraUpsertBulk) SetAccessOrgList(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateAccessOrgList() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *CameraUpsertBulk) ClearAccessOrgList() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *CameraUpsertBulk) SetName(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateName() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateName()
	})
}

// SetPosition sets the "position" field.
func (u *CameraUpsertBulk) SetPosition(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdatePosition() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePosition()
	})
}

// SetRegion sets the "region" field.
func (u *CameraUpsertBulk) SetRegion(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateRegion() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *CameraUpsertBulk) ClearRegion() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.ClearRegion()
	})
}

// SetRegionStr sets the "region_str" field.
func (u *CameraUpsertBulk) SetRegionStr(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetRegionStr(v)
	})
}

// UpdateRegionStr sets the "region_str" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateRegionStr() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateRegionStr()
	})
}

// ClearRegionStr clears the value of the "region_str" field.
func (u *CameraUpsertBulk) ClearRegionStr() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.ClearRegionStr()
	})
}

// SetLongitude sets the "longitude" field.
func (u *CameraUpsertBulk) SetLongitude(v float64) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *CameraUpsertBulk) AddLongitude(v float64) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateLongitude() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateLongitude()
	})
}

// SetLatitude sets the "latitude" field.
func (u *CameraUpsertBulk) SetLatitude(v float64) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *CameraUpsertBulk) AddLatitude(v float64) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateLatitude() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateLatitude()
	})
}

// SetCustomNumber sets the "custom_number" field.
func (u *CameraUpsertBulk) SetCustomNumber(v int) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetCustomNumber(v)
	})
}

// AddCustomNumber adds v to the "custom_number" field.
func (u *CameraUpsertBulk) AddCustomNumber(v int) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddCustomNumber(v)
	})
}

// UpdateCustomNumber sets the "custom_number" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateCustomNumber() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateCustomNumber()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *CameraUpsertBulk) SetChannelID(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateChannelID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateChannelID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *CameraUpsertBulk) SetSerialNumber(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSerialNumber() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetPoleNumber sets the "pole_number" field.
func (u *CameraUpsertBulk) SetPoleNumber(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetPoleNumber(v)
	})
}

// UpdatePoleNumber sets the "pole_number" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdatePoleNumber() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePoleNumber()
	})
}

// SetDeviceDescription sets the "device_description" field.
func (u *CameraUpsertBulk) SetDeviceDescription(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeviceDescription(v)
	})
}

// UpdateDeviceDescription sets the "device_description" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateDeviceDescription() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeviceDescription()
	})
}

// SetScene sets the "scene" field.
func (u *CameraUpsertBulk) SetScene(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetScene(v)
	})
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateScene() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateScene()
	})
}

// SetPlace sets the "place" field.
func (u *CameraUpsertBulk) SetPlace(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdatePlace() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdatePlace()
	})
}

// SetStatus sets the "status" field.
func (u *CameraUpsertBulk) SetStatus(v biz.CameraStatus) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateStatus() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateStatus()
	})
}

// SetSpType sets the "sp_type" field.
func (u *CameraUpsertBulk) SetSpType(v streaming.ProtocolType) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpType(v)
	})
}

// UpdateSpType sets the "sp_type" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSpType() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpType()
	})
}

// SetSpSource sets the "sp_source" field.
func (u *CameraUpsertBulk) SetSpSource(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpSource(v)
	})
}

// UpdateSpSource sets the "sp_source" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSpSource() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpSource()
	})
}

// SetSpCodecName sets the "sp_codec_name" field.
func (u *CameraUpsertBulk) SetSpCodecName(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpCodecName(v)
	})
}

// UpdateSpCodecName sets the "sp_codec_name" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSpCodecName() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpCodecName()
	})
}

// SetSpWidth sets the "sp_width" field.
func (u *CameraUpsertBulk) SetSpWidth(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpWidth(v)
	})
}

// AddSpWidth adds v to the "sp_width" field.
func (u *CameraUpsertBulk) AddSpWidth(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddSpWidth(v)
	})
}

// UpdateSpWidth sets the "sp_width" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSpWidth() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpWidth()
	})
}

// SetSpHeight sets the "sp_height" field.
func (u *CameraUpsertBulk) SetSpHeight(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSpHeight(v)
	})
}

// AddSpHeight adds v to the "sp_height" field.
func (u *CameraUpsertBulk) AddSpHeight(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddSpHeight(v)
	})
}

// UpdateSpHeight sets the "sp_height" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSpHeight() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSpHeight()
	})
}

// SetTransType sets the "trans_type" field.
func (u *CameraUpsertBulk) SetTransType(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateTransType() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateTransType()
	})
}

// SetDeviceIP sets the "device_ip" field.
func (u *CameraUpsertBulk) SetDeviceIP(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetDeviceIP(v)
	})
}

// UpdateDeviceIP sets the "device_ip" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateDeviceIP() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDeviceIP()
	})
}

// SetDevicePort sets the "device_port" field.
func (u *CameraUpsertBulk) SetDevicePort(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetDevicePort(v)
	})
}

// AddDevicePort adds v to the "device_port" field.
func (u *CameraUpsertBulk) AddDevicePort(v int32) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.AddDevicePort(v)
	})
}

// UpdateDevicePort sets the "device_port" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateDevicePort() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateDevicePort()
	})
}

// SetGBID sets the "gb_id" field.
func (u *CameraUpsertBulk) SetGBID(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBID(v)
	})
}

// UpdateGBID sets the "gb_id" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateGBID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBID()
	})
}

// SetSipUser sets the "sip_user" field.
func (u *CameraUpsertBulk) SetSipUser(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSipUser(v)
	})
}

// UpdateSipUser sets the "sip_user" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSipUser() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSipUser()
	})
}

// SetSipPassword sets the "sip_password" field.
func (u *CameraUpsertBulk) SetSipPassword(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetSipPassword(v)
	})
}

// UpdateSipPassword sets the "sip_password" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateSipPassword() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateSipPassword()
	})
}

// SetGBChannelID sets the "gb_channel_id" field.
func (u *CameraUpsertBulk) SetGBChannelID(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBChannelID(v)
	})
}

// UpdateGBChannelID sets the "gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateGBChannelID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBChannelID()
	})
}

// SetUpGBChannelID sets the "up_gb_channel_id" field.
func (u *CameraUpsertBulk) SetUpGBChannelID(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetUpGBChannelID(v)
	})
}

// UpdateUpGBChannelID sets the "up_gb_channel_id" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateUpGBChannelID() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateUpGBChannelID()
	})
}

// SetGBDeviceType sets the "gb_device_type" field.
func (u *CameraUpsertBulk) SetGBDeviceType(v string) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetGBDeviceType(v)
	})
}

// UpdateGBDeviceType sets the "gb_device_type" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateGBDeviceType() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateGBDeviceType()
	})
}

// SetType sets the "type" field.
func (u *CameraUpsertBulk) SetType(v biz.MediaType) *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CameraUpsertBulk) UpdateType() *CameraUpsertBulk {
	return u.Update(func(s *CameraUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *CameraUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CameraCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CameraCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CameraUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
