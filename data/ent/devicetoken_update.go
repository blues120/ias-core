// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/devicetoken"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// DeviceTokenUpdate is the builder for updating DeviceToken entities.
type DeviceTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceTokenUpdate builder.
func (dtu *DeviceTokenUpdate) Where(ps ...predicate.DeviceToken) *DeviceTokenUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtu *DeviceTokenUpdate) SetUpdatedAt(t time.Time) *DeviceTokenUpdate {
	dtu.mutation.SetUpdatedAt(t)
	return dtu
}

// SetDeletedAt sets the "deleted_at" field.
func (dtu *DeviceTokenUpdate) SetDeletedAt(t time.Time) *DeviceTokenUpdate {
	dtu.mutation.SetDeletedAt(t)
	return dtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableDeletedAt(t *time.Time) *DeviceTokenUpdate {
	if t != nil {
		dtu.SetDeletedAt(*t)
	}
	return dtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dtu *DeviceTokenUpdate) ClearDeletedAt() *DeviceTokenUpdate {
	dtu.mutation.ClearDeletedAt()
	return dtu
}

// SetToken sets the "token" field.
func (dtu *DeviceTokenUpdate) SetToken(s string) *DeviceTokenUpdate {
	dtu.mutation.SetToken(s)
	return dtu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableToken(s *string) *DeviceTokenUpdate {
	if s != nil {
		dtu.SetToken(*s)
	}
	return dtu
}

// SetDeviceExtID sets the "device_ext_id" field.
func (dtu *DeviceTokenUpdate) SetDeviceExtID(s string) *DeviceTokenUpdate {
	dtu.mutation.SetDeviceExtID(s)
	return dtu
}

// SetNillableDeviceExtID sets the "device_ext_id" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableDeviceExtID(s *string) *DeviceTokenUpdate {
	if s != nil {
		dtu.SetDeviceExtID(*s)
	}
	return dtu
}

// Mutation returns the DeviceTokenMutation object of the builder.
func (dtu *DeviceTokenUpdate) Mutation() *DeviceTokenMutation {
	return dtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DeviceTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := dtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DeviceTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DeviceTokenUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DeviceTokenUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtu *DeviceTokenUpdate) defaults() error {
	if _, ok := dtu.mutation.UpdatedAt(); !ok {
		if devicetoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized devicetoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := devicetoken.UpdateDefaultUpdatedAt()
		dtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dtu *DeviceTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceTokenUpdate {
	dtu.modifiers = append(dtu.modifiers, modifiers...)
	return dtu
}

func (dtu *DeviceTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicetoken.Table, devicetoken.Columns, sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUint64))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtu.mutation.DeletedAt(); ok {
		_spec.SetField(devicetoken.FieldDeletedAt, field.TypeTime, value)
	}
	if dtu.mutation.DeletedAtCleared() {
		_spec.ClearField(devicetoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dtu.mutation.Token(); ok {
		_spec.SetField(devicetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := dtu.mutation.DeviceExtID(); ok {
		_spec.SetField(devicetoken.FieldDeviceExtID, field.TypeString, value)
	}
	_spec.AddModifiers(dtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DeviceTokenUpdateOne is the builder for updating a single DeviceToken entity.
type DeviceTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dtuo *DeviceTokenUpdateOne) SetUpdatedAt(t time.Time) *DeviceTokenUpdateOne {
	dtuo.mutation.SetUpdatedAt(t)
	return dtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dtuo *DeviceTokenUpdateOne) SetDeletedAt(t time.Time) *DeviceTokenUpdateOne {
	dtuo.mutation.SetDeletedAt(t)
	return dtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceTokenUpdateOne {
	if t != nil {
		dtuo.SetDeletedAt(*t)
	}
	return dtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dtuo *DeviceTokenUpdateOne) ClearDeletedAt() *DeviceTokenUpdateOne {
	dtuo.mutation.ClearDeletedAt()
	return dtuo
}

// SetToken sets the "token" field.
func (dtuo *DeviceTokenUpdateOne) SetToken(s string) *DeviceTokenUpdateOne {
	dtuo.mutation.SetToken(s)
	return dtuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableToken(s *string) *DeviceTokenUpdateOne {
	if s != nil {
		dtuo.SetToken(*s)
	}
	return dtuo
}

// SetDeviceExtID sets the "device_ext_id" field.
func (dtuo *DeviceTokenUpdateOne) SetDeviceExtID(s string) *DeviceTokenUpdateOne {
	dtuo.mutation.SetDeviceExtID(s)
	return dtuo
}

// SetNillableDeviceExtID sets the "device_ext_id" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableDeviceExtID(s *string) *DeviceTokenUpdateOne {
	if s != nil {
		dtuo.SetDeviceExtID(*s)
	}
	return dtuo
}

// Mutation returns the DeviceTokenMutation object of the builder.
func (dtuo *DeviceTokenUpdateOne) Mutation() *DeviceTokenMutation {
	return dtuo.mutation
}

// Where appends a list predicates to the DeviceTokenUpdate builder.
func (dtuo *DeviceTokenUpdateOne) Where(ps ...predicate.DeviceToken) *DeviceTokenUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DeviceTokenUpdateOne) Select(field string, fields ...string) *DeviceTokenUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DeviceToken entity.
func (dtuo *DeviceTokenUpdateOne) Save(ctx context.Context) (*DeviceToken, error) {
	if err := dtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DeviceTokenUpdateOne) SaveX(ctx context.Context) *DeviceToken {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DeviceTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DeviceTokenUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtuo *DeviceTokenUpdateOne) defaults() error {
	if _, ok := dtuo.mutation.UpdatedAt(); !ok {
		if devicetoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized devicetoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := devicetoken.UpdateDefaultUpdatedAt()
		dtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dtuo *DeviceTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceTokenUpdateOne {
	dtuo.modifiers = append(dtuo.modifiers, modifiers...)
	return dtuo
}

func (dtuo *DeviceTokenUpdateOne) sqlSave(ctx context.Context) (_node *DeviceToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicetoken.Table, devicetoken.Columns, sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUint64))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicetoken.FieldID)
		for _, f := range fields {
			if !devicetoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicetoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtuo.mutation.DeletedAt(); ok {
		_spec.SetField(devicetoken.FieldDeletedAt, field.TypeTime, value)
	}
	if dtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(devicetoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dtuo.mutation.Token(); ok {
		_spec.SetField(devicetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.DeviceExtID(); ok {
		_spec.SetField(devicetoken.FieldDeviceExtID, field.TypeString, value)
	}
	_spec.AddModifiers(dtuo.modifiers...)
	_node = &DeviceToken{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
