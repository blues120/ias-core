// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicetoken"
)

// DeviceToken is the model entity for the DeviceToken schema.
type DeviceToken struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 设备接入码/激活码
	Token string `json:"token,omitempty"`
	// 设备ext id
	DeviceExtID  string `json:"device_ext_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicetoken.FieldID:
			values[i] = new(sql.NullInt64)
		case devicetoken.FieldToken, devicetoken.FieldDeviceExtID:
			values[i] = new(sql.NullString)
		case devicetoken.FieldCreatedAt, devicetoken.FieldUpdatedAt, devicetoken.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceToken fields.
func (dt *DeviceToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicetoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dt.ID = uint64(value.Int64)
		case devicetoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dt.CreatedAt = value.Time
			}
		case devicetoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dt.UpdatedAt = value.Time
			}
		case devicetoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dt.DeletedAt = value.Time
			}
		case devicetoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				dt.Token = value.String
			}
		case devicetoken.FieldDeviceExtID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_ext_id", values[i])
			} else if value.Valid {
				dt.DeviceExtID = value.String
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceToken.
// This includes values selected through modifiers, order, etc.
func (dt *DeviceToken) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// Update returns a builder for updating this DeviceToken.
// Note that you need to call DeviceToken.Unwrap() before calling this method if this DeviceToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DeviceToken) Update() *DeviceTokenUpdateOne {
	return NewDeviceTokenClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DeviceToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DeviceToken) Unwrap() *DeviceToken {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceToken is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DeviceToken) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(dt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(dt.Token)
	builder.WriteString(", ")
	builder.WriteString("device_ext_id=")
	builder.WriteString(dt.DeviceExtID)
	builder.WriteByte(')')
	return builder.String()
}

// DeviceTokens is a parsable slice of DeviceToken.
type DeviceTokens []*DeviceToken
