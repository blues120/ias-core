// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/algorithm"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/device"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/task"
	"github.com/blues120/ias-core/data/ent/taskcamera"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TaskUpdate) SetDeletedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeletedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TaskUpdate) ClearDeletedAt() *TaskUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetTenantID sets the "tenant_id" field.
func (tu *TaskUpdate) SetTenantID(s string) *TaskUpdate {
	tu.mutation.SetTenantID(s)
	return tu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTenantID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTenantID(*s)
	}
	return tu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tu *TaskUpdate) ClearTenantID() *TaskUpdate {
	tu.mutation.ClearTenantID()
	return tu
}

// SetAccessOrgList sets the "access_org_list" field.
func (tu *TaskUpdate) SetAccessOrgList(s string) *TaskUpdate {
	tu.mutation.SetAccessOrgList(s)
	return tu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAccessOrgList(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAccessOrgList(*s)
	}
	return tu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (tu *TaskUpdate) ClearAccessOrgList() *TaskUpdate {
	tu.mutation.ClearAccessOrgList()
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(bt biz.TaskType) *TaskUpdate {
	tu.mutation.SetType(bt)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(bt *biz.TaskType) *TaskUpdate {
	if bt != nil {
		tu.SetType(*bt)
	}
	return tu
}

// SetAlgoID sets the "algo_id" field.
func (tu *TaskUpdate) SetAlgoID(u uint64) *TaskUpdate {
	tu.mutation.SetAlgoID(u)
	return tu
}

// SetNillableAlgoID sets the "algo_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAlgoID(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetAlgoID(*u)
	}
	return tu
}

// SetAlgoInterval sets the "algo_interval" field.
func (tu *TaskUpdate) SetAlgoInterval(f float64) *TaskUpdate {
	tu.mutation.ResetAlgoInterval()
	tu.mutation.SetAlgoInterval(f)
	return tu
}

// SetNillableAlgoInterval sets the "algo_interval" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAlgoInterval(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetAlgoInterval(*f)
	}
	return tu
}

// AddAlgoInterval adds f to the "algo_interval" field.
func (tu *TaskUpdate) AddAlgoInterval(f float64) *TaskUpdate {
	tu.mutation.AddAlgoInterval(f)
	return tu
}

// SetAlgoExtra sets the "algo_extra" field.
func (tu *TaskUpdate) SetAlgoExtra(s string) *TaskUpdate {
	tu.mutation.SetAlgoExtra(s)
	return tu
}

// SetNillableAlgoExtra sets the "algo_extra" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAlgoExtra(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAlgoExtra(*s)
	}
	return tu
}

// SetExtend sets the "extend" field.
func (tu *TaskUpdate) SetExtend(s string) *TaskUpdate {
	tu.mutation.SetExtend(s)
	return tu
}

// SetNillableExtend sets the "extend" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExtend(s *string) *TaskUpdate {
	if s != nil {
		tu.SetExtend(*s)
	}
	return tu
}

// SetDeviceID sets the "device_id" field.
func (tu *TaskUpdate) SetDeviceID(u uint64) *TaskUpdate {
	tu.mutation.SetDeviceID(u)
	return tu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeviceID(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetDeviceID(*u)
	}
	return tu
}

// SetLastStartTime sets the "last_start_time" field.
func (tu *TaskUpdate) SetLastStartTime(st *sql.NullTime) *TaskUpdate {
	tu.mutation.SetLastStartTime(st)
	return tu
}

// ClearLastStartTime clears the value of the "last_start_time" field.
func (tu *TaskUpdate) ClearLastStartTime() *TaskUpdate {
	tu.mutation.ClearLastStartTime()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(bs biz.TaskStatus) *TaskUpdate {
	tu.mutation.SetStatus(bs)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(bs *biz.TaskStatus) *TaskUpdate {
	if bs != nil {
		tu.SetStatus(*bs)
	}
	return tu
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (tu *TaskUpdate) SetAlgoGroupID(u uint) *TaskUpdate {
	tu.mutation.ResetAlgoGroupID()
	tu.mutation.SetAlgoGroupID(u)
	return tu
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAlgoGroupID(u *uint) *TaskUpdate {
	if u != nil {
		tu.SetAlgoGroupID(*u)
	}
	return tu
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (tu *TaskUpdate) AddAlgoGroupID(u int) *TaskUpdate {
	tu.mutation.AddAlgoGroupID(u)
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TaskUpdate) SetParentID(s string) *TaskUpdate {
	tu.mutation.SetParentID(s)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableParentID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetParentID(*s)
	}
	return tu
}

// SetIsWarn sets the "is_warn" field.
func (tu *TaskUpdate) SetIsWarn(u uint32) *TaskUpdate {
	tu.mutation.ResetIsWarn()
	tu.mutation.SetIsWarn(u)
	return tu
}

// SetNillableIsWarn sets the "is_warn" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsWarn(u *uint32) *TaskUpdate {
	if u != nil {
		tu.SetIsWarn(*u)
	}
	return tu
}

// AddIsWarn adds u to the "is_warn" field.
func (tu *TaskUpdate) AddIsWarn(u int32) *TaskUpdate {
	tu.mutation.AddIsWarn(u)
	return tu
}

// SetPeriod sets the "period" field.
func (tu *TaskUpdate) SetPeriod(u uint32) *TaskUpdate {
	tu.mutation.ResetPeriod()
	tu.mutation.SetPeriod(u)
	return tu
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePeriod(u *uint32) *TaskUpdate {
	if u != nil {
		tu.SetPeriod(*u)
	}
	return tu
}

// AddPeriod adds u to the "period" field.
func (tu *TaskUpdate) AddPeriod(u int32) *TaskUpdate {
	tu.mutation.AddPeriod(u)
	return tu
}

// SetAlgoConfig sets the "algo_config" field.
func (tu *TaskUpdate) SetAlgoConfig(s string) *TaskUpdate {
	tu.mutation.SetAlgoConfig(s)
	return tu
}

// SetNillableAlgoConfig sets the "algo_config" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAlgoConfig(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAlgoConfig(*s)
	}
	return tu
}

// ClearAlgoConfig clears the value of the "algo_config" field.
func (tu *TaskUpdate) ClearAlgoConfig() *TaskUpdate {
	tu.mutation.ClearAlgoConfig()
	return tu
}

// SetReason sets the "reason" field.
func (tu *TaskUpdate) SetReason(s string) *TaskUpdate {
	tu.mutation.SetReason(s)
	return tu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableReason(s *string) *TaskUpdate {
	if s != nil {
		tu.SetReason(*s)
	}
	return tu
}

// SetAllowTimeType sets the "allow_time_type" field.
func (tu *TaskUpdate) SetAllowTimeType(s string) *TaskUpdate {
	tu.mutation.SetAllowTimeType(s)
	return tu
}

// SetNillableAllowTimeType sets the "allow_time_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAllowTimeType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAllowTimeType(*s)
	}
	return tu
}

// ClearAllowTimeType clears the value of the "allow_time_type" field.
func (tu *TaskUpdate) ClearAllowTimeType() *TaskUpdate {
	tu.mutation.ClearAllowTimeType()
	return tu
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (tu *TaskUpdate) AddCameraIDs(ids ...uint64) *TaskUpdate {
	tu.mutation.AddCameraIDs(ids...)
	return tu
}

// AddCamera adds the "camera" edges to the Camera entity.
func (tu *TaskUpdate) AddCamera(c ...*Camera) *TaskUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCameraIDs(ids...)
}

// SetAlgorithmID sets the "algorithm" edge to the Algorithm entity by ID.
func (tu *TaskUpdate) SetAlgorithmID(id uint64) *TaskUpdate {
	tu.mutation.SetAlgorithmID(id)
	return tu
}

// SetAlgorithm sets the "algorithm" edge to the Algorithm entity.
func (tu *TaskUpdate) SetAlgorithm(a *Algorithm) *TaskUpdate {
	return tu.SetAlgorithmID(a.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (tu *TaskUpdate) SetDevice(d *Device) *TaskUpdate {
	return tu.SetDeviceID(d.ID)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (tu *TaskUpdate) AddTaskCameraIDs(ids ...uint64) *TaskUpdate {
	tu.mutation.AddTaskCameraIDs(ids...)
	return tu
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (tu *TaskUpdate) AddTaskCamera(t ...*TaskCamera) *TaskUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskCameraIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (tu *TaskUpdate) ClearCamera() *TaskUpdate {
	tu.mutation.ClearCamera()
	return tu
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (tu *TaskUpdate) RemoveCameraIDs(ids ...uint64) *TaskUpdate {
	tu.mutation.RemoveCameraIDs(ids...)
	return tu
}

// RemoveCamera removes "camera" edges to Camera entities.
func (tu *TaskUpdate) RemoveCamera(c ...*Camera) *TaskUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCameraIDs(ids...)
}

// ClearAlgorithm clears the "algorithm" edge to the Algorithm entity.
func (tu *TaskUpdate) ClearAlgorithm() *TaskUpdate {
	tu.mutation.ClearAlgorithm()
	return tu
}

// ClearDevice clears the "device" edge to the Device entity.
func (tu *TaskUpdate) ClearDevice() *TaskUpdate {
	tu.mutation.ClearDevice()
	return tu
}

// ClearTaskCamera clears all "task_camera" edges to the TaskCamera entity.
func (tu *TaskUpdate) ClearTaskCamera() *TaskUpdate {
	tu.mutation.ClearTaskCamera()
	return tu
}

// RemoveTaskCameraIDs removes the "task_camera" edge to TaskCamera entities by IDs.
func (tu *TaskUpdate) RemoveTaskCameraIDs(ids ...uint64) *TaskUpdate {
	tu.mutation.RemoveTaskCameraIDs(ids...)
	return tu
}

// RemoveTaskCamera removes "task_camera" edges to TaskCamera entities.
func (tu *TaskUpdate) RemoveTaskCamera(t ...*TaskCamera) *TaskUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskCameraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.AlgorithmID(); tu.mutation.AlgorithmCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.algorithm"`)
	}
	if _, ok := tu.mutation.DeviceID(); tu.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.TenantID(); ok {
		_spec.SetField(task.FieldTenantID, field.TypeString, value)
	}
	if tu.mutation.TenantIDCleared() {
		_spec.ClearField(task.FieldTenantID, field.TypeString)
	}
	if value, ok := tu.mutation.AccessOrgList(); ok {
		_spec.SetField(task.FieldAccessOrgList, field.TypeString, value)
	}
	if tu.mutation.AccessOrgListCleared() {
		_spec.ClearField(task.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.AlgoInterval(); ok {
		_spec.SetField(task.FieldAlgoInterval, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAlgoInterval(); ok {
		_spec.AddField(task.FieldAlgoInterval, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AlgoExtra(); ok {
		_spec.SetField(task.FieldAlgoExtra, field.TypeString, value)
	}
	if value, ok := tu.mutation.Extend(); ok {
		_spec.SetField(task.FieldExtend, field.TypeString, value)
	}
	if value, ok := tu.mutation.LastStartTime(); ok {
		_spec.SetField(task.FieldLastStartTime, field.TypeTime, value)
	}
	if tu.mutation.LastStartTimeCleared() {
		_spec.ClearField(task.FieldLastStartTime, field.TypeTime)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.AlgoGroupID(); ok {
		_spec.SetField(task.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := tu.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(task.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := tu.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsWarn(); ok {
		_spec.SetField(task.FieldIsWarn, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedIsWarn(); ok {
		_spec.AddField(task.FieldIsWarn, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.Period(); ok {
		_spec.SetField(task.FieldPeriod, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedPeriod(); ok {
		_spec.AddField(task.FieldPeriod, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AlgoConfig(); ok {
		_spec.SetField(task.FieldAlgoConfig, field.TypeString, value)
	}
	if tu.mutation.AlgoConfigCleared() {
		_spec.ClearField(task.FieldAlgoConfig, field.TypeString)
	}
	if value, ok := tu.mutation.Reason(); ok {
		_spec.SetField(task.FieldReason, field.TypeString, value)
	}
	if value, ok := tu.mutation.AllowTimeType(); ok {
		_spec.SetField(task.FieldAllowTimeType, field.TypeString, value)
	}
	if tu.mutation.AllowTimeTypeCleared() {
		_spec.ClearField(task.FieldAllowTimeType, field.TypeString)
	}
	if tu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		createE := &TaskCameraCreate{config: tu.config, mutation: newTaskCameraMutation(tu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCameraIDs(); len(nodes) > 0 && !tu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: tu.config, mutation: newTaskCameraMutation(tu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: tu.config, mutation: newTaskCameraMutation(tu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AlgorithmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AlgorithmTable,
			Columns: []string{task.AlgorithmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AlgorithmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AlgorithmTable,
			Columns: []string{task.AlgorithmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeviceTable,
			Columns: []string{task.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeviceTable,
			Columns: []string{task.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskCameraIDs(); len(nodes) > 0 && !tu.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TaskUpdateOne) SetDeletedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeletedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TaskUpdateOne) ClearDeletedAt() *TaskUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetTenantID sets the "tenant_id" field.
func (tuo *TaskUpdateOne) SetTenantID(s string) *TaskUpdateOne {
	tuo.mutation.SetTenantID(s)
	return tuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTenantID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTenantID(*s)
	}
	return tuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tuo *TaskUpdateOne) ClearTenantID() *TaskUpdateOne {
	tuo.mutation.ClearTenantID()
	return tuo
}

// SetAccessOrgList sets the "access_org_list" field.
func (tuo *TaskUpdateOne) SetAccessOrgList(s string) *TaskUpdateOne {
	tuo.mutation.SetAccessOrgList(s)
	return tuo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAccessOrgList(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAccessOrgList(*s)
	}
	return tuo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (tuo *TaskUpdateOne) ClearAccessOrgList() *TaskUpdateOne {
	tuo.mutation.ClearAccessOrgList()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(bt biz.TaskType) *TaskUpdateOne {
	tuo.mutation.SetType(bt)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(bt *biz.TaskType) *TaskUpdateOne {
	if bt != nil {
		tuo.SetType(*bt)
	}
	return tuo
}

// SetAlgoID sets the "algo_id" field.
func (tuo *TaskUpdateOne) SetAlgoID(u uint64) *TaskUpdateOne {
	tuo.mutation.SetAlgoID(u)
	return tuo
}

// SetNillableAlgoID sets the "algo_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAlgoID(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetAlgoID(*u)
	}
	return tuo
}

// SetAlgoInterval sets the "algo_interval" field.
func (tuo *TaskUpdateOne) SetAlgoInterval(f float64) *TaskUpdateOne {
	tuo.mutation.ResetAlgoInterval()
	tuo.mutation.SetAlgoInterval(f)
	return tuo
}

// SetNillableAlgoInterval sets the "algo_interval" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAlgoInterval(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetAlgoInterval(*f)
	}
	return tuo
}

// AddAlgoInterval adds f to the "algo_interval" field.
func (tuo *TaskUpdateOne) AddAlgoInterval(f float64) *TaskUpdateOne {
	tuo.mutation.AddAlgoInterval(f)
	return tuo
}

// SetAlgoExtra sets the "algo_extra" field.
func (tuo *TaskUpdateOne) SetAlgoExtra(s string) *TaskUpdateOne {
	tuo.mutation.SetAlgoExtra(s)
	return tuo
}

// SetNillableAlgoExtra sets the "algo_extra" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAlgoExtra(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAlgoExtra(*s)
	}
	return tuo
}

// SetExtend sets the "extend" field.
func (tuo *TaskUpdateOne) SetExtend(s string) *TaskUpdateOne {
	tuo.mutation.SetExtend(s)
	return tuo
}

// SetNillableExtend sets the "extend" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExtend(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetExtend(*s)
	}
	return tuo
}

// SetDeviceID sets the "device_id" field.
func (tuo *TaskUpdateOne) SetDeviceID(u uint64) *TaskUpdateOne {
	tuo.mutation.SetDeviceID(u)
	return tuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeviceID(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetDeviceID(*u)
	}
	return tuo
}

// SetLastStartTime sets the "last_start_time" field.
func (tuo *TaskUpdateOne) SetLastStartTime(st *sql.NullTime) *TaskUpdateOne {
	tuo.mutation.SetLastStartTime(st)
	return tuo
}

// ClearLastStartTime clears the value of the "last_start_time" field.
func (tuo *TaskUpdateOne) ClearLastStartTime() *TaskUpdateOne {
	tuo.mutation.ClearLastStartTime()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(bs biz.TaskStatus) *TaskUpdateOne {
	tuo.mutation.SetStatus(bs)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(bs *biz.TaskStatus) *TaskUpdateOne {
	if bs != nil {
		tuo.SetStatus(*bs)
	}
	return tuo
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (tuo *TaskUpdateOne) SetAlgoGroupID(u uint) *TaskUpdateOne {
	tuo.mutation.ResetAlgoGroupID()
	tuo.mutation.SetAlgoGroupID(u)
	return tuo
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAlgoGroupID(u *uint) *TaskUpdateOne {
	if u != nil {
		tuo.SetAlgoGroupID(*u)
	}
	return tuo
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (tuo *TaskUpdateOne) AddAlgoGroupID(u int) *TaskUpdateOne {
	tuo.mutation.AddAlgoGroupID(u)
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TaskUpdateOne) SetParentID(s string) *TaskUpdateOne {
	tuo.mutation.SetParentID(s)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableParentID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetParentID(*s)
	}
	return tuo
}

// SetIsWarn sets the "is_warn" field.
func (tuo *TaskUpdateOne) SetIsWarn(u uint32) *TaskUpdateOne {
	tuo.mutation.ResetIsWarn()
	tuo.mutation.SetIsWarn(u)
	return tuo
}

// SetNillableIsWarn sets the "is_warn" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsWarn(u *uint32) *TaskUpdateOne {
	if u != nil {
		tuo.SetIsWarn(*u)
	}
	return tuo
}

// AddIsWarn adds u to the "is_warn" field.
func (tuo *TaskUpdateOne) AddIsWarn(u int32) *TaskUpdateOne {
	tuo.mutation.AddIsWarn(u)
	return tuo
}

// SetPeriod sets the "period" field.
func (tuo *TaskUpdateOne) SetPeriod(u uint32) *TaskUpdateOne {
	tuo.mutation.ResetPeriod()
	tuo.mutation.SetPeriod(u)
	return tuo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePeriod(u *uint32) *TaskUpdateOne {
	if u != nil {
		tuo.SetPeriod(*u)
	}
	return tuo
}

// AddPeriod adds u to the "period" field.
func (tuo *TaskUpdateOne) AddPeriod(u int32) *TaskUpdateOne {
	tuo.mutation.AddPeriod(u)
	return tuo
}

// SetAlgoConfig sets the "algo_config" field.
func (tuo *TaskUpdateOne) SetAlgoConfig(s string) *TaskUpdateOne {
	tuo.mutation.SetAlgoConfig(s)
	return tuo
}

// SetNillableAlgoConfig sets the "algo_config" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAlgoConfig(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAlgoConfig(*s)
	}
	return tuo
}

// ClearAlgoConfig clears the value of the "algo_config" field.
func (tuo *TaskUpdateOne) ClearAlgoConfig() *TaskUpdateOne {
	tuo.mutation.ClearAlgoConfig()
	return tuo
}

// SetReason sets the "reason" field.
func (tuo *TaskUpdateOne) SetReason(s string) *TaskUpdateOne {
	tuo.mutation.SetReason(s)
	return tuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableReason(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetReason(*s)
	}
	return tuo
}

// SetAllowTimeType sets the "allow_time_type" field.
func (tuo *TaskUpdateOne) SetAllowTimeType(s string) *TaskUpdateOne {
	tuo.mutation.SetAllowTimeType(s)
	return tuo
}

// SetNillableAllowTimeType sets the "allow_time_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAllowTimeType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAllowTimeType(*s)
	}
	return tuo
}

// ClearAllowTimeType clears the value of the "allow_time_type" field.
func (tuo *TaskUpdateOne) ClearAllowTimeType() *TaskUpdateOne {
	tuo.mutation.ClearAllowTimeType()
	return tuo
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (tuo *TaskUpdateOne) AddCameraIDs(ids ...uint64) *TaskUpdateOne {
	tuo.mutation.AddCameraIDs(ids...)
	return tuo
}

// AddCamera adds the "camera" edges to the Camera entity.
func (tuo *TaskUpdateOne) AddCamera(c ...*Camera) *TaskUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCameraIDs(ids...)
}

// SetAlgorithmID sets the "algorithm" edge to the Algorithm entity by ID.
func (tuo *TaskUpdateOne) SetAlgorithmID(id uint64) *TaskUpdateOne {
	tuo.mutation.SetAlgorithmID(id)
	return tuo
}

// SetAlgorithm sets the "algorithm" edge to the Algorithm entity.
func (tuo *TaskUpdateOne) SetAlgorithm(a *Algorithm) *TaskUpdateOne {
	return tuo.SetAlgorithmID(a.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (tuo *TaskUpdateOne) SetDevice(d *Device) *TaskUpdateOne {
	return tuo.SetDeviceID(d.ID)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (tuo *TaskUpdateOne) AddTaskCameraIDs(ids ...uint64) *TaskUpdateOne {
	tuo.mutation.AddTaskCameraIDs(ids...)
	return tuo
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (tuo *TaskUpdateOne) AddTaskCamera(t ...*TaskCamera) *TaskUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskCameraIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (tuo *TaskUpdateOne) ClearCamera() *TaskUpdateOne {
	tuo.mutation.ClearCamera()
	return tuo
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (tuo *TaskUpdateOne) RemoveCameraIDs(ids ...uint64) *TaskUpdateOne {
	tuo.mutation.RemoveCameraIDs(ids...)
	return tuo
}

// RemoveCamera removes "camera" edges to Camera entities.
func (tuo *TaskUpdateOne) RemoveCamera(c ...*Camera) *TaskUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCameraIDs(ids...)
}

// ClearAlgorithm clears the "algorithm" edge to the Algorithm entity.
func (tuo *TaskUpdateOne) ClearAlgorithm() *TaskUpdateOne {
	tuo.mutation.ClearAlgorithm()
	return tuo
}

// ClearDevice clears the "device" edge to the Device entity.
func (tuo *TaskUpdateOne) ClearDevice() *TaskUpdateOne {
	tuo.mutation.ClearDevice()
	return tuo
}

// ClearTaskCamera clears all "task_camera" edges to the TaskCamera entity.
func (tuo *TaskUpdateOne) ClearTaskCamera() *TaskUpdateOne {
	tuo.mutation.ClearTaskCamera()
	return tuo
}

// RemoveTaskCameraIDs removes the "task_camera" edge to TaskCamera entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskCameraIDs(ids ...uint64) *TaskUpdateOne {
	tuo.mutation.RemoveTaskCameraIDs(ids...)
	return tuo
}

// RemoveTaskCamera removes "task_camera" edges to TaskCamera entities.
func (tuo *TaskUpdateOne) RemoveTaskCamera(t ...*TaskCamera) *TaskUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskCameraIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.AlgorithmID(); tuo.mutation.AlgorithmCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.algorithm"`)
	}
	if _, ok := tuo.mutation.DeviceID(); tuo.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.TenantID(); ok {
		_spec.SetField(task.FieldTenantID, field.TypeString, value)
	}
	if tuo.mutation.TenantIDCleared() {
		_spec.ClearField(task.FieldTenantID, field.TypeString)
	}
	if value, ok := tuo.mutation.AccessOrgList(); ok {
		_spec.SetField(task.FieldAccessOrgList, field.TypeString, value)
	}
	if tuo.mutation.AccessOrgListCleared() {
		_spec.ClearField(task.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.AlgoInterval(); ok {
		_spec.SetField(task.FieldAlgoInterval, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAlgoInterval(); ok {
		_spec.AddField(task.FieldAlgoInterval, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AlgoExtra(); ok {
		_spec.SetField(task.FieldAlgoExtra, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Extend(); ok {
		_spec.SetField(task.FieldExtend, field.TypeString, value)
	}
	if value, ok := tuo.mutation.LastStartTime(); ok {
		_spec.SetField(task.FieldLastStartTime, field.TypeTime, value)
	}
	if tuo.mutation.LastStartTimeCleared() {
		_spec.ClearField(task.FieldLastStartTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.AlgoGroupID(); ok {
		_spec.SetField(task.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(task.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsWarn(); ok {
		_spec.SetField(task.FieldIsWarn, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedIsWarn(); ok {
		_spec.AddField(task.FieldIsWarn, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.Period(); ok {
		_spec.SetField(task.FieldPeriod, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedPeriod(); ok {
		_spec.AddField(task.FieldPeriod, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AlgoConfig(); ok {
		_spec.SetField(task.FieldAlgoConfig, field.TypeString, value)
	}
	if tuo.mutation.AlgoConfigCleared() {
		_spec.ClearField(task.FieldAlgoConfig, field.TypeString)
	}
	if value, ok := tuo.mutation.Reason(); ok {
		_spec.SetField(task.FieldReason, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AllowTimeType(); ok {
		_spec.SetField(task.FieldAllowTimeType, field.TypeString, value)
	}
	if tuo.mutation.AllowTimeTypeCleared() {
		_spec.ClearField(task.FieldAllowTimeType, field.TypeString)
	}
	if tuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		createE := &TaskCameraCreate{config: tuo.config, mutation: newTaskCameraMutation(tuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCameraIDs(); len(nodes) > 0 && !tuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: tuo.config, mutation: newTaskCameraMutation(tuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: tuo.config, mutation: newTaskCameraMutation(tuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AlgorithmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AlgorithmTable,
			Columns: []string{task.AlgorithmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AlgorithmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AlgorithmTable,
			Columns: []string{task.AlgorithmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeviceTable,
			Columns: []string{task.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeviceTable,
			Columns: []string{task.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskCameraIDs(); len(nodes) > 0 && !tuo.mutation.TaskCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
