// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/devicecamera"
	"github.com/blues120/ias-core/data/ent/task"
)

// DeviceCameraCreate is the builder for creating a DeviceCamera entity.
type DeviceCameraCreate struct {
	config
	mutation *DeviceCameraMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DeviceCameraCreate) SetCreatedAt(t time.Time) *DeviceCameraCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DeviceCameraCreate) SetNillableCreatedAt(t *time.Time) *DeviceCameraCreate {
	if t != nil {
		dcc.SetCreatedAt(*t)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DeviceCameraCreate) SetUpdatedAt(t time.Time) *DeviceCameraCreate {
	dcc.mutation.SetUpdatedAt(t)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DeviceCameraCreate) SetNillableUpdatedAt(t *time.Time) *DeviceCameraCreate {
	if t != nil {
		dcc.SetUpdatedAt(*t)
	}
	return dcc
}

// SetDeviceID sets the "device_id" field.
func (dcc *DeviceCameraCreate) SetDeviceID(u uint64) *DeviceCameraCreate {
	dcc.mutation.SetDeviceID(u)
	return dcc
}

// SetCameraID sets the "camera_id" field.
func (dcc *DeviceCameraCreate) SetCameraID(u uint64) *DeviceCameraCreate {
	dcc.mutation.SetCameraID(u)
	return dcc
}

// SetID sets the "id" field.
func (dcc *DeviceCameraCreate) SetID(u uint64) *DeviceCameraCreate {
	dcc.mutation.SetID(u)
	return dcc
}

// SetCamera sets the "camera" edge to the Camera entity.
func (dcc *DeviceCameraCreate) SetCamera(c *Camera) *DeviceCameraCreate {
	return dcc.SetCameraID(c.ID)
}

// SetDevice sets the "device" edge to the Task entity.
func (dcc *DeviceCameraCreate) SetDevice(t *Task) *DeviceCameraCreate {
	return dcc.SetDeviceID(t.ID)
}

// Mutation returns the DeviceCameraMutation object of the builder.
func (dcc *DeviceCameraCreate) Mutation() *DeviceCameraMutation {
	return dcc.mutation
}

// Save creates the DeviceCamera in the database.
func (dcc *DeviceCameraCreate) Save(ctx context.Context) (*DeviceCamera, error) {
	dcc.defaults()
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DeviceCameraCreate) SaveX(ctx context.Context) *DeviceCamera {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DeviceCameraCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DeviceCameraCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DeviceCameraCreate) defaults() {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		v := devicecamera.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		v := devicecamera.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DeviceCameraCreate) check() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeviceCamera.created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeviceCamera.updated_at"`)}
	}
	if _, ok := dcc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "DeviceCamera.device_id"`)}
	}
	if _, ok := dcc.mutation.CameraID(); !ok {
		return &ValidationError{Name: "camera_id", err: errors.New(`ent: missing required field "DeviceCamera.camera_id"`)}
	}
	if _, ok := dcc.mutation.CameraID(); !ok {
		return &ValidationError{Name: "camera", err: errors.New(`ent: missing required edge "DeviceCamera.camera"`)}
	}
	if _, ok := dcc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required edge "DeviceCamera.device"`)}
	}
	return nil
}

func (dcc *DeviceCameraCreate) sqlSave(ctx context.Context) (*DeviceCamera, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DeviceCameraCreate) createSpec() (*DeviceCamera, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceCamera{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(devicecamera.Table, sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = dcc.conflict
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.SetField(devicecamera.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.SetField(devicecamera.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dcc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.CameraTable,
			Columns: []string{devicecamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CameraID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicecamera.DeviceTable,
			Columns: []string{devicecamera.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceCamera.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceCameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcc *DeviceCameraCreate) OnConflict(opts ...sql.ConflictOption) *DeviceCameraUpsertOne {
	dcc.conflict = opts
	return &DeviceCameraUpsertOne{
		create: dcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcc *DeviceCameraCreate) OnConflictColumns(columns ...string) *DeviceCameraUpsertOne {
	dcc.conflict = append(dcc.conflict, sql.ConflictColumns(columns...))
	return &DeviceCameraUpsertOne{
		create: dcc,
	}
}

type (
	// DeviceCameraUpsertOne is the builder for "upsert"-ing
	//  one DeviceCamera node.
	DeviceCameraUpsertOne struct {
		create *DeviceCameraCreate
	}

	// DeviceCameraUpsert is the "OnConflict" setter.
	DeviceCameraUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceCameraUpsert) SetUpdatedAt(v time.Time) *DeviceCameraUpsert {
	u.Set(devicecamera.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceCameraUpsert) UpdateUpdatedAt() *DeviceCameraUpsert {
	u.SetExcluded(devicecamera.FieldUpdatedAt)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceCameraUpsert) SetDeviceID(v uint64) *DeviceCameraUpsert {
	u.Set(devicecamera.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceCameraUpsert) UpdateDeviceID() *DeviceCameraUpsert {
	u.SetExcluded(devicecamera.FieldDeviceID)
	return u
}

// SetCameraID sets the "camera_id" field.
func (u *DeviceCameraUpsert) SetCameraID(v uint64) *DeviceCameraUpsert {
	u.Set(devicecamera.FieldCameraID, v)
	return u
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *DeviceCameraUpsert) UpdateCameraID() *DeviceCameraUpsert {
	u.SetExcluded(devicecamera.FieldCameraID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicecamera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceCameraUpsertOne) UpdateNewValues() *DeviceCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(devicecamera.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(devicecamera.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceCameraUpsertOne) Ignore() *DeviceCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceCameraUpsertOne) DoNothing() *DeviceCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCameraCreate.OnConflict
// documentation for more info.
func (u *DeviceCameraUpsertOne) Update(set func(*DeviceCameraUpsert)) *DeviceCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceCameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceCameraUpsertOne) SetUpdatedAt(v time.Time) *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceCameraUpsertOne) UpdateUpdatedAt() *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceCameraUpsertOne) SetDeviceID(v uint64) *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceCameraUpsertOne) UpdateDeviceID() *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateDeviceID()
	})
}

// SetCameraID sets the "camera_id" field.
func (u *DeviceCameraUpsertOne) SetCameraID(v uint64) *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetCameraID(v)
	})
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *DeviceCameraUpsertOne) UpdateCameraID() *DeviceCameraUpsertOne {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateCameraID()
	})
}

// Exec executes the query.
func (u *DeviceCameraUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCameraCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceCameraUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceCameraUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceCameraUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceCameraCreateBulk is the builder for creating many DeviceCamera entities in bulk.
type DeviceCameraCreateBulk struct {
	config
	err      error
	builders []*DeviceCameraCreate
	conflict []sql.ConflictOption
}

// Save creates the DeviceCamera entities in the database.
func (dccb *DeviceCameraCreateBulk) Save(ctx context.Context) ([]*DeviceCamera, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DeviceCamera, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceCameraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DeviceCameraCreateBulk) SaveX(ctx context.Context) []*DeviceCamera {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DeviceCameraCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DeviceCameraCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceCamera.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceCameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dccb *DeviceCameraCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceCameraUpsertBulk {
	dccb.conflict = opts
	return &DeviceCameraUpsertBulk{
		create: dccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dccb *DeviceCameraCreateBulk) OnConflictColumns(columns ...string) *DeviceCameraUpsertBulk {
	dccb.conflict = append(dccb.conflict, sql.ConflictColumns(columns...))
	return &DeviceCameraUpsertBulk{
		create: dccb,
	}
}

// DeviceCameraUpsertBulk is the builder for "upsert"-ing
// a bulk of DeviceCamera nodes.
type DeviceCameraUpsertBulk struct {
	create *DeviceCameraCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicecamera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceCameraUpsertBulk) UpdateNewValues() *DeviceCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(devicecamera.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(devicecamera.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceCamera.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceCameraUpsertBulk) Ignore() *DeviceCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceCameraUpsertBulk) DoNothing() *DeviceCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCameraCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceCameraUpsertBulk) Update(set func(*DeviceCameraUpsert)) *DeviceCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceCameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceCameraUpsertBulk) SetUpdatedAt(v time.Time) *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceCameraUpsertBulk) UpdateUpdatedAt() *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceCameraUpsertBulk) SetDeviceID(v uint64) *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceCameraUpsertBulk) UpdateDeviceID() *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateDeviceID()
	})
}

// SetCameraID sets the "camera_id" field.
func (u *DeviceCameraUpsertBulk) SetCameraID(v uint64) *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.SetCameraID(v)
	})
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *DeviceCameraUpsertBulk) UpdateCameraID() *DeviceCameraUpsertBulk {
	return u.Update(func(s *DeviceCameraUpsert) {
		s.UpdateCameraID()
	})
}

// Exec executes the query.
func (u *DeviceCameraUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeviceCameraCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCameraCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceCameraUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
