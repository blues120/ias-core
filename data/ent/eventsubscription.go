// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/eventsubscription"
)

// EventSubscription is the model entity for the EventSubscription schema.
type EventSubscription struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 盒子id
	BoxID string `json:"box_id,omitempty"`
	// 通道id
	ChannelID string `json:"channel_id,omitempty"`
	// 回调地址
	Callback string `json:"callback,omitempty"`
	// 模版id
	TemplateID string `json:"template_id,omitempty"`
	// 订阅状态
	Status       biz.EventSubStatus `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventsubscription.FieldID:
			values[i] = new(sql.NullInt64)
		case eventsubscription.FieldBoxID, eventsubscription.FieldChannelID, eventsubscription.FieldCallback, eventsubscription.FieldTemplateID, eventsubscription.FieldStatus:
			values[i] = new(sql.NullString)
		case eventsubscription.FieldCreatedAt, eventsubscription.FieldUpdatedAt, eventsubscription.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventSubscription fields.
func (es *EventSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = uint64(value.Int64)
		case eventsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case eventsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case eventsubscription.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				es.DeletedAt = value.Time
			}
		case eventsubscription.FieldBoxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field box_id", values[i])
			} else if value.Valid {
				es.BoxID = value.String
			}
		case eventsubscription.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				es.ChannelID = value.String
			}
		case eventsubscription.FieldCallback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback", values[i])
			} else if value.Valid {
				es.Callback = value.String
			}
		case eventsubscription.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				es.TemplateID = value.String
			}
		case eventsubscription.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				es.Status = biz.EventSubStatus(value.String)
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventSubscription.
// This includes values selected through modifiers, order, etc.
func (es *EventSubscription) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// Update returns a builder for updating this EventSubscription.
// Note that you need to call EventSubscription.Unwrap() before calling this method if this EventSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EventSubscription) Update() *EventSubscriptionUpdateOne {
	return NewEventSubscriptionClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the EventSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EventSubscription) Unwrap() *EventSubscription {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventSubscription is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EventSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("EventSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(es.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("box_id=")
	builder.WriteString(es.BoxID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(es.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("callback=")
	builder.WriteString(es.Callback)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(es.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", es.Status))
	builder.WriteByte(')')
	return builder.String()
}

// EventSubscriptions is a parsable slice of EventSubscription.
type EventSubscriptions []*EventSubscription
