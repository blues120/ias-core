// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpushlog"
)

// WarnPushLogUpdate is the builder for updating WarnPushLog entities.
type WarnPushLogUpdate struct {
	config
	hooks     []Hook
	mutation  *WarnPushLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarnPushLogUpdate builder.
func (wplu *WarnPushLogUpdate) Where(ps ...predicate.WarnPushLog) *WarnPushLogUpdate {
	wplu.mutation.Where(ps...)
	return wplu
}

// SetUpdatedAt sets the "updated_at" field.
func (wplu *WarnPushLogUpdate) SetUpdatedAt(t time.Time) *WarnPushLogUpdate {
	wplu.mutation.SetUpdatedAt(t)
	return wplu
}

// SetDeletedAt sets the "deleted_at" field.
func (wplu *WarnPushLogUpdate) SetDeletedAt(t time.Time) *WarnPushLogUpdate {
	wplu.mutation.SetDeletedAt(t)
	return wplu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableDeletedAt(t *time.Time) *WarnPushLogUpdate {
	if t != nil {
		wplu.SetDeletedAt(*t)
	}
	return wplu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wplu *WarnPushLogUpdate) ClearDeletedAt() *WarnPushLogUpdate {
	wplu.mutation.ClearDeletedAt()
	return wplu
}

// SetTenantID sets the "tenant_id" field.
func (wplu *WarnPushLogUpdate) SetTenantID(s string) *WarnPushLogUpdate {
	wplu.mutation.SetTenantID(s)
	return wplu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableTenantID(s *string) *WarnPushLogUpdate {
	if s != nil {
		wplu.SetTenantID(*s)
	}
	return wplu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wplu *WarnPushLogUpdate) ClearTenantID() *WarnPushLogUpdate {
	wplu.mutation.ClearTenantID()
	return wplu
}

// SetAccessOrgList sets the "access_org_list" field.
func (wplu *WarnPushLogUpdate) SetAccessOrgList(s string) *WarnPushLogUpdate {
	wplu.mutation.SetAccessOrgList(s)
	return wplu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableAccessOrgList(s *string) *WarnPushLogUpdate {
	if s != nil {
		wplu.SetAccessOrgList(*s)
	}
	return wplu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wplu *WarnPushLogUpdate) ClearAccessOrgList() *WarnPushLogUpdate {
	wplu.mutation.ClearAccessOrgList()
	return wplu
}

// SetPushID sets the "push_id" field.
func (wplu *WarnPushLogUpdate) SetPushID(u uint64) *WarnPushLogUpdate {
	wplu.mutation.SetPushID(u)
	return wplu
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillablePushID(u *uint64) *WarnPushLogUpdate {
	if u != nil {
		wplu.SetPushID(*u)
	}
	return wplu
}

// SetParam sets the "param" field.
func (wplu *WarnPushLogUpdate) SetParam(s string) *WarnPushLogUpdate {
	wplu.mutation.SetParam(s)
	return wplu
}

// SetNillableParam sets the "param" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableParam(s *string) *WarnPushLogUpdate {
	if s != nil {
		wplu.SetParam(*s)
	}
	return wplu
}

// SetRemark sets the "remark" field.
func (wplu *WarnPushLogUpdate) SetRemark(s string) *WarnPushLogUpdate {
	wplu.mutation.SetRemark(s)
	return wplu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableRemark(s *string) *WarnPushLogUpdate {
	if s != nil {
		wplu.SetRemark(*s)
	}
	return wplu
}

// SetStatus sets the "status" field.
func (wplu *WarnPushLogUpdate) SetStatus(bpls biz.WarnPushLogStatus) *WarnPushLogUpdate {
	wplu.mutation.SetStatus(bpls)
	return wplu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wplu *WarnPushLogUpdate) SetNillableStatus(bpls *biz.WarnPushLogStatus) *WarnPushLogUpdate {
	if bpls != nil {
		wplu.SetStatus(*bpls)
	}
	return wplu
}

// SetPush sets the "push" edge to the WarnPush entity.
func (wplu *WarnPushLogUpdate) SetPush(w *WarnPush) *WarnPushLogUpdate {
	return wplu.SetPushID(w.ID)
}

// Mutation returns the WarnPushLogMutation object of the builder.
func (wplu *WarnPushLogUpdate) Mutation() *WarnPushLogMutation {
	return wplu.mutation
}

// ClearPush clears the "push" edge to the WarnPush entity.
func (wplu *WarnPushLogUpdate) ClearPush() *WarnPushLogUpdate {
	wplu.mutation.ClearPush()
	return wplu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wplu *WarnPushLogUpdate) Save(ctx context.Context) (int, error) {
	if err := wplu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wplu.sqlSave, wplu.mutation, wplu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wplu *WarnPushLogUpdate) SaveX(ctx context.Context) int {
	affected, err := wplu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wplu *WarnPushLogUpdate) Exec(ctx context.Context) error {
	_, err := wplu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wplu *WarnPushLogUpdate) ExecX(ctx context.Context) {
	if err := wplu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wplu *WarnPushLogUpdate) defaults() error {
	if _, ok := wplu.mutation.UpdatedAt(); !ok {
		if warnpushlog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpushlog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpushlog.UpdateDefaultUpdatedAt()
		wplu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wplu *WarnPushLogUpdate) check() error {
	if v, ok := wplu.mutation.Status(); ok {
		if err := warnpushlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPushLog.status": %w`, err)}
		}
	}
	if _, ok := wplu.mutation.PushID(); wplu.mutation.PushCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WarnPushLog.push"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wplu *WarnPushLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnPushLogUpdate {
	wplu.modifiers = append(wplu.modifiers, modifiers...)
	return wplu
}

func (wplu *WarnPushLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wplu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(warnpushlog.Table, warnpushlog.Columns, sqlgraph.NewFieldSpec(warnpushlog.FieldID, field.TypeUint64))
	if ps := wplu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wplu.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpushlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wplu.mutation.DeletedAt(); ok {
		_spec.SetField(warnpushlog.FieldDeletedAt, field.TypeTime, value)
	}
	if wplu.mutation.DeletedAtCleared() {
		_spec.ClearField(warnpushlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wplu.mutation.TenantID(); ok {
		_spec.SetField(warnpushlog.FieldTenantID, field.TypeString, value)
	}
	if wplu.mutation.TenantIDCleared() {
		_spec.ClearField(warnpushlog.FieldTenantID, field.TypeString)
	}
	if value, ok := wplu.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpushlog.FieldAccessOrgList, field.TypeString, value)
	}
	if wplu.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnpushlog.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wplu.mutation.Param(); ok {
		_spec.SetField(warnpushlog.FieldParam, field.TypeString, value)
	}
	if value, ok := wplu.mutation.Remark(); ok {
		_spec.SetField(warnpushlog.FieldRemark, field.TypeString, value)
	}
	if value, ok := wplu.mutation.Status(); ok {
		_spec.SetField(warnpushlog.FieldStatus, field.TypeEnum, value)
	}
	if wplu.mutation.PushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warnpushlog.PushTable,
			Columns: []string{warnpushlog.PushColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wplu.mutation.PushIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warnpushlog.PushTable,
			Columns: []string{warnpushlog.PushColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wplu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wplu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnpushlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wplu.mutation.done = true
	return n, nil
}

// WarnPushLogUpdateOne is the builder for updating a single WarnPushLog entity.
type WarnPushLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarnPushLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wpluo *WarnPushLogUpdateOne) SetUpdatedAt(t time.Time) *WarnPushLogUpdateOne {
	wpluo.mutation.SetUpdatedAt(t)
	return wpluo
}

// SetDeletedAt sets the "deleted_at" field.
func (wpluo *WarnPushLogUpdateOne) SetDeletedAt(t time.Time) *WarnPushLogUpdateOne {
	wpluo.mutation.SetDeletedAt(t)
	return wpluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableDeletedAt(t *time.Time) *WarnPushLogUpdateOne {
	if t != nil {
		wpluo.SetDeletedAt(*t)
	}
	return wpluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wpluo *WarnPushLogUpdateOne) ClearDeletedAt() *WarnPushLogUpdateOne {
	wpluo.mutation.ClearDeletedAt()
	return wpluo
}

// SetTenantID sets the "tenant_id" field.
func (wpluo *WarnPushLogUpdateOne) SetTenantID(s string) *WarnPushLogUpdateOne {
	wpluo.mutation.SetTenantID(s)
	return wpluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableTenantID(s *string) *WarnPushLogUpdateOne {
	if s != nil {
		wpluo.SetTenantID(*s)
	}
	return wpluo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wpluo *WarnPushLogUpdateOne) ClearTenantID() *WarnPushLogUpdateOne {
	wpluo.mutation.ClearTenantID()
	return wpluo
}

// SetAccessOrgList sets the "access_org_list" field.
func (wpluo *WarnPushLogUpdateOne) SetAccessOrgList(s string) *WarnPushLogUpdateOne {
	wpluo.mutation.SetAccessOrgList(s)
	return wpluo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableAccessOrgList(s *string) *WarnPushLogUpdateOne {
	if s != nil {
		wpluo.SetAccessOrgList(*s)
	}
	return wpluo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wpluo *WarnPushLogUpdateOne) ClearAccessOrgList() *WarnPushLogUpdateOne {
	wpluo.mutation.ClearAccessOrgList()
	return wpluo
}

// SetPushID sets the "push_id" field.
func (wpluo *WarnPushLogUpdateOne) SetPushID(u uint64) *WarnPushLogUpdateOne {
	wpluo.mutation.SetPushID(u)
	return wpluo
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillablePushID(u *uint64) *WarnPushLogUpdateOne {
	if u != nil {
		wpluo.SetPushID(*u)
	}
	return wpluo
}

// SetParam sets the "param" field.
func (wpluo *WarnPushLogUpdateOne) SetParam(s string) *WarnPushLogUpdateOne {
	wpluo.mutation.SetParam(s)
	return wpluo
}

// SetNillableParam sets the "param" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableParam(s *string) *WarnPushLogUpdateOne {
	if s != nil {
		wpluo.SetParam(*s)
	}
	return wpluo
}

// SetRemark sets the "remark" field.
func (wpluo *WarnPushLogUpdateOne) SetRemark(s string) *WarnPushLogUpdateOne {
	wpluo.mutation.SetRemark(s)
	return wpluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableRemark(s *string) *WarnPushLogUpdateOne {
	if s != nil {
		wpluo.SetRemark(*s)
	}
	return wpluo
}

// SetStatus sets the "status" field.
func (wpluo *WarnPushLogUpdateOne) SetStatus(bpls biz.WarnPushLogStatus) *WarnPushLogUpdateOne {
	wpluo.mutation.SetStatus(bpls)
	return wpluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wpluo *WarnPushLogUpdateOne) SetNillableStatus(bpls *biz.WarnPushLogStatus) *WarnPushLogUpdateOne {
	if bpls != nil {
		wpluo.SetStatus(*bpls)
	}
	return wpluo
}

// SetPush sets the "push" edge to the WarnPush entity.
func (wpluo *WarnPushLogUpdateOne) SetPush(w *WarnPush) *WarnPushLogUpdateOne {
	return wpluo.SetPushID(w.ID)
}

// Mutation returns the WarnPushLogMutation object of the builder.
func (wpluo *WarnPushLogUpdateOne) Mutation() *WarnPushLogMutation {
	return wpluo.mutation
}

// ClearPush clears the "push" edge to the WarnPush entity.
func (wpluo *WarnPushLogUpdateOne) ClearPush() *WarnPushLogUpdateOne {
	wpluo.mutation.ClearPush()
	return wpluo
}

// Where appends a list predicates to the WarnPushLogUpdate builder.
func (wpluo *WarnPushLogUpdateOne) Where(ps ...predicate.WarnPushLog) *WarnPushLogUpdateOne {
	wpluo.mutation.Where(ps...)
	return wpluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wpluo *WarnPushLogUpdateOne) Select(field string, fields ...string) *WarnPushLogUpdateOne {
	wpluo.fields = append([]string{field}, fields...)
	return wpluo
}

// Save executes the query and returns the updated WarnPushLog entity.
func (wpluo *WarnPushLogUpdateOne) Save(ctx context.Context) (*WarnPushLog, error) {
	if err := wpluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wpluo.sqlSave, wpluo.mutation, wpluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wpluo *WarnPushLogUpdateOne) SaveX(ctx context.Context) *WarnPushLog {
	node, err := wpluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wpluo *WarnPushLogUpdateOne) Exec(ctx context.Context) error {
	_, err := wpluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpluo *WarnPushLogUpdateOne) ExecX(ctx context.Context) {
	if err := wpluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpluo *WarnPushLogUpdateOne) defaults() error {
	if _, ok := wpluo.mutation.UpdatedAt(); !ok {
		if warnpushlog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpushlog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpushlog.UpdateDefaultUpdatedAt()
		wpluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wpluo *WarnPushLogUpdateOne) check() error {
	if v, ok := wpluo.mutation.Status(); ok {
		if err := warnpushlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPushLog.status": %w`, err)}
		}
	}
	if _, ok := wpluo.mutation.PushID(); wpluo.mutation.PushCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WarnPushLog.push"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wpluo *WarnPushLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnPushLogUpdateOne {
	wpluo.modifiers = append(wpluo.modifiers, modifiers...)
	return wpluo
}

func (wpluo *WarnPushLogUpdateOne) sqlSave(ctx context.Context) (_node *WarnPushLog, err error) {
	if err := wpluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(warnpushlog.Table, warnpushlog.Columns, sqlgraph.NewFieldSpec(warnpushlog.FieldID, field.TypeUint64))
	id, ok := wpluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WarnPushLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wpluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warnpushlog.FieldID)
		for _, f := range fields {
			if !warnpushlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warnpushlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wpluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpluo.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpushlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wpluo.mutation.DeletedAt(); ok {
		_spec.SetField(warnpushlog.FieldDeletedAt, field.TypeTime, value)
	}
	if wpluo.mutation.DeletedAtCleared() {
		_spec.ClearField(warnpushlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wpluo.mutation.TenantID(); ok {
		_spec.SetField(warnpushlog.FieldTenantID, field.TypeString, value)
	}
	if wpluo.mutation.TenantIDCleared() {
		_spec.ClearField(warnpushlog.FieldTenantID, field.TypeString)
	}
	if value, ok := wpluo.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpushlog.FieldAccessOrgList, field.TypeString, value)
	}
	if wpluo.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnpushlog.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wpluo.mutation.Param(); ok {
		_spec.SetField(warnpushlog.FieldParam, field.TypeString, value)
	}
	if value, ok := wpluo.mutation.Remark(); ok {
		_spec.SetField(warnpushlog.FieldRemark, field.TypeString, value)
	}
	if value, ok := wpluo.mutation.Status(); ok {
		_spec.SetField(warnpushlog.FieldStatus, field.TypeEnum, value)
	}
	if wpluo.mutation.PushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warnpushlog.PushTable,
			Columns: []string{warnpushlog.PushColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpluo.mutation.PushIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warnpushlog.PushTable,
			Columns: []string{warnpushlog.PushColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wpluo.modifiers...)
	_node = &WarnPushLog{config: wpluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wpluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnpushlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wpluo.mutation.done = true
	return _node, nil
}
