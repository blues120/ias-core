// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent"
	"github.com/blues120/ias-core/data/ent/activeinfo"
	"github.com/blues120/ias-core/data/ent/algorithm"
	"github.com/blues120/ias-core/data/ent/algorithmalarmtype"
	"github.com/blues120/ias-core/data/ent/area"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/device"
	"github.com/blues120/ias-core/data/ent/devicealgo"
	"github.com/blues120/ias-core/data/ent/devicecamera"
	"github.com/blues120/ias-core/data/ent/devicetoken"
	"github.com/blues120/ias-core/data/ent/equipattr"
	"github.com/blues120/ias-core/data/ent/eventsubscription"
	"github.com/blues120/ias-core/data/ent/fileupload"
	"github.com/blues120/ias-core/data/ent/inform"
	"github.com/blues120/ias-core/data/ent/organization"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/setting"
	"github.com/blues120/ias-core/data/ent/signature"
	"github.com/blues120/ias-core/data/ent/task"
	"github.com/blues120/ias-core/data/ent/taskcamera"
	"github.com/blues120/ias-core/data/ent/tasklimits"
	"github.com/blues120/ias-core/data/ent/upplatform"
	"github.com/blues120/ias-core/data/ent/user"
	"github.com/blues120/ias-core/data/ent/warningtype"
	"github.com/blues120/ias-core/data/ent/warnpush"
	"github.com/blues120/ias-core/data/ent/warnpushlog"
	"github.com/blues120/ias-core/data/ent/warnsmserr"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ActiveInfoFunc type is an adapter to allow the use of ordinary function as a Querier.
type ActiveInfoFunc func(context.Context, *ent.ActiveInfoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ActiveInfoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ActiveInfoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ActiveInfoQuery", q)
}

// The TraverseActiveInfo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseActiveInfo func(context.Context, *ent.ActiveInfoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseActiveInfo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseActiveInfo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActiveInfoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ActiveInfoQuery", q)
}

// The AlgorithmFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlgorithmFunc func(context.Context, *ent.AlgorithmQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlgorithmFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlgorithmQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlgorithmQuery", q)
}

// The TraverseAlgorithm type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlgorithm func(context.Context, *ent.AlgorithmQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlgorithm) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlgorithm) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlgorithmQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlgorithmQuery", q)
}

// The AlgorithmAlarmTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlgorithmAlarmTypeFunc func(context.Context, *ent.AlgorithmAlarmTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlgorithmAlarmTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlgorithmAlarmTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlgorithmAlarmTypeQuery", q)
}

// The TraverseAlgorithmAlarmType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlgorithmAlarmType func(context.Context, *ent.AlgorithmAlarmTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlgorithmAlarmType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlgorithmAlarmType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlgorithmAlarmTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlgorithmAlarmTypeQuery", q)
}

// The AreaFunc type is an adapter to allow the use of ordinary function as a Querier.
type AreaFunc func(context.Context, *ent.AreaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AreaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AreaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AreaQuery", q)
}

// The TraverseArea type is an adapter to allow the use of ordinary function as Traverser.
type TraverseArea func(context.Context, *ent.AreaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseArea) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseArea) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AreaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AreaQuery", q)
}

// The CameraFunc type is an adapter to allow the use of ordinary function as a Querier.
type CameraFunc func(context.Context, *ent.CameraQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CameraFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CameraQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CameraQuery", q)
}

// The TraverseCamera type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCamera func(context.Context, *ent.CameraQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCamera) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCamera) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CameraQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CameraQuery", q)
}

// The DeviceFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeviceFunc func(context.Context, *ent.DeviceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeviceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeviceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeviceQuery", q)
}

// The TraverseDevice type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDevice func(context.Context, *ent.DeviceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDevice) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDevice) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeviceQuery", q)
}

// The DeviceAlgoFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeviceAlgoFunc func(context.Context, *ent.DeviceAlgoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeviceAlgoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeviceAlgoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeviceAlgoQuery", q)
}

// The TraverseDeviceAlgo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeviceAlgo func(context.Context, *ent.DeviceAlgoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeviceAlgo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeviceAlgo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceAlgoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeviceAlgoQuery", q)
}

// The DeviceCameraFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeviceCameraFunc func(context.Context, *ent.DeviceCameraQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeviceCameraFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeviceCameraQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeviceCameraQuery", q)
}

// The TraverseDeviceCamera type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeviceCamera func(context.Context, *ent.DeviceCameraQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeviceCamera) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeviceCamera) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceCameraQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeviceCameraQuery", q)
}

// The DeviceTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeviceTokenFunc func(context.Context, *ent.DeviceTokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeviceTokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeviceTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeviceTokenQuery", q)
}

// The TraverseDeviceToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeviceToken func(context.Context, *ent.DeviceTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeviceToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeviceToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeviceTokenQuery", q)
}

// The EquipAttrFunc type is an adapter to allow the use of ordinary function as a Querier.
type EquipAttrFunc func(context.Context, *ent.EquipAttrQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EquipAttrFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EquipAttrQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EquipAttrQuery", q)
}

// The TraverseEquipAttr type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEquipAttr func(context.Context, *ent.EquipAttrQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEquipAttr) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEquipAttr) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipAttrQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EquipAttrQuery", q)
}

// The EventSubscriptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventSubscriptionFunc func(context.Context, *ent.EventSubscriptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventSubscriptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventSubscriptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventSubscriptionQuery", q)
}

// The TraverseEventSubscription type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEventSubscription func(context.Context, *ent.EventSubscriptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEventSubscription) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEventSubscription) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventSubscriptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventSubscriptionQuery", q)
}

// The FileUploadFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileUploadFunc func(context.Context, *ent.FileUploadQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileUploadFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileUploadQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileUploadQuery", q)
}

// The TraverseFileUpload type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFileUpload func(context.Context, *ent.FileUploadQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFileUpload) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFileUpload) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileUploadQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileUploadQuery", q)
}

// The InformFunc type is an adapter to allow the use of ordinary function as a Querier.
type InformFunc func(context.Context, *ent.InformQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InformFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InformQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InformQuery", q)
}

// The TraverseInform type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInform func(context.Context, *ent.InformQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInform) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInform) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InformQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InformQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *ent.OrganizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *ent.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The SettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type SettingFunc func(context.Context, *ent.SettingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SettingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SettingQuery", q)
}

// The TraverseSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSetting func(context.Context, *ent.SettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSetting) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSetting) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SettingQuery", q)
}

// The SignatureFunc type is an adapter to allow the use of ordinary function as a Querier.
type SignatureFunc func(context.Context, *ent.SignatureQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SignatureFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SignatureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SignatureQuery", q)
}

// The TraverseSignature type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSignature func(context.Context, *ent.SignatureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSignature) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSignature) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SignatureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SignatureQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *ent.TaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *ent.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TaskCameraFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskCameraFunc func(context.Context, *ent.TaskCameraQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskCameraFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskCameraQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskCameraQuery", q)
}

// The TraverseTaskCamera type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTaskCamera func(context.Context, *ent.TaskCameraQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTaskCamera) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTaskCamera) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskCameraQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskCameraQuery", q)
}

// The TaskLimitsFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskLimitsFunc func(context.Context, *ent.TaskLimitsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskLimitsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskLimitsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskLimitsQuery", q)
}

// The TraverseTaskLimits type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTaskLimits func(context.Context, *ent.TaskLimitsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTaskLimits) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTaskLimits) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskLimitsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskLimitsQuery", q)
}

// The UpPlatformFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpPlatformFunc func(context.Context, *ent.UpPlatformQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpPlatformFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpPlatformQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpPlatformQuery", q)
}

// The TraverseUpPlatform type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpPlatform func(context.Context, *ent.UpPlatformQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpPlatform) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpPlatform) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpPlatformQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpPlatformQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The WarnPushFunc type is an adapter to allow the use of ordinary function as a Querier.
type WarnPushFunc func(context.Context, *ent.WarnPushQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WarnPushFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WarnPushQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WarnPushQuery", q)
}

// The TraverseWarnPush type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWarnPush func(context.Context, *ent.WarnPushQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWarnPush) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWarnPush) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WarnPushQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WarnPushQuery", q)
}

// The WarnPushLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type WarnPushLogFunc func(context.Context, *ent.WarnPushLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WarnPushLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WarnPushLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WarnPushLogQuery", q)
}

// The TraverseWarnPushLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWarnPushLog func(context.Context, *ent.WarnPushLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWarnPushLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWarnPushLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WarnPushLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WarnPushLogQuery", q)
}

// The WarnSmsErrFunc type is an adapter to allow the use of ordinary function as a Querier.
type WarnSmsErrFunc func(context.Context, *ent.WarnSmsErrQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WarnSmsErrFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WarnSmsErrQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WarnSmsErrQuery", q)
}

// The TraverseWarnSmsErr type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWarnSmsErr func(context.Context, *ent.WarnSmsErrQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWarnSmsErr) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWarnSmsErr) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WarnSmsErrQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WarnSmsErrQuery", q)
}

// The WarningTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type WarningTypeFunc func(context.Context, *ent.WarningTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WarningTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WarningTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WarningTypeQuery", q)
}

// The TraverseWarningType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWarningType func(context.Context, *ent.WarningTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWarningType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWarningType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WarningTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WarningTypeQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.ActiveInfoQuery:
		return &query[*ent.ActiveInfoQuery, predicate.ActiveInfo, activeinfo.OrderOption]{typ: ent.TypeActiveInfo, tq: q}, nil
	case *ent.AlgorithmQuery:
		return &query[*ent.AlgorithmQuery, predicate.Algorithm, algorithm.OrderOption]{typ: ent.TypeAlgorithm, tq: q}, nil
	case *ent.AlgorithmAlarmTypeQuery:
		return &query[*ent.AlgorithmAlarmTypeQuery, predicate.AlgorithmAlarmType, algorithmalarmtype.OrderOption]{typ: ent.TypeAlgorithmAlarmType, tq: q}, nil
	case *ent.AreaQuery:
		return &query[*ent.AreaQuery, predicate.Area, area.OrderOption]{typ: ent.TypeArea, tq: q}, nil
	case *ent.CameraQuery:
		return &query[*ent.CameraQuery, predicate.Camera, camera.OrderOption]{typ: ent.TypeCamera, tq: q}, nil
	case *ent.DeviceQuery:
		return &query[*ent.DeviceQuery, predicate.Device, device.OrderOption]{typ: ent.TypeDevice, tq: q}, nil
	case *ent.DeviceAlgoQuery:
		return &query[*ent.DeviceAlgoQuery, predicate.DeviceAlgo, devicealgo.OrderOption]{typ: ent.TypeDeviceAlgo, tq: q}, nil
	case *ent.DeviceCameraQuery:
		return &query[*ent.DeviceCameraQuery, predicate.DeviceCamera, devicecamera.OrderOption]{typ: ent.TypeDeviceCamera, tq: q}, nil
	case *ent.DeviceTokenQuery:
		return &query[*ent.DeviceTokenQuery, predicate.DeviceToken, devicetoken.OrderOption]{typ: ent.TypeDeviceToken, tq: q}, nil
	case *ent.EquipAttrQuery:
		return &query[*ent.EquipAttrQuery, predicate.EquipAttr, equipattr.OrderOption]{typ: ent.TypeEquipAttr, tq: q}, nil
	case *ent.EventSubscriptionQuery:
		return &query[*ent.EventSubscriptionQuery, predicate.EventSubscription, eventsubscription.OrderOption]{typ: ent.TypeEventSubscription, tq: q}, nil
	case *ent.FileUploadQuery:
		return &query[*ent.FileUploadQuery, predicate.FileUpload, fileupload.OrderOption]{typ: ent.TypeFileUpload, tq: q}, nil
	case *ent.InformQuery:
		return &query[*ent.InformQuery, predicate.Inform, inform.OrderOption]{typ: ent.TypeInform, tq: q}, nil
	case *ent.OrganizationQuery:
		return &query[*ent.OrganizationQuery, predicate.Organization, organization.OrderOption]{typ: ent.TypeOrganization, tq: q}, nil
	case *ent.SettingQuery:
		return &query[*ent.SettingQuery, predicate.Setting, setting.OrderOption]{typ: ent.TypeSetting, tq: q}, nil
	case *ent.SignatureQuery:
		return &query[*ent.SignatureQuery, predicate.Signature, signature.OrderOption]{typ: ent.TypeSignature, tq: q}, nil
	case *ent.TaskQuery:
		return &query[*ent.TaskQuery, predicate.Task, task.OrderOption]{typ: ent.TypeTask, tq: q}, nil
	case *ent.TaskCameraQuery:
		return &query[*ent.TaskCameraQuery, predicate.TaskCamera, taskcamera.OrderOption]{typ: ent.TypeTaskCamera, tq: q}, nil
	case *ent.TaskLimitsQuery:
		return &query[*ent.TaskLimitsQuery, predicate.TaskLimits, tasklimits.OrderOption]{typ: ent.TypeTaskLimits, tq: q}, nil
	case *ent.UpPlatformQuery:
		return &query[*ent.UpPlatformQuery, predicate.UpPlatform, upplatform.OrderOption]{typ: ent.TypeUpPlatform, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.WarnPushQuery:
		return &query[*ent.WarnPushQuery, predicate.WarnPush, warnpush.OrderOption]{typ: ent.TypeWarnPush, tq: q}, nil
	case *ent.WarnPushLogQuery:
		return &query[*ent.WarnPushLogQuery, predicate.WarnPushLog, warnpushlog.OrderOption]{typ: ent.TypeWarnPushLog, tq: q}, nil
	case *ent.WarnSmsErrQuery:
		return &query[*ent.WarnSmsErrQuery, predicate.WarnSmsErr, warnsmserr.OrderOption]{typ: ent.TypeWarnSmsErr, tq: q}, nil
	case *ent.WarningTypeQuery:
		return &query[*ent.WarningTypeQuery, predicate.WarningType, warningtype.OrderOption]{typ: ent.TypeWarningType, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
