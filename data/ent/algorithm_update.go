// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/algorithm"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
)

// AlgorithmUpdate is the builder for updating Algorithm entities.
type AlgorithmUpdate struct {
	config
	hooks     []Hook
	mutation  *AlgorithmMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlgorithmUpdate builder.
func (au *AlgorithmUpdate) Where(ps ...predicate.Algorithm) *AlgorithmUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AlgorithmUpdate) SetUpdatedAt(t time.Time) *AlgorithmUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AlgorithmUpdate) SetDeletedAt(t time.Time) *AlgorithmUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableDeletedAt(t *time.Time) *AlgorithmUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AlgorithmUpdate) ClearDeletedAt() *AlgorithmUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetName sets the "name" field.
func (au *AlgorithmUpdate) SetName(s string) *AlgorithmUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableName(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetType sets the "type" field.
func (au *AlgorithmUpdate) SetType(s string) *AlgorithmUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableType(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AlgorithmUpdate) SetDescription(s string) *AlgorithmUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableDescription(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetVersion sets the "version" field.
func (au *AlgorithmUpdate) SetVersion(s string) *AlgorithmUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableVersion(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetVersion(*s)
	}
	return au
}

// SetAppName sets the "app_name" field.
func (au *AlgorithmUpdate) SetAppName(s string) *AlgorithmUpdate {
	au.mutation.SetAppName(s)
	return au
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAppName(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAppName(*s)
	}
	return au
}

// SetAlarmType sets the "alarm_type" field.
func (au *AlgorithmUpdate) SetAlarmType(s string) *AlgorithmUpdate {
	au.mutation.SetAlarmType(s)
	return au
}

// SetNillableAlarmType sets the "alarm_type" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlarmType(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlarmType(*s)
	}
	return au
}

// SetAlarmName sets the "alarm_name" field.
func (au *AlgorithmUpdate) SetAlarmName(s string) *AlgorithmUpdate {
	au.mutation.SetAlarmName(s)
	return au
}

// SetNillableAlarmName sets the "alarm_name" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlarmName(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlarmName(*s)
	}
	return au
}

// SetNotify sets the "notify" field.
func (au *AlgorithmUpdate) SetNotify(u uint) *AlgorithmUpdate {
	au.mutation.ResetNotify()
	au.mutation.SetNotify(u)
	return au
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableNotify(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetNotify(*u)
	}
	return au
}

// AddNotify adds u to the "notify" field.
func (au *AlgorithmUpdate) AddNotify(u int) *AlgorithmUpdate {
	au.mutation.AddNotify(u)
	return au
}

// SetExtend sets the "extend" field.
func (au *AlgorithmUpdate) SetExtend(m map[string]interface{}) *AlgorithmUpdate {
	au.mutation.SetExtend(m)
	return au
}

// SetDrawType sets the "draw_type" field.
func (au *AlgorithmUpdate) SetDrawType(u uint) *AlgorithmUpdate {
	au.mutation.ResetDrawType()
	au.mutation.SetDrawType(u)
	return au
}

// SetNillableDrawType sets the "draw_type" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableDrawType(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetDrawType(*u)
	}
	return au
}

// AddDrawType adds u to the "draw_type" field.
func (au *AlgorithmUpdate) AddDrawType(u int) *AlgorithmUpdate {
	au.mutation.AddDrawType(u)
	return au
}

// SetBaseType sets the "base_type" field.
func (au *AlgorithmUpdate) SetBaseType(u uint) *AlgorithmUpdate {
	au.mutation.ResetBaseType()
	au.mutation.SetBaseType(u)
	return au
}

// SetNillableBaseType sets the "base_type" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableBaseType(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetBaseType(*u)
	}
	return au
}

// AddBaseType adds u to the "base_type" field.
func (au *AlgorithmUpdate) AddBaseType(u int) *AlgorithmUpdate {
	au.mutation.AddBaseType(u)
	return au
}

// SetAvailable sets the "available" field.
func (au *AlgorithmUpdate) SetAvailable(u uint) *AlgorithmUpdate {
	au.mutation.ResetAvailable()
	au.mutation.SetAvailable(u)
	return au
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAvailable(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetAvailable(*u)
	}
	return au
}

// AddAvailable adds u to the "available" field.
func (au *AlgorithmUpdate) AddAvailable(u int) *AlgorithmUpdate {
	au.mutation.AddAvailable(u)
	return au
}

// SetImage sets the "image" field.
func (au *AlgorithmUpdate) SetImage(s string) *AlgorithmUpdate {
	au.mutation.SetImage(s)
	return au
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableImage(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetImage(*s)
	}
	return au
}

// SetLabelMap sets the "label_map" field.
func (au *AlgorithmUpdate) SetLabelMap(s string) *AlgorithmUpdate {
	au.mutation.SetLabelMap(s)
	return au
}

// SetNillableLabelMap sets the "label_map" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableLabelMap(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetLabelMap(*s)
	}
	return au
}

// ClearLabelMap clears the value of the "label_map" field.
func (au *AlgorithmUpdate) ClearLabelMap() *AlgorithmUpdate {
	au.mutation.ClearLabelMap()
	return au
}

// SetTarget sets the "target" field.
func (au *AlgorithmUpdate) SetTarget(s string) *AlgorithmUpdate {
	au.mutation.SetTarget(s)
	return au
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableTarget(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetTarget(*s)
	}
	return au
}

// ClearTarget clears the value of the "target" field.
func (au *AlgorithmUpdate) ClearTarget() *AlgorithmUpdate {
	au.mutation.ClearTarget()
	return au
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (au *AlgorithmUpdate) SetAlgoNameEn(s string) *AlgorithmUpdate {
	au.mutation.SetAlgoNameEn(s)
	return au
}

// SetNillableAlgoNameEn sets the "algo_name_en" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlgoNameEn(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlgoNameEn(*s)
	}
	return au
}

// ClearAlgoNameEn clears the value of the "algo_name_en" field.
func (au *AlgorithmUpdate) ClearAlgoNameEn() *AlgorithmUpdate {
	au.mutation.ClearAlgoNameEn()
	return au
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (au *AlgorithmUpdate) SetAlgoGroupID(u uint) *AlgorithmUpdate {
	au.mutation.ResetAlgoGroupID()
	au.mutation.SetAlgoGroupID(u)
	return au
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlgoGroupID(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetAlgoGroupID(*u)
	}
	return au
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (au *AlgorithmUpdate) AddAlgoGroupID(u int) *AlgorithmUpdate {
	au.mutation.AddAlgoGroupID(u)
	return au
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (au *AlgorithmUpdate) ClearAlgoGroupID() *AlgorithmUpdate {
	au.mutation.ClearAlgoGroupID()
	return au
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (au *AlgorithmUpdate) SetAlgoGroupName(s string) *AlgorithmUpdate {
	au.mutation.SetAlgoGroupName(s)
	return au
}

// SetNillableAlgoGroupName sets the "algo_group_name" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlgoGroupName(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlgoGroupName(*s)
	}
	return au
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (au *AlgorithmUpdate) ClearAlgoGroupName() *AlgorithmUpdate {
	au.mutation.ClearAlgoGroupName()
	return au
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (au *AlgorithmUpdate) SetAlgoGroupVersion(s string) *AlgorithmUpdate {
	au.mutation.SetAlgoGroupVersion(s)
	return au
}

// SetNillableAlgoGroupVersion sets the "algo_group_version" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlgoGroupVersion(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlgoGroupVersion(*s)
	}
	return au
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (au *AlgorithmUpdate) ClearAlgoGroupVersion() *AlgorithmUpdate {
	au.mutation.ClearAlgoGroupVersion()
	return au
}

// SetConfig sets the "config" field.
func (au *AlgorithmUpdate) SetConfig(s string) *AlgorithmUpdate {
	au.mutation.SetConfig(s)
	return au
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableConfig(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetConfig(*s)
	}
	return au
}

// ClearConfig clears the value of the "config" field.
func (au *AlgorithmUpdate) ClearConfig() *AlgorithmUpdate {
	au.mutation.ClearConfig()
	return au
}

// SetProvider sets the "provider" field.
func (au *AlgorithmUpdate) SetProvider(s string) *AlgorithmUpdate {
	au.mutation.SetProvider(s)
	return au
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableProvider(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetProvider(*s)
	}
	return au
}

// ClearProvider clears the value of the "provider" field.
func (au *AlgorithmUpdate) ClearProvider() *AlgorithmUpdate {
	au.mutation.ClearProvider()
	return au
}

// SetAlgoID sets the "algo_id" field.
func (au *AlgorithmUpdate) SetAlgoID(s string) *AlgorithmUpdate {
	au.mutation.SetAlgoID(s)
	return au
}

// SetNillableAlgoID sets the "algo_id" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableAlgoID(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetAlgoID(*s)
	}
	return au
}

// ClearAlgoID clears the value of the "algo_id" field.
func (au *AlgorithmUpdate) ClearAlgoID() *AlgorithmUpdate {
	au.mutation.ClearAlgoID()
	return au
}

// SetPlatform sets the "platform" field.
func (au *AlgorithmUpdate) SetPlatform(s string) *AlgorithmUpdate {
	au.mutation.SetPlatform(s)
	return au
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillablePlatform(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetPlatform(*s)
	}
	return au
}

// ClearPlatform clears the value of the "platform" field.
func (au *AlgorithmUpdate) ClearPlatform() *AlgorithmUpdate {
	au.mutation.ClearPlatform()
	return au
}

// SetDeviceModel sets the "device_model" field.
func (au *AlgorithmUpdate) SetDeviceModel(s string) *AlgorithmUpdate {
	au.mutation.SetDeviceModel(s)
	return au
}

// SetNillableDeviceModel sets the "device_model" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableDeviceModel(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetDeviceModel(*s)
	}
	return au
}

// ClearDeviceModel clears the value of the "device_model" field.
func (au *AlgorithmUpdate) ClearDeviceModel() *AlgorithmUpdate {
	au.mutation.ClearDeviceModel()
	return au
}

// SetIsGroupType sets the "is_group_type" field.
func (au *AlgorithmUpdate) SetIsGroupType(u uint) *AlgorithmUpdate {
	au.mutation.ResetIsGroupType()
	au.mutation.SetIsGroupType(u)
	return au
}

// SetNillableIsGroupType sets the "is_group_type" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillableIsGroupType(u *uint) *AlgorithmUpdate {
	if u != nil {
		au.SetIsGroupType(*u)
	}
	return au
}

// AddIsGroupType adds u to the "is_group_type" field.
func (au *AlgorithmUpdate) AddIsGroupType(u int) *AlgorithmUpdate {
	au.mutation.AddIsGroupType(u)
	return au
}

// ClearIsGroupType clears the value of the "is_group_type" field.
func (au *AlgorithmUpdate) ClearIsGroupType() *AlgorithmUpdate {
	au.mutation.ClearIsGroupType()
	return au
}

// SetPrefix sets the "prefix" field.
func (au *AlgorithmUpdate) SetPrefix(s string) *AlgorithmUpdate {
	au.mutation.SetPrefix(s)
	return au
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (au *AlgorithmUpdate) SetNillablePrefix(s *string) *AlgorithmUpdate {
	if s != nil {
		au.SetPrefix(*s)
	}
	return au
}

// ClearPrefix clears the value of the "prefix" field.
func (au *AlgorithmUpdate) ClearPrefix() *AlgorithmUpdate {
	au.mutation.ClearPrefix()
	return au
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (au *AlgorithmUpdate) AddTaskIDs(ids ...uint64) *AlgorithmUpdate {
	au.mutation.AddTaskIDs(ids...)
	return au
}

// AddTasks adds the "tasks" edges to the Task entity.
func (au *AlgorithmUpdate) AddTasks(t ...*Task) *AlgorithmUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTaskIDs(ids...)
}

// Mutation returns the AlgorithmMutation object of the builder.
func (au *AlgorithmUpdate) Mutation() *AlgorithmMutation {
	return au.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (au *AlgorithmUpdate) ClearTasks() *AlgorithmUpdate {
	au.mutation.ClearTasks()
	return au
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (au *AlgorithmUpdate) RemoveTaskIDs(ids ...uint64) *AlgorithmUpdate {
	au.mutation.RemoveTaskIDs(ids...)
	return au
}

// RemoveTasks removes "tasks" edges to Task entities.
func (au *AlgorithmUpdate) RemoveTasks(t ...*Task) *AlgorithmUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlgorithmUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlgorithmUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlgorithmUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlgorithmUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AlgorithmUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if algorithm.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithm.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := algorithm.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AlgorithmUpdate) check() error {
	if v, ok := au.mutation.Image(); ok {
		if err := algorithm.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Algorithm.image": %w`, err)}
		}
	}
	if v, ok := au.mutation.LabelMap(); ok {
		if err := algorithm.LabelMapValidator(v); err != nil {
			return &ValidationError{Name: "label_map", err: fmt.Errorf(`ent: validator failed for field "Algorithm.label_map": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AlgorithmUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlgorithmUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AlgorithmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(algorithm.Table, algorithm.Columns, sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(algorithm.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(algorithm.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(algorithm.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(algorithm.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(algorithm.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(algorithm.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.SetField(algorithm.FieldVersion, field.TypeString, value)
	}
	if value, ok := au.mutation.AppName(); ok {
		_spec.SetField(algorithm.FieldAppName, field.TypeString, value)
	}
	if value, ok := au.mutation.AlarmType(); ok {
		_spec.SetField(algorithm.FieldAlarmType, field.TypeString, value)
	}
	if value, ok := au.mutation.AlarmName(); ok {
		_spec.SetField(algorithm.FieldAlarmName, field.TypeString, value)
	}
	if value, ok := au.mutation.Notify(); ok {
		_spec.SetField(algorithm.FieldNotify, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedNotify(); ok {
		_spec.AddField(algorithm.FieldNotify, field.TypeUint, value)
	}
	if value, ok := au.mutation.Extend(); ok {
		_spec.SetField(algorithm.FieldExtend, field.TypeJSON, value)
	}
	if value, ok := au.mutation.DrawType(); ok {
		_spec.SetField(algorithm.FieldDrawType, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedDrawType(); ok {
		_spec.AddField(algorithm.FieldDrawType, field.TypeUint, value)
	}
	if value, ok := au.mutation.BaseType(); ok {
		_spec.SetField(algorithm.FieldBaseType, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedBaseType(); ok {
		_spec.AddField(algorithm.FieldBaseType, field.TypeUint, value)
	}
	if value, ok := au.mutation.Available(); ok {
		_spec.SetField(algorithm.FieldAvailable, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedAvailable(); ok {
		_spec.AddField(algorithm.FieldAvailable, field.TypeUint, value)
	}
	if value, ok := au.mutation.Image(); ok {
		_spec.SetField(algorithm.FieldImage, field.TypeString, value)
	}
	if value, ok := au.mutation.LabelMap(); ok {
		_spec.SetField(algorithm.FieldLabelMap, field.TypeString, value)
	}
	if au.mutation.LabelMapCleared() {
		_spec.ClearField(algorithm.FieldLabelMap, field.TypeString)
	}
	if value, ok := au.mutation.Target(); ok {
		_spec.SetField(algorithm.FieldTarget, field.TypeString, value)
	}
	if au.mutation.TargetCleared() {
		_spec.ClearField(algorithm.FieldTarget, field.TypeString)
	}
	if value, ok := au.mutation.AlgoNameEn(); ok {
		_spec.SetField(algorithm.FieldAlgoNameEn, field.TypeString, value)
	}
	if au.mutation.AlgoNameEnCleared() {
		_spec.ClearField(algorithm.FieldAlgoNameEn, field.TypeString)
	}
	if value, ok := au.mutation.AlgoGroupID(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(algorithm.FieldAlgoGroupID, field.TypeUint, value)
	}
	if au.mutation.AlgoGroupIDCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupID, field.TypeUint)
	}
	if value, ok := au.mutation.AlgoGroupName(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupName, field.TypeString, value)
	}
	if au.mutation.AlgoGroupNameCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupName, field.TypeString)
	}
	if value, ok := au.mutation.AlgoGroupVersion(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupVersion, field.TypeString, value)
	}
	if au.mutation.AlgoGroupVersionCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupVersion, field.TypeString)
	}
	if value, ok := au.mutation.Config(); ok {
		_spec.SetField(algorithm.FieldConfig, field.TypeString, value)
	}
	if au.mutation.ConfigCleared() {
		_spec.ClearField(algorithm.FieldConfig, field.TypeString)
	}
	if value, ok := au.mutation.Provider(); ok {
		_spec.SetField(algorithm.FieldProvider, field.TypeString, value)
	}
	if au.mutation.ProviderCleared() {
		_spec.ClearField(algorithm.FieldProvider, field.TypeString)
	}
	if value, ok := au.mutation.AlgoID(); ok {
		_spec.SetField(algorithm.FieldAlgoID, field.TypeString, value)
	}
	if au.mutation.AlgoIDCleared() {
		_spec.ClearField(algorithm.FieldAlgoID, field.TypeString)
	}
	if value, ok := au.mutation.Platform(); ok {
		_spec.SetField(algorithm.FieldPlatform, field.TypeString, value)
	}
	if au.mutation.PlatformCleared() {
		_spec.ClearField(algorithm.FieldPlatform, field.TypeString)
	}
	if value, ok := au.mutation.DeviceModel(); ok {
		_spec.SetField(algorithm.FieldDeviceModel, field.TypeString, value)
	}
	if au.mutation.DeviceModelCleared() {
		_spec.ClearField(algorithm.FieldDeviceModel, field.TypeString)
	}
	if value, ok := au.mutation.IsGroupType(); ok {
		_spec.SetField(algorithm.FieldIsGroupType, field.TypeUint, value)
	}
	if value, ok := au.mutation.AddedIsGroupType(); ok {
		_spec.AddField(algorithm.FieldIsGroupType, field.TypeUint, value)
	}
	if au.mutation.IsGroupTypeCleared() {
		_spec.ClearField(algorithm.FieldIsGroupType, field.TypeUint)
	}
	if value, ok := au.mutation.Prefix(); ok {
		_spec.SetField(algorithm.FieldPrefix, field.TypeString, value)
	}
	if au.mutation.PrefixCleared() {
		_spec.ClearField(algorithm.FieldPrefix, field.TypeString)
	}
	if au.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTasksIDs(); len(nodes) > 0 && !au.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{algorithm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlgorithmUpdateOne is the builder for updating a single Algorithm entity.
type AlgorithmUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlgorithmMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AlgorithmUpdateOne) SetUpdatedAt(t time.Time) *AlgorithmUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AlgorithmUpdateOne) SetDeletedAt(t time.Time) *AlgorithmUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableDeletedAt(t *time.Time) *AlgorithmUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AlgorithmUpdateOne) ClearDeletedAt() *AlgorithmUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AlgorithmUpdateOne) SetName(s string) *AlgorithmUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableName(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetType sets the "type" field.
func (auo *AlgorithmUpdateOne) SetType(s string) *AlgorithmUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableType(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AlgorithmUpdateOne) SetDescription(s string) *AlgorithmUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableDescription(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetVersion sets the "version" field.
func (auo *AlgorithmUpdateOne) SetVersion(s string) *AlgorithmUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableVersion(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetVersion(*s)
	}
	return auo
}

// SetAppName sets the "app_name" field.
func (auo *AlgorithmUpdateOne) SetAppName(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAppName(s)
	return auo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAppName(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAppName(*s)
	}
	return auo
}

// SetAlarmType sets the "alarm_type" field.
func (auo *AlgorithmUpdateOne) SetAlarmType(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlarmType(s)
	return auo
}

// SetNillableAlarmType sets the "alarm_type" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlarmType(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlarmType(*s)
	}
	return auo
}

// SetAlarmName sets the "alarm_name" field.
func (auo *AlgorithmUpdateOne) SetAlarmName(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlarmName(s)
	return auo
}

// SetNillableAlarmName sets the "alarm_name" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlarmName(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlarmName(*s)
	}
	return auo
}

// SetNotify sets the "notify" field.
func (auo *AlgorithmUpdateOne) SetNotify(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetNotify()
	auo.mutation.SetNotify(u)
	return auo
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableNotify(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetNotify(*u)
	}
	return auo
}

// AddNotify adds u to the "notify" field.
func (auo *AlgorithmUpdateOne) AddNotify(u int) *AlgorithmUpdateOne {
	auo.mutation.AddNotify(u)
	return auo
}

// SetExtend sets the "extend" field.
func (auo *AlgorithmUpdateOne) SetExtend(m map[string]interface{}) *AlgorithmUpdateOne {
	auo.mutation.SetExtend(m)
	return auo
}

// SetDrawType sets the "draw_type" field.
func (auo *AlgorithmUpdateOne) SetDrawType(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetDrawType()
	auo.mutation.SetDrawType(u)
	return auo
}

// SetNillableDrawType sets the "draw_type" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableDrawType(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetDrawType(*u)
	}
	return auo
}

// AddDrawType adds u to the "draw_type" field.
func (auo *AlgorithmUpdateOne) AddDrawType(u int) *AlgorithmUpdateOne {
	auo.mutation.AddDrawType(u)
	return auo
}

// SetBaseType sets the "base_type" field.
func (auo *AlgorithmUpdateOne) SetBaseType(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetBaseType()
	auo.mutation.SetBaseType(u)
	return auo
}

// SetNillableBaseType sets the "base_type" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableBaseType(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetBaseType(*u)
	}
	return auo
}

// AddBaseType adds u to the "base_type" field.
func (auo *AlgorithmUpdateOne) AddBaseType(u int) *AlgorithmUpdateOne {
	auo.mutation.AddBaseType(u)
	return auo
}

// SetAvailable sets the "available" field.
func (auo *AlgorithmUpdateOne) SetAvailable(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetAvailable()
	auo.mutation.SetAvailable(u)
	return auo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAvailable(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetAvailable(*u)
	}
	return auo
}

// AddAvailable adds u to the "available" field.
func (auo *AlgorithmUpdateOne) AddAvailable(u int) *AlgorithmUpdateOne {
	auo.mutation.AddAvailable(u)
	return auo
}

// SetImage sets the "image" field.
func (auo *AlgorithmUpdateOne) SetImage(s string) *AlgorithmUpdateOne {
	auo.mutation.SetImage(s)
	return auo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableImage(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetImage(*s)
	}
	return auo
}

// SetLabelMap sets the "label_map" field.
func (auo *AlgorithmUpdateOne) SetLabelMap(s string) *AlgorithmUpdateOne {
	auo.mutation.SetLabelMap(s)
	return auo
}

// SetNillableLabelMap sets the "label_map" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableLabelMap(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetLabelMap(*s)
	}
	return auo
}

// ClearLabelMap clears the value of the "label_map" field.
func (auo *AlgorithmUpdateOne) ClearLabelMap() *AlgorithmUpdateOne {
	auo.mutation.ClearLabelMap()
	return auo
}

// SetTarget sets the "target" field.
func (auo *AlgorithmUpdateOne) SetTarget(s string) *AlgorithmUpdateOne {
	auo.mutation.SetTarget(s)
	return auo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableTarget(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetTarget(*s)
	}
	return auo
}

// ClearTarget clears the value of the "target" field.
func (auo *AlgorithmUpdateOne) ClearTarget() *AlgorithmUpdateOne {
	auo.mutation.ClearTarget()
	return auo
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (auo *AlgorithmUpdateOne) SetAlgoNameEn(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlgoNameEn(s)
	return auo
}

// SetNillableAlgoNameEn sets the "algo_name_en" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlgoNameEn(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlgoNameEn(*s)
	}
	return auo
}

// ClearAlgoNameEn clears the value of the "algo_name_en" field.
func (auo *AlgorithmUpdateOne) ClearAlgoNameEn() *AlgorithmUpdateOne {
	auo.mutation.ClearAlgoNameEn()
	return auo
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (auo *AlgorithmUpdateOne) SetAlgoGroupID(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetAlgoGroupID()
	auo.mutation.SetAlgoGroupID(u)
	return auo
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlgoGroupID(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetAlgoGroupID(*u)
	}
	return auo
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (auo *AlgorithmUpdateOne) AddAlgoGroupID(u int) *AlgorithmUpdateOne {
	auo.mutation.AddAlgoGroupID(u)
	return auo
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (auo *AlgorithmUpdateOne) ClearAlgoGroupID() *AlgorithmUpdateOne {
	auo.mutation.ClearAlgoGroupID()
	return auo
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (auo *AlgorithmUpdateOne) SetAlgoGroupName(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlgoGroupName(s)
	return auo
}

// SetNillableAlgoGroupName sets the "algo_group_name" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlgoGroupName(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlgoGroupName(*s)
	}
	return auo
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (auo *AlgorithmUpdateOne) ClearAlgoGroupName() *AlgorithmUpdateOne {
	auo.mutation.ClearAlgoGroupName()
	return auo
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (auo *AlgorithmUpdateOne) SetAlgoGroupVersion(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlgoGroupVersion(s)
	return auo
}

// SetNillableAlgoGroupVersion sets the "algo_group_version" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlgoGroupVersion(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlgoGroupVersion(*s)
	}
	return auo
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (auo *AlgorithmUpdateOne) ClearAlgoGroupVersion() *AlgorithmUpdateOne {
	auo.mutation.ClearAlgoGroupVersion()
	return auo
}

// SetConfig sets the "config" field.
func (auo *AlgorithmUpdateOne) SetConfig(s string) *AlgorithmUpdateOne {
	auo.mutation.SetConfig(s)
	return auo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableConfig(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetConfig(*s)
	}
	return auo
}

// ClearConfig clears the value of the "config" field.
func (auo *AlgorithmUpdateOne) ClearConfig() *AlgorithmUpdateOne {
	auo.mutation.ClearConfig()
	return auo
}

// SetProvider sets the "provider" field.
func (auo *AlgorithmUpdateOne) SetProvider(s string) *AlgorithmUpdateOne {
	auo.mutation.SetProvider(s)
	return auo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableProvider(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetProvider(*s)
	}
	return auo
}

// ClearProvider clears the value of the "provider" field.
func (auo *AlgorithmUpdateOne) ClearProvider() *AlgorithmUpdateOne {
	auo.mutation.ClearProvider()
	return auo
}

// SetAlgoID sets the "algo_id" field.
func (auo *AlgorithmUpdateOne) SetAlgoID(s string) *AlgorithmUpdateOne {
	auo.mutation.SetAlgoID(s)
	return auo
}

// SetNillableAlgoID sets the "algo_id" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableAlgoID(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetAlgoID(*s)
	}
	return auo
}

// ClearAlgoID clears the value of the "algo_id" field.
func (auo *AlgorithmUpdateOne) ClearAlgoID() *AlgorithmUpdateOne {
	auo.mutation.ClearAlgoID()
	return auo
}

// SetPlatform sets the "platform" field.
func (auo *AlgorithmUpdateOne) SetPlatform(s string) *AlgorithmUpdateOne {
	auo.mutation.SetPlatform(s)
	return auo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillablePlatform(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetPlatform(*s)
	}
	return auo
}

// ClearPlatform clears the value of the "platform" field.
func (auo *AlgorithmUpdateOne) ClearPlatform() *AlgorithmUpdateOne {
	auo.mutation.ClearPlatform()
	return auo
}

// SetDeviceModel sets the "device_model" field.
func (auo *AlgorithmUpdateOne) SetDeviceModel(s string) *AlgorithmUpdateOne {
	auo.mutation.SetDeviceModel(s)
	return auo
}

// SetNillableDeviceModel sets the "device_model" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableDeviceModel(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetDeviceModel(*s)
	}
	return auo
}

// ClearDeviceModel clears the value of the "device_model" field.
func (auo *AlgorithmUpdateOne) ClearDeviceModel() *AlgorithmUpdateOne {
	auo.mutation.ClearDeviceModel()
	return auo
}

// SetIsGroupType sets the "is_group_type" field.
func (auo *AlgorithmUpdateOne) SetIsGroupType(u uint) *AlgorithmUpdateOne {
	auo.mutation.ResetIsGroupType()
	auo.mutation.SetIsGroupType(u)
	return auo
}

// SetNillableIsGroupType sets the "is_group_type" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillableIsGroupType(u *uint) *AlgorithmUpdateOne {
	if u != nil {
		auo.SetIsGroupType(*u)
	}
	return auo
}

// AddIsGroupType adds u to the "is_group_type" field.
func (auo *AlgorithmUpdateOne) AddIsGroupType(u int) *AlgorithmUpdateOne {
	auo.mutation.AddIsGroupType(u)
	return auo
}

// ClearIsGroupType clears the value of the "is_group_type" field.
func (auo *AlgorithmUpdateOne) ClearIsGroupType() *AlgorithmUpdateOne {
	auo.mutation.ClearIsGroupType()
	return auo
}

// SetPrefix sets the "prefix" field.
func (auo *AlgorithmUpdateOne) SetPrefix(s string) *AlgorithmUpdateOne {
	auo.mutation.SetPrefix(s)
	return auo
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (auo *AlgorithmUpdateOne) SetNillablePrefix(s *string) *AlgorithmUpdateOne {
	if s != nil {
		auo.SetPrefix(*s)
	}
	return auo
}

// ClearPrefix clears the value of the "prefix" field.
func (auo *AlgorithmUpdateOne) ClearPrefix() *AlgorithmUpdateOne {
	auo.mutation.ClearPrefix()
	return auo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (auo *AlgorithmUpdateOne) AddTaskIDs(ids ...uint64) *AlgorithmUpdateOne {
	auo.mutation.AddTaskIDs(ids...)
	return auo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (auo *AlgorithmUpdateOne) AddTasks(t ...*Task) *AlgorithmUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTaskIDs(ids...)
}

// Mutation returns the AlgorithmMutation object of the builder.
func (auo *AlgorithmUpdateOne) Mutation() *AlgorithmMutation {
	return auo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (auo *AlgorithmUpdateOne) ClearTasks() *AlgorithmUpdateOne {
	auo.mutation.ClearTasks()
	return auo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (auo *AlgorithmUpdateOne) RemoveTaskIDs(ids ...uint64) *AlgorithmUpdateOne {
	auo.mutation.RemoveTaskIDs(ids...)
	return auo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (auo *AlgorithmUpdateOne) RemoveTasks(t ...*Task) *AlgorithmUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the AlgorithmUpdate builder.
func (auo *AlgorithmUpdateOne) Where(ps ...predicate.Algorithm) *AlgorithmUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlgorithmUpdateOne) Select(field string, fields ...string) *AlgorithmUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Algorithm entity.
func (auo *AlgorithmUpdateOne) Save(ctx context.Context) (*Algorithm, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlgorithmUpdateOne) SaveX(ctx context.Context) *Algorithm {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlgorithmUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlgorithmUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AlgorithmUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if algorithm.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithm.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := algorithm.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AlgorithmUpdateOne) check() error {
	if v, ok := auo.mutation.Image(); ok {
		if err := algorithm.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Algorithm.image": %w`, err)}
		}
	}
	if v, ok := auo.mutation.LabelMap(); ok {
		if err := algorithm.LabelMapValidator(v); err != nil {
			return &ValidationError{Name: "label_map", err: fmt.Errorf(`ent: validator failed for field "Algorithm.label_map": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AlgorithmUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlgorithmUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AlgorithmUpdateOne) sqlSave(ctx context.Context) (_node *Algorithm, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(algorithm.Table, algorithm.Columns, sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Algorithm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, algorithm.FieldID)
		for _, f := range fields {
			if !algorithm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != algorithm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(algorithm.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(algorithm.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(algorithm.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(algorithm.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(algorithm.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(algorithm.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.SetField(algorithm.FieldVersion, field.TypeString, value)
	}
	if value, ok := auo.mutation.AppName(); ok {
		_spec.SetField(algorithm.FieldAppName, field.TypeString, value)
	}
	if value, ok := auo.mutation.AlarmType(); ok {
		_spec.SetField(algorithm.FieldAlarmType, field.TypeString, value)
	}
	if value, ok := auo.mutation.AlarmName(); ok {
		_spec.SetField(algorithm.FieldAlarmName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Notify(); ok {
		_spec.SetField(algorithm.FieldNotify, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedNotify(); ok {
		_spec.AddField(algorithm.FieldNotify, field.TypeUint, value)
	}
	if value, ok := auo.mutation.Extend(); ok {
		_spec.SetField(algorithm.FieldExtend, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.DrawType(); ok {
		_spec.SetField(algorithm.FieldDrawType, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedDrawType(); ok {
		_spec.AddField(algorithm.FieldDrawType, field.TypeUint, value)
	}
	if value, ok := auo.mutation.BaseType(); ok {
		_spec.SetField(algorithm.FieldBaseType, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedBaseType(); ok {
		_spec.AddField(algorithm.FieldBaseType, field.TypeUint, value)
	}
	if value, ok := auo.mutation.Available(); ok {
		_spec.SetField(algorithm.FieldAvailable, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedAvailable(); ok {
		_spec.AddField(algorithm.FieldAvailable, field.TypeUint, value)
	}
	if value, ok := auo.mutation.Image(); ok {
		_spec.SetField(algorithm.FieldImage, field.TypeString, value)
	}
	if value, ok := auo.mutation.LabelMap(); ok {
		_spec.SetField(algorithm.FieldLabelMap, field.TypeString, value)
	}
	if auo.mutation.LabelMapCleared() {
		_spec.ClearField(algorithm.FieldLabelMap, field.TypeString)
	}
	if value, ok := auo.mutation.Target(); ok {
		_spec.SetField(algorithm.FieldTarget, field.TypeString, value)
	}
	if auo.mutation.TargetCleared() {
		_spec.ClearField(algorithm.FieldTarget, field.TypeString)
	}
	if value, ok := auo.mutation.AlgoNameEn(); ok {
		_spec.SetField(algorithm.FieldAlgoNameEn, field.TypeString, value)
	}
	if auo.mutation.AlgoNameEnCleared() {
		_spec.ClearField(algorithm.FieldAlgoNameEn, field.TypeString)
	}
	if value, ok := auo.mutation.AlgoGroupID(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupID, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(algorithm.FieldAlgoGroupID, field.TypeUint, value)
	}
	if auo.mutation.AlgoGroupIDCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupID, field.TypeUint)
	}
	if value, ok := auo.mutation.AlgoGroupName(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupName, field.TypeString, value)
	}
	if auo.mutation.AlgoGroupNameCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupName, field.TypeString)
	}
	if value, ok := auo.mutation.AlgoGroupVersion(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupVersion, field.TypeString, value)
	}
	if auo.mutation.AlgoGroupVersionCleared() {
		_spec.ClearField(algorithm.FieldAlgoGroupVersion, field.TypeString)
	}
	if value, ok := auo.mutation.Config(); ok {
		_spec.SetField(algorithm.FieldConfig, field.TypeString, value)
	}
	if auo.mutation.ConfigCleared() {
		_spec.ClearField(algorithm.FieldConfig, field.TypeString)
	}
	if value, ok := auo.mutation.Provider(); ok {
		_spec.SetField(algorithm.FieldProvider, field.TypeString, value)
	}
	if auo.mutation.ProviderCleared() {
		_spec.ClearField(algorithm.FieldProvider, field.TypeString)
	}
	if value, ok := auo.mutation.AlgoID(); ok {
		_spec.SetField(algorithm.FieldAlgoID, field.TypeString, value)
	}
	if auo.mutation.AlgoIDCleared() {
		_spec.ClearField(algorithm.FieldAlgoID, field.TypeString)
	}
	if value, ok := auo.mutation.Platform(); ok {
		_spec.SetField(algorithm.FieldPlatform, field.TypeString, value)
	}
	if auo.mutation.PlatformCleared() {
		_spec.ClearField(algorithm.FieldPlatform, field.TypeString)
	}
	if value, ok := auo.mutation.DeviceModel(); ok {
		_spec.SetField(algorithm.FieldDeviceModel, field.TypeString, value)
	}
	if auo.mutation.DeviceModelCleared() {
		_spec.ClearField(algorithm.FieldDeviceModel, field.TypeString)
	}
	if value, ok := auo.mutation.IsGroupType(); ok {
		_spec.SetField(algorithm.FieldIsGroupType, field.TypeUint, value)
	}
	if value, ok := auo.mutation.AddedIsGroupType(); ok {
		_spec.AddField(algorithm.FieldIsGroupType, field.TypeUint, value)
	}
	if auo.mutation.IsGroupTypeCleared() {
		_spec.ClearField(algorithm.FieldIsGroupType, field.TypeUint)
	}
	if value, ok := auo.mutation.Prefix(); ok {
		_spec.SetField(algorithm.FieldPrefix, field.TypeString, value)
	}
	if auo.mutation.PrefixCleared() {
		_spec.ClearField(algorithm.FieldPrefix, field.TypeString)
	}
	if auo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !auo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Algorithm{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{algorithm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
