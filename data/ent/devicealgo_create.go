// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/devicealgo"
)

// DeviceAlgoCreate is the builder for creating a DeviceAlgo entity.
type DeviceAlgoCreate struct {
	config
	mutation *DeviceAlgoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeviceID sets the "device_id" field.
func (dac *DeviceAlgoCreate) SetDeviceID(u uint64) *DeviceAlgoCreate {
	dac.mutation.SetDeviceID(u)
	return dac
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (dac *DeviceAlgoCreate) SetAlgoGroupID(u uint) *DeviceAlgoCreate {
	dac.mutation.SetAlgoGroupID(u)
	return dac
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (dac *DeviceAlgoCreate) SetNillableAlgoGroupID(u *uint) *DeviceAlgoCreate {
	if u != nil {
		dac.SetAlgoGroupID(*u)
	}
	return dac
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (dac *DeviceAlgoCreate) SetAlgoGroupName(s string) *DeviceAlgoCreate {
	dac.mutation.SetAlgoGroupName(s)
	return dac
}

// SetNillableAlgoGroupName sets the "algo_group_name" field if the given value is not nil.
func (dac *DeviceAlgoCreate) SetNillableAlgoGroupName(s *string) *DeviceAlgoCreate {
	if s != nil {
		dac.SetAlgoGroupName(*s)
	}
	return dac
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (dac *DeviceAlgoCreate) SetAlgoGroupVersion(s string) *DeviceAlgoCreate {
	dac.mutation.SetAlgoGroupVersion(s)
	return dac
}

// SetNillableAlgoGroupVersion sets the "algo_group_version" field if the given value is not nil.
func (dac *DeviceAlgoCreate) SetNillableAlgoGroupVersion(s *string) *DeviceAlgoCreate {
	if s != nil {
		dac.SetAlgoGroupVersion(*s)
	}
	return dac
}

// SetName sets the "name" field.
func (dac *DeviceAlgoCreate) SetName(s string) *DeviceAlgoCreate {
	dac.mutation.SetName(s)
	return dac
}

// SetVersion sets the "version" field.
func (dac *DeviceAlgoCreate) SetVersion(s string) *DeviceAlgoCreate {
	dac.mutation.SetVersion(s)
	return dac
}

// SetInstallTime sets the "install_time" field.
func (dac *DeviceAlgoCreate) SetInstallTime(t time.Time) *DeviceAlgoCreate {
	dac.mutation.SetInstallTime(t)
	return dac
}

// SetID sets the "id" field.
func (dac *DeviceAlgoCreate) SetID(u uint64) *DeviceAlgoCreate {
	dac.mutation.SetID(u)
	return dac
}

// Mutation returns the DeviceAlgoMutation object of the builder.
func (dac *DeviceAlgoCreate) Mutation() *DeviceAlgoMutation {
	return dac.mutation
}

// Save creates the DeviceAlgo in the database.
func (dac *DeviceAlgoCreate) Save(ctx context.Context) (*DeviceAlgo, error) {
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DeviceAlgoCreate) SaveX(ctx context.Context) *DeviceAlgo {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DeviceAlgoCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DeviceAlgoCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dac *DeviceAlgoCreate) check() error {
	if _, ok := dac.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "DeviceAlgo.device_id"`)}
	}
	if _, ok := dac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DeviceAlgo.name"`)}
	}
	if _, ok := dac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "DeviceAlgo.version"`)}
	}
	if _, ok := dac.mutation.InstallTime(); !ok {
		return &ValidationError{Name: "install_time", err: errors.New(`ent: missing required field "DeviceAlgo.install_time"`)}
	}
	return nil
}

func (dac *DeviceAlgoCreate) sqlSave(ctx context.Context) (*DeviceAlgo, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DeviceAlgoCreate) createSpec() (*DeviceAlgo, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceAlgo{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(devicealgo.Table, sqlgraph.NewFieldSpec(devicealgo.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = dac.conflict
	if id, ok := dac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dac.mutation.DeviceID(); ok {
		_spec.SetField(devicealgo.FieldDeviceID, field.TypeUint64, value)
		_node.DeviceID = value
	}
	if value, ok := dac.mutation.AlgoGroupID(); ok {
		_spec.SetField(devicealgo.FieldAlgoGroupID, field.TypeUint, value)
		_node.AlgoGroupID = value
	}
	if value, ok := dac.mutation.AlgoGroupName(); ok {
		_spec.SetField(devicealgo.FieldAlgoGroupName, field.TypeString, value)
		_node.AlgoGroupName = value
	}
	if value, ok := dac.mutation.AlgoGroupVersion(); ok {
		_spec.SetField(devicealgo.FieldAlgoGroupVersion, field.TypeString, value)
		_node.AlgoGroupVersion = value
	}
	if value, ok := dac.mutation.Name(); ok {
		_spec.SetField(devicealgo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dac.mutation.Version(); ok {
		_spec.SetField(devicealgo.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := dac.mutation.InstallTime(); ok {
		_spec.SetField(devicealgo.FieldInstallTime, field.TypeTime, value)
		_node.InstallTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceAlgo.Create().
//		SetDeviceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceAlgoUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (dac *DeviceAlgoCreate) OnConflict(opts ...sql.ConflictOption) *DeviceAlgoUpsertOne {
	dac.conflict = opts
	return &DeviceAlgoUpsertOne{
		create: dac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dac *DeviceAlgoCreate) OnConflictColumns(columns ...string) *DeviceAlgoUpsertOne {
	dac.conflict = append(dac.conflict, sql.ConflictColumns(columns...))
	return &DeviceAlgoUpsertOne{
		create: dac,
	}
}

type (
	// DeviceAlgoUpsertOne is the builder for "upsert"-ing
	//  one DeviceAlgo node.
	DeviceAlgoUpsertOne struct {
		create *DeviceAlgoCreate
	}

	// DeviceAlgoUpsert is the "OnConflict" setter.
	DeviceAlgoUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeviceID sets the "device_id" field.
func (u *DeviceAlgoUpsert) SetDeviceID(v uint64) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateDeviceID() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldDeviceID)
	return u
}

// AddDeviceID adds v to the "device_id" field.
func (u *DeviceAlgoUpsert) AddDeviceID(v uint64) *DeviceAlgoUpsert {
	u.Add(devicealgo.FieldDeviceID, v)
	return u
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *DeviceAlgoUpsert) SetAlgoGroupID(v uint) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldAlgoGroupID, v)
	return u
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateAlgoGroupID() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldAlgoGroupID)
	return u
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *DeviceAlgoUpsert) AddAlgoGroupID(v uint) *DeviceAlgoUpsert {
	u.Add(devicealgo.FieldAlgoGroupID, v)
	return u
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *DeviceAlgoUpsert) ClearAlgoGroupID() *DeviceAlgoUpsert {
	u.SetNull(devicealgo.FieldAlgoGroupID)
	return u
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *DeviceAlgoUpsert) SetAlgoGroupName(v string) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldAlgoGroupName, v)
	return u
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateAlgoGroupName() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldAlgoGroupName)
	return u
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *DeviceAlgoUpsert) ClearAlgoGroupName() *DeviceAlgoUpsert {
	u.SetNull(devicealgo.FieldAlgoGroupName)
	return u
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *DeviceAlgoUpsert) SetAlgoGroupVersion(v string) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldAlgoGroupVersion, v)
	return u
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateAlgoGroupVersion() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldAlgoGroupVersion)
	return u
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *DeviceAlgoUpsert) ClearAlgoGroupVersion() *DeviceAlgoUpsert {
	u.SetNull(devicealgo.FieldAlgoGroupVersion)
	return u
}

// SetName sets the "name" field.
func (u *DeviceAlgoUpsert) SetName(v string) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateName() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldName)
	return u
}

// SetVersion sets the "version" field.
func (u *DeviceAlgoUpsert) SetVersion(v string) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateVersion() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldVersion)
	return u
}

// SetInstallTime sets the "install_time" field.
func (u *DeviceAlgoUpsert) SetInstallTime(v time.Time) *DeviceAlgoUpsert {
	u.Set(devicealgo.FieldInstallTime, v)
	return u
}

// UpdateInstallTime sets the "install_time" field to the value that was provided on create.
func (u *DeviceAlgoUpsert) UpdateInstallTime() *DeviceAlgoUpsert {
	u.SetExcluded(devicealgo.FieldInstallTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicealgo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceAlgoUpsertOne) UpdateNewValues() *DeviceAlgoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(devicealgo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceAlgoUpsertOne) Ignore() *DeviceAlgoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceAlgoUpsertOne) DoNothing() *DeviceAlgoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceAlgoCreate.OnConflict
// documentation for more info.
func (u *DeviceAlgoUpsertOne) Update(set func(*DeviceAlgoUpsert)) *DeviceAlgoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceAlgoUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceAlgoUpsertOne) SetDeviceID(v uint64) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *DeviceAlgoUpsertOne) AddDeviceID(v uint64) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateDeviceID() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateDeviceID()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *DeviceAlgoUpsertOne) SetAlgoGroupID(v uint) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *DeviceAlgoUpsertOne) AddAlgoGroupID(v uint) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateAlgoGroupID() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *DeviceAlgoUpsertOne) ClearAlgoGroupID() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupID()
	})
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *DeviceAlgoUpsertOne) SetAlgoGroupName(v string) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupName(v)
	})
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateAlgoGroupName() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupName()
	})
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *DeviceAlgoUpsertOne) ClearAlgoGroupName() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupName()
	})
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *DeviceAlgoUpsertOne) SetAlgoGroupVersion(v string) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupVersion(v)
	})
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateAlgoGroupVersion() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupVersion()
	})
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *DeviceAlgoUpsertOne) ClearAlgoGroupVersion() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupVersion()
	})
}

// SetName sets the "name" field.
func (u *DeviceAlgoUpsertOne) SetName(v string) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateName() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *DeviceAlgoUpsertOne) SetVersion(v string) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateVersion() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateVersion()
	})
}

// SetInstallTime sets the "install_time" field.
func (u *DeviceAlgoUpsertOne) SetInstallTime(v time.Time) *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetInstallTime(v)
	})
}

// UpdateInstallTime sets the "install_time" field to the value that was provided on create.
func (u *DeviceAlgoUpsertOne) UpdateInstallTime() *DeviceAlgoUpsertOne {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateInstallTime()
	})
}

// Exec executes the query.
func (u *DeviceAlgoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceAlgoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceAlgoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceAlgoUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceAlgoUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceAlgoCreateBulk is the builder for creating many DeviceAlgo entities in bulk.
type DeviceAlgoCreateBulk struct {
	config
	err      error
	builders []*DeviceAlgoCreate
	conflict []sql.ConflictOption
}

// Save creates the DeviceAlgo entities in the database.
func (dacb *DeviceAlgoCreateBulk) Save(ctx context.Context) ([]*DeviceAlgo, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DeviceAlgo, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceAlgoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DeviceAlgoCreateBulk) SaveX(ctx context.Context) []*DeviceAlgo {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DeviceAlgoCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DeviceAlgoCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceAlgo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceAlgoUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (dacb *DeviceAlgoCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceAlgoUpsertBulk {
	dacb.conflict = opts
	return &DeviceAlgoUpsertBulk{
		create: dacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dacb *DeviceAlgoCreateBulk) OnConflictColumns(columns ...string) *DeviceAlgoUpsertBulk {
	dacb.conflict = append(dacb.conflict, sql.ConflictColumns(columns...))
	return &DeviceAlgoUpsertBulk{
		create: dacb,
	}
}

// DeviceAlgoUpsertBulk is the builder for "upsert"-ing
// a bulk of DeviceAlgo nodes.
type DeviceAlgoUpsertBulk struct {
	create *DeviceAlgoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicealgo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceAlgoUpsertBulk) UpdateNewValues() *DeviceAlgoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(devicealgo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceAlgo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceAlgoUpsertBulk) Ignore() *DeviceAlgoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceAlgoUpsertBulk) DoNothing() *DeviceAlgoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceAlgoCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceAlgoUpsertBulk) Update(set func(*DeviceAlgoUpsert)) *DeviceAlgoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceAlgoUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceAlgoUpsertBulk) SetDeviceID(v uint64) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *DeviceAlgoUpsertBulk) AddDeviceID(v uint64) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateDeviceID() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateDeviceID()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *DeviceAlgoUpsertBulk) SetAlgoGroupID(v uint) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *DeviceAlgoUpsertBulk) AddAlgoGroupID(v uint) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateAlgoGroupID() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *DeviceAlgoUpsertBulk) ClearAlgoGroupID() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupID()
	})
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *DeviceAlgoUpsertBulk) SetAlgoGroupName(v string) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupName(v)
	})
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateAlgoGroupName() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupName()
	})
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *DeviceAlgoUpsertBulk) ClearAlgoGroupName() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupName()
	})
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *DeviceAlgoUpsertBulk) SetAlgoGroupVersion(v string) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetAlgoGroupVersion(v)
	})
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateAlgoGroupVersion() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateAlgoGroupVersion()
	})
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *DeviceAlgoUpsertBulk) ClearAlgoGroupVersion() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.ClearAlgoGroupVersion()
	})
}

// SetName sets the "name" field.
func (u *DeviceAlgoUpsertBulk) SetName(v string) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateName() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *DeviceAlgoUpsertBulk) SetVersion(v string) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateVersion() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateVersion()
	})
}

// SetInstallTime sets the "install_time" field.
func (u *DeviceAlgoUpsertBulk) SetInstallTime(v time.Time) *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.SetInstallTime(v)
	})
}

// UpdateInstallTime sets the "install_time" field to the value that was provided on create.
func (u *DeviceAlgoUpsertBulk) UpdateInstallTime() *DeviceAlgoUpsertBulk {
	return u.Update(func(s *DeviceAlgoUpsert) {
		s.UpdateInstallTime()
	})
}

// Exec executes the query.
func (u *DeviceAlgoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeviceAlgoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceAlgoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceAlgoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
