// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicecamera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeviceUpdate) SetUpdatedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DeviceUpdate) SetDeletedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeletedAt(t *time.Time) *DeviceUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DeviceUpdate) ClearDeletedAt() *DeviceUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetTenantID sets the "tenant_id" field.
func (du *DeviceUpdate) SetTenantID(s string) *DeviceUpdate {
	du.mutation.SetTenantID(s)
	return du
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableTenantID(s *string) *DeviceUpdate {
	if s != nil {
		du.SetTenantID(*s)
	}
	return du
}

// ClearTenantID clears the value of the "tenant_id" field.
func (du *DeviceUpdate) ClearTenantID() *DeviceUpdate {
	du.mutation.ClearTenantID()
	return du
}

// SetAccessOrgList sets the "access_org_list" field.
func (du *DeviceUpdate) SetAccessOrgList(s string) *DeviceUpdate {
	du.mutation.SetAccessOrgList(s)
	return du
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableAccessOrgList(s *string) *DeviceUpdate {
	if s != nil {
		du.SetAccessOrgList(*s)
	}
	return du
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (du *DeviceUpdate) ClearAccessOrgList() *DeviceUpdate {
	du.mutation.ClearAccessOrgList()
	return du
}

// SetName sets the "name" field.
func (du *DeviceUpdate) SetName(s string) *DeviceUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableName(s *string) *DeviceUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetDisplayName sets the "display_name" field.
func (du *DeviceUpdate) SetDisplayName(s string) *DeviceUpdate {
	du.mutation.SetDisplayName(s)
	return du
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDisplayName(s *string) *DeviceUpdate {
	if s != nil {
		du.SetDisplayName(*s)
	}
	return du
}

// SetType sets the "type" field.
func (du *DeviceUpdate) SetType(bdt biz.EdgeDeviceType) *DeviceUpdate {
	du.mutation.SetType(bdt)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableType(bdt *biz.EdgeDeviceType) *DeviceUpdate {
	if bdt != nil {
		du.SetType(*bdt)
	}
	return du
}

// SetExtID sets the "ext_id" field.
func (du *DeviceUpdate) SetExtID(s string) *DeviceUpdate {
	du.mutation.SetExtID(s)
	return du
}

// SetNillableExtID sets the "ext_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableExtID(s *string) *DeviceUpdate {
	if s != nil {
		du.SetExtID(*s)
	}
	return du
}

// SetSerialNo sets the "serial_no" field.
func (du *DeviceUpdate) SetSerialNo(s string) *DeviceUpdate {
	du.mutation.SetSerialNo(s)
	return du
}

// SetNillableSerialNo sets the "serial_no" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableSerialNo(s *string) *DeviceUpdate {
	if s != nil {
		du.SetSerialNo(*s)
	}
	return du
}

// SetState sets the "state" field.
func (du *DeviceUpdate) SetState(bs biz.DeviceState) *DeviceUpdate {
	du.mutation.SetState(bs)
	return du
}

// SetNillableState sets the "state" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableState(bs *biz.DeviceState) *DeviceUpdate {
	if bs != nil {
		du.SetState(*bs)
	}
	return du
}

// SetMAC sets the "mac" field.
func (du *DeviceUpdate) SetMAC(s string) *DeviceUpdate {
	du.mutation.SetMAC(s)
	return du
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableMAC(s *string) *DeviceUpdate {
	if s != nil {
		du.SetMAC(*s)
	}
	return du
}

// SetZoneName sets the "zone_name" field.
func (du *DeviceUpdate) SetZoneName(s string) *DeviceUpdate {
	du.mutation.SetZoneName(s)
	return du
}

// SetNillableZoneName sets the "zone_name" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableZoneName(s *string) *DeviceUpdate {
	if s != nil {
		du.SetZoneName(*s)
	}
	return du
}

// SetZoneID sets the "zone_id" field.
func (du *DeviceUpdate) SetZoneID(s string) *DeviceUpdate {
	du.mutation.SetZoneID(s)
	return du
}

// SetNillableZoneID sets the "zone_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableZoneID(s *string) *DeviceUpdate {
	if s != nil {
		du.SetZoneID(*s)
	}
	return du
}

// SetWorkspaceID sets the "workspace_id" field.
func (du *DeviceUpdate) SetWorkspaceID(s string) *DeviceUpdate {
	du.mutation.SetWorkspaceID(s)
	return du
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableWorkspaceID(s *string) *DeviceUpdate {
	if s != nil {
		du.SetWorkspaceID(*s)
	}
	return du
}

// SetEquipID sets the "equip_id" field.
func (du *DeviceUpdate) SetEquipID(s string) *DeviceUpdate {
	du.mutation.SetEquipID(s)
	return du
}

// SetNillableEquipID sets the "equip_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableEquipID(s *string) *DeviceUpdate {
	if s != nil {
		du.SetEquipID(*s)
	}
	return du
}

// SetEquipPassword sets the "equip_password" field.
func (du *DeviceUpdate) SetEquipPassword(s string) *DeviceUpdate {
	du.mutation.SetEquipPassword(s)
	return du
}

// SetNillableEquipPassword sets the "equip_password" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableEquipPassword(s *string) *DeviceUpdate {
	if s != nil {
		du.SetEquipPassword(*s)
	}
	return du
}

// SetDeviceInfo sets the "device_info" field.
func (du *DeviceUpdate) SetDeviceInfo(s string) *DeviceUpdate {
	du.mutation.SetDeviceInfo(s)
	return du
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceInfo(s *string) *DeviceUpdate {
	if s != nil {
		du.SetDeviceInfo(*s)
	}
	return du
}

// SetModel sets the "model" field.
func (du *DeviceUpdate) SetModel(s string) *DeviceUpdate {
	du.mutation.SetModel(s)
	return du
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableModel(s *string) *DeviceUpdate {
	if s != nil {
		du.SetModel(*s)
	}
	return du
}

// ClearModel clears the value of the "model" field.
func (du *DeviceUpdate) ClearModel() *DeviceUpdate {
	du.mutation.ClearModel()
	return du
}

// SetAuthDeadline sets the "auth_deadline" field.
func (du *DeviceUpdate) SetAuthDeadline(i int64) *DeviceUpdate {
	du.mutation.ResetAuthDeadline()
	du.mutation.SetAuthDeadline(i)
	return du
}

// SetNillableAuthDeadline sets the "auth_deadline" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableAuthDeadline(i *int64) *DeviceUpdate {
	if i != nil {
		du.SetAuthDeadline(*i)
	}
	return du
}

// AddAuthDeadline adds i to the "auth_deadline" field.
func (du *DeviceUpdate) AddAuthDeadline(i int64) *DeviceUpdate {
	du.mutation.AddAuthDeadline(i)
	return du
}

// ClearAuthDeadline clears the value of the "auth_deadline" field.
func (du *DeviceUpdate) ClearAuthDeadline() *DeviceUpdate {
	du.mutation.ClearAuthDeadline()
	return du
}

// SetActivatedAt sets the "activated_at" field.
func (du *DeviceUpdate) SetActivatedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetActivatedAt(t)
	return du
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableActivatedAt(t *time.Time) *DeviceUpdate {
	if t != nil {
		du.SetActivatedAt(*t)
	}
	return du
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (du *DeviceUpdate) AddCameraIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.AddCameraIDs(ids...)
	return du
}

// AddCamera adds the "camera" edges to the Camera entity.
func (du *DeviceUpdate) AddCamera(c ...*Camera) *DeviceUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddCameraIDs(ids...)
}

// AddTaskDeviceIDs adds the "task_device" edge to the Task entity by IDs.
func (du *DeviceUpdate) AddTaskDeviceIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.AddTaskDeviceIDs(ids...)
	return du
}

// AddTaskDevice adds the "task_device" edges to the Task entity.
func (du *DeviceUpdate) AddTaskDevice(t ...*Task) *DeviceUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.AddTaskDeviceIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (du *DeviceUpdate) AddDeviceCameraIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.AddDeviceCameraIDs(ids...)
	return du
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (du *DeviceUpdate) AddDeviceCamera(d ...*DeviceCamera) *DeviceUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDeviceCameraIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (du *DeviceUpdate) ClearCamera() *DeviceUpdate {
	du.mutation.ClearCamera()
	return du
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (du *DeviceUpdate) RemoveCameraIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.RemoveCameraIDs(ids...)
	return du
}

// RemoveCamera removes "camera" edges to Camera entities.
func (du *DeviceUpdate) RemoveCamera(c ...*Camera) *DeviceUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveCameraIDs(ids...)
}

// ClearTaskDevice clears all "task_device" edges to the Task entity.
func (du *DeviceUpdate) ClearTaskDevice() *DeviceUpdate {
	du.mutation.ClearTaskDevice()
	return du
}

// RemoveTaskDeviceIDs removes the "task_device" edge to Task entities by IDs.
func (du *DeviceUpdate) RemoveTaskDeviceIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.RemoveTaskDeviceIDs(ids...)
	return du
}

// RemoveTaskDevice removes "task_device" edges to Task entities.
func (du *DeviceUpdate) RemoveTaskDevice(t ...*Task) *DeviceUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.RemoveTaskDeviceIDs(ids...)
}

// ClearDeviceCamera clears all "device_camera" edges to the DeviceCamera entity.
func (du *DeviceUpdate) ClearDeviceCamera() *DeviceUpdate {
	du.mutation.ClearDeviceCamera()
	return du
}

// RemoveDeviceCameraIDs removes the "device_camera" edge to DeviceCamera entities by IDs.
func (du *DeviceUpdate) RemoveDeviceCameraIDs(ids ...uint64) *DeviceUpdate {
	du.mutation.RemoveDeviceCameraIDs(ids...)
	return du
}

// RemoveDeviceCamera removes "device_camera" edges to DeviceCamera entities.
func (du *DeviceUpdate) RemoveDeviceCamera(d ...*DeviceCamera) *DeviceUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDeviceCameraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DeviceUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		if device.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized device.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := device.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (du *DeviceUpdate) check() error {
	if v, ok := du.mutation.GetType(); ok {
		if err := device.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Device.type": %w`, err)}
		}
	}
	if v, ok := du.mutation.State(); ok {
		if err := device.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Device.state": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DeviceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(device.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.TenantID(); ok {
		_spec.SetField(device.FieldTenantID, field.TypeString, value)
	}
	if du.mutation.TenantIDCleared() {
		_spec.ClearField(device.FieldTenantID, field.TypeString)
	}
	if value, ok := du.mutation.AccessOrgList(); ok {
		_spec.SetField(device.FieldAccessOrgList, field.TypeString, value)
	}
	if du.mutation.AccessOrgListCleared() {
		_spec.ClearField(device.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.DisplayName(); ok {
		_spec.SetField(device.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.ExtID(); ok {
		_spec.SetField(device.FieldExtID, field.TypeString, value)
	}
	if value, ok := du.mutation.SerialNo(); ok {
		_spec.SetField(device.FieldSerialNo, field.TypeString, value)
	}
	if value, ok := du.mutation.State(); ok {
		_spec.SetField(device.FieldState, field.TypeEnum, value)
	}
	if value, ok := du.mutation.MAC(); ok {
		_spec.SetField(device.FieldMAC, field.TypeString, value)
	}
	if value, ok := du.mutation.ZoneName(); ok {
		_spec.SetField(device.FieldZoneName, field.TypeString, value)
	}
	if value, ok := du.mutation.ZoneID(); ok {
		_spec.SetField(device.FieldZoneID, field.TypeString, value)
	}
	if value, ok := du.mutation.WorkspaceID(); ok {
		_spec.SetField(device.FieldWorkspaceID, field.TypeString, value)
	}
	if value, ok := du.mutation.EquipID(); ok {
		_spec.SetField(device.FieldEquipID, field.TypeString, value)
	}
	if value, ok := du.mutation.EquipPassword(); ok {
		_spec.SetField(device.FieldEquipPassword, field.TypeString, value)
	}
	if value, ok := du.mutation.DeviceInfo(); ok {
		_spec.SetField(device.FieldDeviceInfo, field.TypeString, value)
	}
	if value, ok := du.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeString, value)
	}
	if du.mutation.ModelCleared() {
		_spec.ClearField(device.FieldModel, field.TypeString)
	}
	if value, ok := du.mutation.AuthDeadline(); ok {
		_spec.SetField(device.FieldAuthDeadline, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedAuthDeadline(); ok {
		_spec.AddField(device.FieldAuthDeadline, field.TypeInt64, value)
	}
	if du.mutation.AuthDeadlineCleared() {
		_spec.ClearField(device.FieldAuthDeadline, field.TypeInt64)
	}
	if value, ok := du.mutation.ActivatedAt(); ok {
		_spec.SetField(device.FieldActivatedAt, field.TypeTime, value)
	}
	if du.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		createE := &DeviceCameraCreate{config: du.config, mutation: newDeviceCameraMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedCameraIDs(); len(nodes) > 0 && !du.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: du.config, mutation: newDeviceCameraMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: du.config, mutation: newDeviceCameraMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TaskDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedTaskDeviceIDs(); len(nodes) > 0 && !du.mutation.TaskDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TaskDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDeviceCameraIDs(); len(nodes) > 0 && !du.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeviceUpdateOne) SetUpdatedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DeviceUpdateOne) SetDeletedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DeviceUpdateOne) ClearDeletedAt() *DeviceUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetTenantID sets the "tenant_id" field.
func (duo *DeviceUpdateOne) SetTenantID(s string) *DeviceUpdateOne {
	duo.mutation.SetTenantID(s)
	return duo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableTenantID(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetTenantID(*s)
	}
	return duo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (duo *DeviceUpdateOne) ClearTenantID() *DeviceUpdateOne {
	duo.mutation.ClearTenantID()
	return duo
}

// SetAccessOrgList sets the "access_org_list" field.
func (duo *DeviceUpdateOne) SetAccessOrgList(s string) *DeviceUpdateOne {
	duo.mutation.SetAccessOrgList(s)
	return duo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableAccessOrgList(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetAccessOrgList(*s)
	}
	return duo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (duo *DeviceUpdateOne) ClearAccessOrgList() *DeviceUpdateOne {
	duo.mutation.ClearAccessOrgList()
	return duo
}

// SetName sets the "name" field.
func (duo *DeviceUpdateOne) SetName(s string) *DeviceUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableName(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetDisplayName sets the "display_name" field.
func (duo *DeviceUpdateOne) SetDisplayName(s string) *DeviceUpdateOne {
	duo.mutation.SetDisplayName(s)
	return duo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDisplayName(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetDisplayName(*s)
	}
	return duo
}

// SetType sets the "type" field.
func (duo *DeviceUpdateOne) SetType(bdt biz.EdgeDeviceType) *DeviceUpdateOne {
	duo.mutation.SetType(bdt)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableType(bdt *biz.EdgeDeviceType) *DeviceUpdateOne {
	if bdt != nil {
		duo.SetType(*bdt)
	}
	return duo
}

// SetExtID sets the "ext_id" field.
func (duo *DeviceUpdateOne) SetExtID(s string) *DeviceUpdateOne {
	duo.mutation.SetExtID(s)
	return duo
}

// SetNillableExtID sets the "ext_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableExtID(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetExtID(*s)
	}
	return duo
}

// SetSerialNo sets the "serial_no" field.
func (duo *DeviceUpdateOne) SetSerialNo(s string) *DeviceUpdateOne {
	duo.mutation.SetSerialNo(s)
	return duo
}

// SetNillableSerialNo sets the "serial_no" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableSerialNo(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetSerialNo(*s)
	}
	return duo
}

// SetState sets the "state" field.
func (duo *DeviceUpdateOne) SetState(bs biz.DeviceState) *DeviceUpdateOne {
	duo.mutation.SetState(bs)
	return duo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableState(bs *biz.DeviceState) *DeviceUpdateOne {
	if bs != nil {
		duo.SetState(*bs)
	}
	return duo
}

// SetMAC sets the "mac" field.
func (duo *DeviceUpdateOne) SetMAC(s string) *DeviceUpdateOne {
	duo.mutation.SetMAC(s)
	return duo
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableMAC(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetMAC(*s)
	}
	return duo
}

// SetZoneName sets the "zone_name" field.
func (duo *DeviceUpdateOne) SetZoneName(s string) *DeviceUpdateOne {
	duo.mutation.SetZoneName(s)
	return duo
}

// SetNillableZoneName sets the "zone_name" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableZoneName(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetZoneName(*s)
	}
	return duo
}

// SetZoneID sets the "zone_id" field.
func (duo *DeviceUpdateOne) SetZoneID(s string) *DeviceUpdateOne {
	duo.mutation.SetZoneID(s)
	return duo
}

// SetNillableZoneID sets the "zone_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableZoneID(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetZoneID(*s)
	}
	return duo
}

// SetWorkspaceID sets the "workspace_id" field.
func (duo *DeviceUpdateOne) SetWorkspaceID(s string) *DeviceUpdateOne {
	duo.mutation.SetWorkspaceID(s)
	return duo
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableWorkspaceID(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetWorkspaceID(*s)
	}
	return duo
}

// SetEquipID sets the "equip_id" field.
func (duo *DeviceUpdateOne) SetEquipID(s string) *DeviceUpdateOne {
	duo.mutation.SetEquipID(s)
	return duo
}

// SetNillableEquipID sets the "equip_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableEquipID(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetEquipID(*s)
	}
	return duo
}

// SetEquipPassword sets the "equip_password" field.
func (duo *DeviceUpdateOne) SetEquipPassword(s string) *DeviceUpdateOne {
	duo.mutation.SetEquipPassword(s)
	return duo
}

// SetNillableEquipPassword sets the "equip_password" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableEquipPassword(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetEquipPassword(*s)
	}
	return duo
}

// SetDeviceInfo sets the "device_info" field.
func (duo *DeviceUpdateOne) SetDeviceInfo(s string) *DeviceUpdateOne {
	duo.mutation.SetDeviceInfo(s)
	return duo
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceInfo(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetDeviceInfo(*s)
	}
	return duo
}

// SetModel sets the "model" field.
func (duo *DeviceUpdateOne) SetModel(s string) *DeviceUpdateOne {
	duo.mutation.SetModel(s)
	return duo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableModel(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetModel(*s)
	}
	return duo
}

// ClearModel clears the value of the "model" field.
func (duo *DeviceUpdateOne) ClearModel() *DeviceUpdateOne {
	duo.mutation.ClearModel()
	return duo
}

// SetAuthDeadline sets the "auth_deadline" field.
func (duo *DeviceUpdateOne) SetAuthDeadline(i int64) *DeviceUpdateOne {
	duo.mutation.ResetAuthDeadline()
	duo.mutation.SetAuthDeadline(i)
	return duo
}

// SetNillableAuthDeadline sets the "auth_deadline" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableAuthDeadline(i *int64) *DeviceUpdateOne {
	if i != nil {
		duo.SetAuthDeadline(*i)
	}
	return duo
}

// AddAuthDeadline adds i to the "auth_deadline" field.
func (duo *DeviceUpdateOne) AddAuthDeadline(i int64) *DeviceUpdateOne {
	duo.mutation.AddAuthDeadline(i)
	return duo
}

// ClearAuthDeadline clears the value of the "auth_deadline" field.
func (duo *DeviceUpdateOne) ClearAuthDeadline() *DeviceUpdateOne {
	duo.mutation.ClearAuthDeadline()
	return duo
}

// SetActivatedAt sets the "activated_at" field.
func (duo *DeviceUpdateOne) SetActivatedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetActivatedAt(t)
	return duo
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableActivatedAt(t *time.Time) *DeviceUpdateOne {
	if t != nil {
		duo.SetActivatedAt(*t)
	}
	return duo
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (duo *DeviceUpdateOne) AddCameraIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.AddCameraIDs(ids...)
	return duo
}

// AddCamera adds the "camera" edges to the Camera entity.
func (duo *DeviceUpdateOne) AddCamera(c ...*Camera) *DeviceUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddCameraIDs(ids...)
}

// AddTaskDeviceIDs adds the "task_device" edge to the Task entity by IDs.
func (duo *DeviceUpdateOne) AddTaskDeviceIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.AddTaskDeviceIDs(ids...)
	return duo
}

// AddTaskDevice adds the "task_device" edges to the Task entity.
func (duo *DeviceUpdateOne) AddTaskDevice(t ...*Task) *DeviceUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.AddTaskDeviceIDs(ids...)
}

// AddDeviceCameraIDs adds the "device_camera" edge to the DeviceCamera entity by IDs.
func (duo *DeviceUpdateOne) AddDeviceCameraIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.AddDeviceCameraIDs(ids...)
	return duo
}

// AddDeviceCamera adds the "device_camera" edges to the DeviceCamera entity.
func (duo *DeviceUpdateOne) AddDeviceCamera(d ...*DeviceCamera) *DeviceUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDeviceCameraIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (duo *DeviceUpdateOne) ClearCamera() *DeviceUpdateOne {
	duo.mutation.ClearCamera()
	return duo
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (duo *DeviceUpdateOne) RemoveCameraIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.RemoveCameraIDs(ids...)
	return duo
}

// RemoveCamera removes "camera" edges to Camera entities.
func (duo *DeviceUpdateOne) RemoveCamera(c ...*Camera) *DeviceUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveCameraIDs(ids...)
}

// ClearTaskDevice clears all "task_device" edges to the Task entity.
func (duo *DeviceUpdateOne) ClearTaskDevice() *DeviceUpdateOne {
	duo.mutation.ClearTaskDevice()
	return duo
}

// RemoveTaskDeviceIDs removes the "task_device" edge to Task entities by IDs.
func (duo *DeviceUpdateOne) RemoveTaskDeviceIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.RemoveTaskDeviceIDs(ids...)
	return duo
}

// RemoveTaskDevice removes "task_device" edges to Task entities.
func (duo *DeviceUpdateOne) RemoveTaskDevice(t ...*Task) *DeviceUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.RemoveTaskDeviceIDs(ids...)
}

// ClearDeviceCamera clears all "device_camera" edges to the DeviceCamera entity.
func (duo *DeviceUpdateOne) ClearDeviceCamera() *DeviceUpdateOne {
	duo.mutation.ClearDeviceCamera()
	return duo
}

// RemoveDeviceCameraIDs removes the "device_camera" edge to DeviceCamera entities by IDs.
func (duo *DeviceUpdateOne) RemoveDeviceCameraIDs(ids ...uint64) *DeviceUpdateOne {
	duo.mutation.RemoveDeviceCameraIDs(ids...)
	return duo
}

// RemoveDeviceCamera removes "device_camera" edges to DeviceCamera entities.
func (duo *DeviceUpdateOne) RemoveDeviceCamera(d ...*DeviceCamera) *DeviceUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDeviceCameraIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DeviceUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		if device.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized device.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := device.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeviceUpdateOne) check() error {
	if v, ok := duo.mutation.GetType(); ok {
		if err := device.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Device.type": %w`, err)}
		}
	}
	if v, ok := duo.mutation.State(); ok {
		if err := device.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Device.state": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DeviceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(device.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.TenantID(); ok {
		_spec.SetField(device.FieldTenantID, field.TypeString, value)
	}
	if duo.mutation.TenantIDCleared() {
		_spec.ClearField(device.FieldTenantID, field.TypeString)
	}
	if value, ok := duo.mutation.AccessOrgList(); ok {
		_spec.SetField(device.FieldAccessOrgList, field.TypeString, value)
	}
	if duo.mutation.AccessOrgListCleared() {
		_spec.ClearField(device.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.DisplayName(); ok {
		_spec.SetField(device.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.ExtID(); ok {
		_spec.SetField(device.FieldExtID, field.TypeString, value)
	}
	if value, ok := duo.mutation.SerialNo(); ok {
		_spec.SetField(device.FieldSerialNo, field.TypeString, value)
	}
	if value, ok := duo.mutation.State(); ok {
		_spec.SetField(device.FieldState, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.MAC(); ok {
		_spec.SetField(device.FieldMAC, field.TypeString, value)
	}
	if value, ok := duo.mutation.ZoneName(); ok {
		_spec.SetField(device.FieldZoneName, field.TypeString, value)
	}
	if value, ok := duo.mutation.ZoneID(); ok {
		_spec.SetField(device.FieldZoneID, field.TypeString, value)
	}
	if value, ok := duo.mutation.WorkspaceID(); ok {
		_spec.SetField(device.FieldWorkspaceID, field.TypeString, value)
	}
	if value, ok := duo.mutation.EquipID(); ok {
		_spec.SetField(device.FieldEquipID, field.TypeString, value)
	}
	if value, ok := duo.mutation.EquipPassword(); ok {
		_spec.SetField(device.FieldEquipPassword, field.TypeString, value)
	}
	if value, ok := duo.mutation.DeviceInfo(); ok {
		_spec.SetField(device.FieldDeviceInfo, field.TypeString, value)
	}
	if value, ok := duo.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeString, value)
	}
	if duo.mutation.ModelCleared() {
		_spec.ClearField(device.FieldModel, field.TypeString)
	}
	if value, ok := duo.mutation.AuthDeadline(); ok {
		_spec.SetField(device.FieldAuthDeadline, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedAuthDeadline(); ok {
		_spec.AddField(device.FieldAuthDeadline, field.TypeInt64, value)
	}
	if duo.mutation.AuthDeadlineCleared() {
		_spec.ClearField(device.FieldAuthDeadline, field.TypeInt64)
	}
	if value, ok := duo.mutation.ActivatedAt(); ok {
		_spec.SetField(device.FieldActivatedAt, field.TypeTime, value)
	}
	if duo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		createE := &DeviceCameraCreate{config: duo.config, mutation: newDeviceCameraMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedCameraIDs(); len(nodes) > 0 && !duo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: duo.config, mutation: newDeviceCameraMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.CameraTable,
			Columns: device.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &DeviceCameraCreate{config: duo.config, mutation: newDeviceCameraMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TaskDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedTaskDeviceIDs(); len(nodes) > 0 && !duo.mutation.TaskDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TaskDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TaskDeviceTable,
			Columns: []string{device.TaskDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDeviceCameraIDs(); len(nodes) > 0 && !duo.mutation.DeviceCameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DeviceCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.DeviceCameraTable,
			Columns: []string{device.DeviceCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicecamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
