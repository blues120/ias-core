// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/fileupload"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// FileUploadUpdate is the builder for updating FileUpload entities.
type FileUploadUpdate struct {
	config
	hooks     []Hook
	mutation  *FileUploadMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUploadUpdate builder.
func (fuu *FileUploadUpdate) Where(ps ...predicate.FileUpload) *FileUploadUpdate {
	fuu.mutation.Where(ps...)
	return fuu
}

// SetUpdatedAt sets the "updated_at" field.
func (fuu *FileUploadUpdate) SetUpdatedAt(t time.Time) *FileUploadUpdate {
	fuu.mutation.SetUpdatedAt(t)
	return fuu
}

// SetDeletedAt sets the "deleted_at" field.
func (fuu *FileUploadUpdate) SetDeletedAt(t time.Time) *FileUploadUpdate {
	fuu.mutation.SetDeletedAt(t)
	return fuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableDeletedAt(t *time.Time) *FileUploadUpdate {
	if t != nil {
		fuu.SetDeletedAt(*t)
	}
	return fuu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuu *FileUploadUpdate) ClearDeletedAt() *FileUploadUpdate {
	fuu.mutation.ClearDeletedAt()
	return fuu
}

// SetProvider sets the "provider" field.
func (fuu *FileUploadUpdate) SetProvider(s string) *FileUploadUpdate {
	fuu.mutation.SetProvider(s)
	return fuu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableProvider(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetProvider(*s)
	}
	return fuu
}

// SetFileName sets the "file_name" field.
func (fuu *FileUploadUpdate) SetFileName(s string) *FileUploadUpdate {
	fuu.mutation.SetFileName(s)
	return fuu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableFileName(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetFileName(*s)
	}
	return fuu
}

// SetMd5 sets the "md5" field.
func (fuu *FileUploadUpdate) SetMd5(s string) *FileUploadUpdate {
	fuu.mutation.SetMd5(s)
	return fuu
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableMd5(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetMd5(*s)
	}
	return fuu
}

// SetTotalBytes sets the "total_bytes" field.
func (fuu *FileUploadUpdate) SetTotalBytes(u uint64) *FileUploadUpdate {
	fuu.mutation.ResetTotalBytes()
	fuu.mutation.SetTotalBytes(u)
	return fuu
}

// SetNillableTotalBytes sets the "total_bytes" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableTotalBytes(u *uint64) *FileUploadUpdate {
	if u != nil {
		fuu.SetTotalBytes(*u)
	}
	return fuu
}

// AddTotalBytes adds u to the "total_bytes" field.
func (fuu *FileUploadUpdate) AddTotalBytes(u int64) *FileUploadUpdate {
	fuu.mutation.AddTotalBytes(u)
	return fuu
}

// SetEtag sets the "etag" field.
func (fuu *FileUploadUpdate) SetEtag(s string) *FileUploadUpdate {
	fuu.mutation.SetEtag(s)
	return fuu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableEtag(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetEtag(*s)
	}
	return fuu
}

// ClearEtag clears the value of the "etag" field.
func (fuu *FileUploadUpdate) ClearEtag() *FileUploadUpdate {
	fuu.mutation.ClearEtag()
	return fuu
}

// SetKey sets the "key" field.
func (fuu *FileUploadUpdate) SetKey(s string) *FileUploadUpdate {
	fuu.mutation.SetKey(s)
	return fuu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableKey(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetKey(*s)
	}
	return fuu
}

// SetUploadID sets the "upload_id" field.
func (fuu *FileUploadUpdate) SetUploadID(s string) *FileUploadUpdate {
	fuu.mutation.SetUploadID(s)
	return fuu
}

// SetNillableUploadID sets the "upload_id" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableUploadID(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetUploadID(*s)
	}
	return fuu
}

// ClearUploadID clears the value of the "upload_id" field.
func (fuu *FileUploadUpdate) ClearUploadID() *FileUploadUpdate {
	fuu.mutation.ClearUploadID()
	return fuu
}

// SetStatus sets the "status" field.
func (fuu *FileUploadUpdate) SetStatus(s string) *FileUploadUpdate {
	fuu.mutation.SetStatus(s)
	return fuu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableStatus(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetStatus(*s)
	}
	return fuu
}

// SetType sets the "type" field.
func (fuu *FileUploadUpdate) SetType(s string) *FileUploadUpdate {
	fuu.mutation.SetType(s)
	return fuu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableType(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetType(*s)
	}
	return fuu
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (fuu *FileUploadUpdate) SetAlgoGroupID(u uint64) *FileUploadUpdate {
	fuu.mutation.ResetAlgoGroupID()
	fuu.mutation.SetAlgoGroupID(u)
	return fuu
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableAlgoGroupID(u *uint64) *FileUploadUpdate {
	if u != nil {
		fuu.SetAlgoGroupID(*u)
	}
	return fuu
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (fuu *FileUploadUpdate) AddAlgoGroupID(u int64) *FileUploadUpdate {
	fuu.mutation.AddAlgoGroupID(u)
	return fuu
}

// SetMeta sets the "meta" field.
func (fuu *FileUploadUpdate) SetMeta(s string) *FileUploadUpdate {
	fuu.mutation.SetMeta(s)
	return fuu
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (fuu *FileUploadUpdate) SetNillableMeta(s *string) *FileUploadUpdate {
	if s != nil {
		fuu.SetMeta(*s)
	}
	return fuu
}

// Mutation returns the FileUploadMutation object of the builder.
func (fuu *FileUploadUpdate) Mutation() *FileUploadMutation {
	return fuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fuu *FileUploadUpdate) Save(ctx context.Context) (int, error) {
	if err := fuu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fuu.sqlSave, fuu.mutation, fuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuu *FileUploadUpdate) SaveX(ctx context.Context) int {
	affected, err := fuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fuu *FileUploadUpdate) Exec(ctx context.Context) error {
	_, err := fuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuu *FileUploadUpdate) ExecX(ctx context.Context) {
	if err := fuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuu *FileUploadUpdate) defaults() error {
	if _, ok := fuu.mutation.UpdatedAt(); !ok {
		if fileupload.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileupload.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fileupload.UpdateDefaultUpdatedAt()
		fuu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuu *FileUploadUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUploadUpdate {
	fuu.modifiers = append(fuu.modifiers, modifiers...)
	return fuu
}

func (fuu *FileUploadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fileupload.Table, fileupload.Columns, sqlgraph.NewFieldSpec(fileupload.FieldID, field.TypeUint64))
	if ps := fuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuu.mutation.UpdatedAt(); ok {
		_spec.SetField(fileupload.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuu.mutation.DeletedAt(); ok {
		_spec.SetField(fileupload.FieldDeletedAt, field.TypeTime, value)
	}
	if fuu.mutation.DeletedAtCleared() {
		_spec.ClearField(fileupload.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuu.mutation.Provider(); ok {
		_spec.SetField(fileupload.FieldProvider, field.TypeString, value)
	}
	if value, ok := fuu.mutation.FileName(); ok {
		_spec.SetField(fileupload.FieldFileName, field.TypeString, value)
	}
	if value, ok := fuu.mutation.Md5(); ok {
		_spec.SetField(fileupload.FieldMd5, field.TypeString, value)
	}
	if value, ok := fuu.mutation.TotalBytes(); ok {
		_spec.SetField(fileupload.FieldTotalBytes, field.TypeUint64, value)
	}
	if value, ok := fuu.mutation.AddedTotalBytes(); ok {
		_spec.AddField(fileupload.FieldTotalBytes, field.TypeUint64, value)
	}
	if value, ok := fuu.mutation.Etag(); ok {
		_spec.SetField(fileupload.FieldEtag, field.TypeString, value)
	}
	if fuu.mutation.EtagCleared() {
		_spec.ClearField(fileupload.FieldEtag, field.TypeString)
	}
	if value, ok := fuu.mutation.Key(); ok {
		_spec.SetField(fileupload.FieldKey, field.TypeString, value)
	}
	if value, ok := fuu.mutation.UploadID(); ok {
		_spec.SetField(fileupload.FieldUploadID, field.TypeString, value)
	}
	if fuu.mutation.UploadIDCleared() {
		_spec.ClearField(fileupload.FieldUploadID, field.TypeString)
	}
	if value, ok := fuu.mutation.Status(); ok {
		_spec.SetField(fileupload.FieldStatus, field.TypeString, value)
	}
	if value, ok := fuu.mutation.GetType(); ok {
		_spec.SetField(fileupload.FieldType, field.TypeString, value)
	}
	if value, ok := fuu.mutation.AlgoGroupID(); ok {
		_spec.SetField(fileupload.FieldAlgoGroupID, field.TypeUint64, value)
	}
	if value, ok := fuu.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(fileupload.FieldAlgoGroupID, field.TypeUint64, value)
	}
	if value, ok := fuu.mutation.Meta(); ok {
		_spec.SetField(fileupload.FieldMeta, field.TypeString, value)
	}
	_spec.AddModifiers(fuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileupload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fuu.mutation.done = true
	return n, nil
}

// FileUploadUpdateOne is the builder for updating a single FileUpload entity.
type FileUploadUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileUploadMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuuo *FileUploadUpdateOne) SetUpdatedAt(t time.Time) *FileUploadUpdateOne {
	fuuo.mutation.SetUpdatedAt(t)
	return fuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuuo *FileUploadUpdateOne) SetDeletedAt(t time.Time) *FileUploadUpdateOne {
	fuuo.mutation.SetDeletedAt(t)
	return fuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableDeletedAt(t *time.Time) *FileUploadUpdateOne {
	if t != nil {
		fuuo.SetDeletedAt(*t)
	}
	return fuuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuuo *FileUploadUpdateOne) ClearDeletedAt() *FileUploadUpdateOne {
	fuuo.mutation.ClearDeletedAt()
	return fuuo
}

// SetProvider sets the "provider" field.
func (fuuo *FileUploadUpdateOne) SetProvider(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetProvider(s)
	return fuuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableProvider(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetProvider(*s)
	}
	return fuuo
}

// SetFileName sets the "file_name" field.
func (fuuo *FileUploadUpdateOne) SetFileName(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetFileName(s)
	return fuuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableFileName(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetFileName(*s)
	}
	return fuuo
}

// SetMd5 sets the "md5" field.
func (fuuo *FileUploadUpdateOne) SetMd5(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetMd5(s)
	return fuuo
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableMd5(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetMd5(*s)
	}
	return fuuo
}

// SetTotalBytes sets the "total_bytes" field.
func (fuuo *FileUploadUpdateOne) SetTotalBytes(u uint64) *FileUploadUpdateOne {
	fuuo.mutation.ResetTotalBytes()
	fuuo.mutation.SetTotalBytes(u)
	return fuuo
}

// SetNillableTotalBytes sets the "total_bytes" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableTotalBytes(u *uint64) *FileUploadUpdateOne {
	if u != nil {
		fuuo.SetTotalBytes(*u)
	}
	return fuuo
}

// AddTotalBytes adds u to the "total_bytes" field.
func (fuuo *FileUploadUpdateOne) AddTotalBytes(u int64) *FileUploadUpdateOne {
	fuuo.mutation.AddTotalBytes(u)
	return fuuo
}

// SetEtag sets the "etag" field.
func (fuuo *FileUploadUpdateOne) SetEtag(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetEtag(s)
	return fuuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableEtag(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetEtag(*s)
	}
	return fuuo
}

// ClearEtag clears the value of the "etag" field.
func (fuuo *FileUploadUpdateOne) ClearEtag() *FileUploadUpdateOne {
	fuuo.mutation.ClearEtag()
	return fuuo
}

// SetKey sets the "key" field.
func (fuuo *FileUploadUpdateOne) SetKey(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetKey(s)
	return fuuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableKey(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetKey(*s)
	}
	return fuuo
}

// SetUploadID sets the "upload_id" field.
func (fuuo *FileUploadUpdateOne) SetUploadID(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetUploadID(s)
	return fuuo
}

// SetNillableUploadID sets the "upload_id" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableUploadID(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetUploadID(*s)
	}
	return fuuo
}

// ClearUploadID clears the value of the "upload_id" field.
func (fuuo *FileUploadUpdateOne) ClearUploadID() *FileUploadUpdateOne {
	fuuo.mutation.ClearUploadID()
	return fuuo
}

// SetStatus sets the "status" field.
func (fuuo *FileUploadUpdateOne) SetStatus(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetStatus(s)
	return fuuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableStatus(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetStatus(*s)
	}
	return fuuo
}

// SetType sets the "type" field.
func (fuuo *FileUploadUpdateOne) SetType(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetType(s)
	return fuuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableType(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetType(*s)
	}
	return fuuo
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (fuuo *FileUploadUpdateOne) SetAlgoGroupID(u uint64) *FileUploadUpdateOne {
	fuuo.mutation.ResetAlgoGroupID()
	fuuo.mutation.SetAlgoGroupID(u)
	return fuuo
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableAlgoGroupID(u *uint64) *FileUploadUpdateOne {
	if u != nil {
		fuuo.SetAlgoGroupID(*u)
	}
	return fuuo
}

// AddAlgoGroupID adds u to the "algo_group_id" field.
func (fuuo *FileUploadUpdateOne) AddAlgoGroupID(u int64) *FileUploadUpdateOne {
	fuuo.mutation.AddAlgoGroupID(u)
	return fuuo
}

// SetMeta sets the "meta" field.
func (fuuo *FileUploadUpdateOne) SetMeta(s string) *FileUploadUpdateOne {
	fuuo.mutation.SetMeta(s)
	return fuuo
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (fuuo *FileUploadUpdateOne) SetNillableMeta(s *string) *FileUploadUpdateOne {
	if s != nil {
		fuuo.SetMeta(*s)
	}
	return fuuo
}

// Mutation returns the FileUploadMutation object of the builder.
func (fuuo *FileUploadUpdateOne) Mutation() *FileUploadMutation {
	return fuuo.mutation
}

// Where appends a list predicates to the FileUploadUpdate builder.
func (fuuo *FileUploadUpdateOne) Where(ps ...predicate.FileUpload) *FileUploadUpdateOne {
	fuuo.mutation.Where(ps...)
	return fuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuuo *FileUploadUpdateOne) Select(field string, fields ...string) *FileUploadUpdateOne {
	fuuo.fields = append([]string{field}, fields...)
	return fuuo
}

// Save executes the query and returns the updated FileUpload entity.
func (fuuo *FileUploadUpdateOne) Save(ctx context.Context) (*FileUpload, error) {
	if err := fuuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuuo.sqlSave, fuuo.mutation, fuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuuo *FileUploadUpdateOne) SaveX(ctx context.Context) *FileUpload {
	node, err := fuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuuo *FileUploadUpdateOne) Exec(ctx context.Context) error {
	_, err := fuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuuo *FileUploadUpdateOne) ExecX(ctx context.Context) {
	if err := fuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuuo *FileUploadUpdateOne) defaults() error {
	if _, ok := fuuo.mutation.UpdatedAt(); !ok {
		if fileupload.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileupload.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fileupload.UpdateDefaultUpdatedAt()
		fuuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuuo *FileUploadUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUploadUpdateOne {
	fuuo.modifiers = append(fuuo.modifiers, modifiers...)
	return fuuo
}

func (fuuo *FileUploadUpdateOne) sqlSave(ctx context.Context) (_node *FileUpload, err error) {
	_spec := sqlgraph.NewUpdateSpec(fileupload.Table, fileupload.Columns, sqlgraph.NewFieldSpec(fileupload.FieldID, field.TypeUint64))
	id, ok := fuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileUpload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileupload.FieldID)
		for _, f := range fields {
			if !fileupload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fileupload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fileupload.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuuo.mutation.DeletedAt(); ok {
		_spec.SetField(fileupload.FieldDeletedAt, field.TypeTime, value)
	}
	if fuuo.mutation.DeletedAtCleared() {
		_spec.ClearField(fileupload.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuuo.mutation.Provider(); ok {
		_spec.SetField(fileupload.FieldProvider, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.FileName(); ok {
		_spec.SetField(fileupload.FieldFileName, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.Md5(); ok {
		_spec.SetField(fileupload.FieldMd5, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.TotalBytes(); ok {
		_spec.SetField(fileupload.FieldTotalBytes, field.TypeUint64, value)
	}
	if value, ok := fuuo.mutation.AddedTotalBytes(); ok {
		_spec.AddField(fileupload.FieldTotalBytes, field.TypeUint64, value)
	}
	if value, ok := fuuo.mutation.Etag(); ok {
		_spec.SetField(fileupload.FieldEtag, field.TypeString, value)
	}
	if fuuo.mutation.EtagCleared() {
		_spec.ClearField(fileupload.FieldEtag, field.TypeString)
	}
	if value, ok := fuuo.mutation.Key(); ok {
		_spec.SetField(fileupload.FieldKey, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.UploadID(); ok {
		_spec.SetField(fileupload.FieldUploadID, field.TypeString, value)
	}
	if fuuo.mutation.UploadIDCleared() {
		_spec.ClearField(fileupload.FieldUploadID, field.TypeString)
	}
	if value, ok := fuuo.mutation.Status(); ok {
		_spec.SetField(fileupload.FieldStatus, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.GetType(); ok {
		_spec.SetField(fileupload.FieldType, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.AlgoGroupID(); ok {
		_spec.SetField(fileupload.FieldAlgoGroupID, field.TypeUint64, value)
	}
	if value, ok := fuuo.mutation.AddedAlgoGroupID(); ok {
		_spec.AddField(fileupload.FieldAlgoGroupID, field.TypeUint64, value)
	}
	if value, ok := fuuo.mutation.Meta(); ok {
		_spec.SetField(fileupload.FieldMeta, field.TypeString, value)
	}
	_spec.AddModifiers(fuuo.modifiers...)
	_node = &FileUpload{config: fuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileupload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuuo.mutation.done = true
	return _node, nil
}
