// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/device"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// 授权的组织 id 列表，#分隔
	AccessOrgList string `json:"access_org_list,omitempty"`
	// 设备名称
	Name string `json:"name,omitempty"`
	// 设备展示名称
	DisplayName string `json:"display_name,omitempty"`
	// 设备类型
	Type biz.EdgeDeviceType `json:"type,omitempty"`
	// 设备id
	ExtID string `json:"ext_id,omitempty"`
	// 序列号
	SerialNo string `json:"serial_no,omitempty"`
	// 状态
	State biz.DeviceState `json:"state,omitempty"`
	// MAC地址
	MAC string `json:"mac,omitempty"`
	// 区域名称
	ZoneName string `json:"zone_name,omitempty"`
	// 区域ID
	ZoneID string `json:"zone_id,omitempty"`
	// 工作空间ID
	WorkspaceID string `json:"workspace_id,omitempty"`
	// 数生使用的设备ID
	EquipID string `json:"equip_id,omitempty"`
	// 数生使用的设备密码
	EquipPassword string `json:"equip_password,omitempty"`
	// 设备信息
	DeviceInfo string `json:"device_info,omitempty"`
	// 设备型号
	Model string `json:"model,omitempty"`
	// 纳管授权时间
	AuthDeadline int64 `json:"auth_deadline,omitempty"`
	// 纳管激活时间
	ActivatedAt time.Time `json:"activated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceQuery when eager-loading is set.
	Edges        DeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceEdges holds the relations/edges for other nodes in the graph.
type DeviceEdges struct {
	// Camera holds the value of the camera edge.
	Camera []*Camera `json:"camera,omitempty"`
	// TaskDevice holds the value of the task_device edge.
	TaskDevice []*Task `json:"task_device,omitempty"`
	// DeviceCamera holds the value of the device_camera edge.
	DeviceCamera []*DeviceCamera `json:"device_camera,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CameraOrErr returns the Camera value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) CameraOrErr() ([]*Camera, error) {
	if e.loadedTypes[0] {
		return e.Camera, nil
	}
	return nil, &NotLoadedError{edge: "camera"}
}

// TaskDeviceOrErr returns the TaskDevice value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) TaskDeviceOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.TaskDevice, nil
	}
	return nil, &NotLoadedError{edge: "task_device"}
}

// DeviceCameraOrErr returns the DeviceCamera value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) DeviceCameraOrErr() ([]*DeviceCamera, error) {
	if e.loadedTypes[2] {
		return e.DeviceCamera, nil
	}
	return nil, &NotLoadedError{edge: "device_camera"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldID, device.FieldAuthDeadline:
			values[i] = new(sql.NullInt64)
		case device.FieldTenantID, device.FieldAccessOrgList, device.FieldName, device.FieldDisplayName, device.FieldType, device.FieldExtID, device.FieldSerialNo, device.FieldState, device.FieldMAC, device.FieldZoneName, device.FieldZoneID, device.FieldWorkspaceID, device.FieldEquipID, device.FieldEquipPassword, device.FieldDeviceInfo, device.FieldModel:
			values[i] = new(sql.NullString)
		case device.FieldCreatedAt, device.FieldUpdatedAt, device.FieldDeletedAt, device.FieldActivatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint64(value.Int64)
		case device.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case device.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case device.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = value.Time
			}
		case device.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				d.TenantID = value.String
			}
		case device.FieldAccessOrgList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_org_list", values[i])
			} else if value.Valid {
				d.AccessOrgList = value.String
			}
		case device.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case device.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				d.DisplayName = value.String
			}
		case device.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				d.Type = biz.EdgeDeviceType(value.String)
			}
		case device.FieldExtID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext_id", values[i])
			} else if value.Valid {
				d.ExtID = value.String
			}
		case device.FieldSerialNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_no", values[i])
			} else if value.Valid {
				d.SerialNo = value.String
			}
		case device.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				d.State = biz.DeviceState(value.String)
			}
		case device.FieldMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mac", values[i])
			} else if value.Valid {
				d.MAC = value.String
			}
		case device.FieldZoneName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zone_name", values[i])
			} else if value.Valid {
				d.ZoneName = value.String
			}
		case device.FieldZoneID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zone_id", values[i])
			} else if value.Valid {
				d.ZoneID = value.String
			}
		case device.FieldWorkspaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value.Valid {
				d.WorkspaceID = value.String
			}
		case device.FieldEquipID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equip_id", values[i])
			} else if value.Valid {
				d.EquipID = value.String
			}
		case device.FieldEquipPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equip_password", values[i])
			} else if value.Valid {
				d.EquipPassword = value.String
			}
		case device.FieldDeviceInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_info", values[i])
			} else if value.Valid {
				d.DeviceInfo = value.String
			}
		case device.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				d.Model = value.String
			}
		case device.FieldAuthDeadline:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auth_deadline", values[i])
			} else if value.Valid {
				d.AuthDeadline = value.Int64
			}
		case device.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				d.ActivatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Device.
// This includes values selected through modifiers, order, etc.
func (d *Device) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCamera queries the "camera" edge of the Device entity.
func (d *Device) QueryCamera() *CameraQuery {
	return NewDeviceClient(d.config).QueryCamera(d)
}

// QueryTaskDevice queries the "task_device" edge of the Device entity.
func (d *Device) QueryTaskDevice() *TaskQuery {
	return NewDeviceClient(d.config).QueryTaskDevice(d)
}

// QueryDeviceCamera queries the "device_camera" edge of the Device entity.
func (d *Device) QueryDeviceCamera() *DeviceCameraQuery {
	return NewDeviceClient(d.config).QueryDeviceCamera(d)
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return NewDeviceClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(d.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(d.TenantID)
	builder.WriteString(", ")
	builder.WriteString("access_org_list=")
	builder.WriteString(d.AccessOrgList)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(d.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", d.Type))
	builder.WriteString(", ")
	builder.WriteString("ext_id=")
	builder.WriteString(d.ExtID)
	builder.WriteString(", ")
	builder.WriteString("serial_no=")
	builder.WriteString(d.SerialNo)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", d.State))
	builder.WriteString(", ")
	builder.WriteString("mac=")
	builder.WriteString(d.MAC)
	builder.WriteString(", ")
	builder.WriteString("zone_name=")
	builder.WriteString(d.ZoneName)
	builder.WriteString(", ")
	builder.WriteString("zone_id=")
	builder.WriteString(d.ZoneID)
	builder.WriteString(", ")
	builder.WriteString("workspace_id=")
	builder.WriteString(d.WorkspaceID)
	builder.WriteString(", ")
	builder.WriteString("equip_id=")
	builder.WriteString(d.EquipID)
	builder.WriteString(", ")
	builder.WriteString("equip_password=")
	builder.WriteString(d.EquipPassword)
	builder.WriteString(", ")
	builder.WriteString("device_info=")
	builder.WriteString(d.DeviceInfo)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(d.Model)
	builder.WriteString(", ")
	builder.WriteString("auth_deadline=")
	builder.WriteString(fmt.Sprintf("%v", d.AuthDeadline))
	builder.WriteString(", ")
	builder.WriteString("activated_at=")
	builder.WriteString(d.ActivatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device
