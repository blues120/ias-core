// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/algorithmalarmtype"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// AlgorithmAlarmTypeDelete is the builder for deleting a AlgorithmAlarmType entity.
type AlgorithmAlarmTypeDelete struct {
	config
	hooks    []Hook
	mutation *AlgorithmAlarmTypeMutation
}

// Where appends a list predicates to the AlgorithmAlarmTypeDelete builder.
func (aatd *AlgorithmAlarmTypeDelete) Where(ps ...predicate.AlgorithmAlarmType) *AlgorithmAlarmTypeDelete {
	aatd.mutation.Where(ps...)
	return aatd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aatd *AlgorithmAlarmTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aatd.sqlExec, aatd.mutation, aatd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aatd *AlgorithmAlarmTypeDelete) ExecX(ctx context.Context) int {
	n, err := aatd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aatd *AlgorithmAlarmTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(algorithmalarmtype.Table, sqlgraph.NewFieldSpec(algorithmalarmtype.FieldID, field.TypeUint64))
	if ps := aatd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aatd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aatd.mutation.done = true
	return affected, err
}

// AlgorithmAlarmTypeDeleteOne is the builder for deleting a single AlgorithmAlarmType entity.
type AlgorithmAlarmTypeDeleteOne struct {
	aatd *AlgorithmAlarmTypeDelete
}

// Where appends a list predicates to the AlgorithmAlarmTypeDelete builder.
func (aatdo *AlgorithmAlarmTypeDeleteOne) Where(ps ...predicate.AlgorithmAlarmType) *AlgorithmAlarmTypeDeleteOne {
	aatdo.aatd.mutation.Where(ps...)
	return aatdo
}

// Exec executes the deletion query.
func (aatdo *AlgorithmAlarmTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := aatdo.aatd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{algorithmalarmtype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aatdo *AlgorithmAlarmTypeDeleteOne) ExecX(ctx context.Context) {
	if err := aatdo.Exec(ctx); err != nil {
		panic(err)
	}
}
