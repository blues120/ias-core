// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
)

// WarnPushUpdate is the builder for updating WarnPush entities.
type WarnPushUpdate struct {
	config
	hooks     []Hook
	mutation  *WarnPushMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarnPushUpdate builder.
func (wpu *WarnPushUpdate) Where(ps ...predicate.WarnPush) *WarnPushUpdate {
	wpu.mutation.Where(ps...)
	return wpu
}

// SetUpdatedAt sets the "updated_at" field.
func (wpu *WarnPushUpdate) SetUpdatedAt(t time.Time) *WarnPushUpdate {
	wpu.mutation.SetUpdatedAt(t)
	return wpu
}

// SetDeletedAt sets the "deleted_at" field.
func (wpu *WarnPushUpdate) SetDeletedAt(t time.Time) *WarnPushUpdate {
	wpu.mutation.SetDeletedAt(t)
	return wpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableDeletedAt(t *time.Time) *WarnPushUpdate {
	if t != nil {
		wpu.SetDeletedAt(*t)
	}
	return wpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wpu *WarnPushUpdate) ClearDeletedAt() *WarnPushUpdate {
	wpu.mutation.ClearDeletedAt()
	return wpu
}

// SetTenantID sets the "tenant_id" field.
func (wpu *WarnPushUpdate) SetTenantID(s string) *WarnPushUpdate {
	wpu.mutation.SetTenantID(s)
	return wpu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableTenantID(s *string) *WarnPushUpdate {
	if s != nil {
		wpu.SetTenantID(*s)
	}
	return wpu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wpu *WarnPushUpdate) ClearTenantID() *WarnPushUpdate {
	wpu.mutation.ClearTenantID()
	return wpu
}

// SetAccessOrgList sets the "access_org_list" field.
func (wpu *WarnPushUpdate) SetAccessOrgList(s string) *WarnPushUpdate {
	wpu.mutation.SetAccessOrgList(s)
	return wpu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableAccessOrgList(s *string) *WarnPushUpdate {
	if s != nil {
		wpu.SetAccessOrgList(*s)
	}
	return wpu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wpu *WarnPushUpdate) ClearAccessOrgList() *WarnPushUpdate {
	wpu.mutation.ClearAccessOrgList()
	return wpu
}

// SetName sets the "name" field.
func (wpu *WarnPushUpdate) SetName(s string) *WarnPushUpdate {
	wpu.mutation.SetName(s)
	return wpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableName(s *string) *WarnPushUpdate {
	if s != nil {
		wpu.SetName(*s)
	}
	return wpu
}

// SetType sets the "type" field.
func (wpu *WarnPushUpdate) SetType(bpt biz.WarnPushType) *WarnPushUpdate {
	wpu.mutation.SetType(bpt)
	return wpu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableType(bpt *biz.WarnPushType) *WarnPushUpdate {
	if bpt != nil {
		wpu.SetType(*bpt)
	}
	return wpu
}

// SetURL sets the "url" field.
func (wpu *WarnPushUpdate) SetURL(s string) *WarnPushUpdate {
	wpu.mutation.SetURL(s)
	return wpu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableURL(s *string) *WarnPushUpdate {
	if s != nil {
		wpu.SetURL(*s)
	}
	return wpu
}

// SetRemark sets the "remark" field.
func (wpu *WarnPushUpdate) SetRemark(s string) *WarnPushUpdate {
	wpu.mutation.SetRemark(s)
	return wpu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableRemark(s *string) *WarnPushUpdate {
	if s != nil {
		wpu.SetRemark(*s)
	}
	return wpu
}

// SetMode sets the "mode" field.
func (wpu *WarnPushUpdate) SetMode(bpm biz.WarnPushMode) *WarnPushUpdate {
	wpu.mutation.SetMode(bpm)
	return wpu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableMode(bpm *biz.WarnPushMode) *WarnPushUpdate {
	if bpm != nil {
		wpu.SetMode(*bpm)
	}
	return wpu
}

// SetStatus sets the "status" field.
func (wpu *WarnPushUpdate) SetStatus(bps biz.WarnPushStatus) *WarnPushUpdate {
	wpu.mutation.SetStatus(bps)
	return wpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wpu *WarnPushUpdate) SetNillableStatus(bps *biz.WarnPushStatus) *WarnPushUpdate {
	if bps != nil {
		wpu.SetStatus(*bps)
	}
	return wpu
}

// Mutation returns the WarnPushMutation object of the builder.
func (wpu *WarnPushUpdate) Mutation() *WarnPushMutation {
	return wpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wpu *WarnPushUpdate) Save(ctx context.Context) (int, error) {
	if err := wpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wpu.sqlSave, wpu.mutation, wpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wpu *WarnPushUpdate) SaveX(ctx context.Context) int {
	affected, err := wpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wpu *WarnPushUpdate) Exec(ctx context.Context) error {
	_, err := wpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpu *WarnPushUpdate) ExecX(ctx context.Context) {
	if err := wpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpu *WarnPushUpdate) defaults() error {
	if _, ok := wpu.mutation.UpdatedAt(); !ok {
		if warnpush.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpush.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpush.UpdateDefaultUpdatedAt()
		wpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wpu *WarnPushUpdate) check() error {
	if v, ok := wpu.mutation.GetType(); ok {
		if err := warnpush.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WarnPush.type": %w`, err)}
		}
	}
	if v, ok := wpu.mutation.Mode(); ok {
		if err := warnpush.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "WarnPush.mode": %w`, err)}
		}
	}
	if v, ok := wpu.mutation.Status(); ok {
		if err := warnpush.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPush.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wpu *WarnPushUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnPushUpdate {
	wpu.modifiers = append(wpu.modifiers, modifiers...)
	return wpu
}

func (wpu *WarnPushUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(warnpush.Table, warnpush.Columns, sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64))
	if ps := wpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpu.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpush.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wpu.mutation.DeletedAt(); ok {
		_spec.SetField(warnpush.FieldDeletedAt, field.TypeTime, value)
	}
	if wpu.mutation.DeletedAtCleared() {
		_spec.ClearField(warnpush.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wpu.mutation.TenantID(); ok {
		_spec.SetField(warnpush.FieldTenantID, field.TypeString, value)
	}
	if wpu.mutation.TenantIDCleared() {
		_spec.ClearField(warnpush.FieldTenantID, field.TypeString)
	}
	if value, ok := wpu.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpush.FieldAccessOrgList, field.TypeString, value)
	}
	if wpu.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnpush.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wpu.mutation.Name(); ok {
		_spec.SetField(warnpush.FieldName, field.TypeString, value)
	}
	if value, ok := wpu.mutation.GetType(); ok {
		_spec.SetField(warnpush.FieldType, field.TypeEnum, value)
	}
	if value, ok := wpu.mutation.URL(); ok {
		_spec.SetField(warnpush.FieldURL, field.TypeString, value)
	}
	if value, ok := wpu.mutation.Remark(); ok {
		_spec.SetField(warnpush.FieldRemark, field.TypeString, value)
	}
	if value, ok := wpu.mutation.Mode(); ok {
		_spec.SetField(warnpush.FieldMode, field.TypeEnum, value)
	}
	if value, ok := wpu.mutation.Status(); ok {
		_spec.SetField(warnpush.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(wpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnpush.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wpu.mutation.done = true
	return n, nil
}

// WarnPushUpdateOne is the builder for updating a single WarnPush entity.
type WarnPushUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarnPushMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wpuo *WarnPushUpdateOne) SetUpdatedAt(t time.Time) *WarnPushUpdateOne {
	wpuo.mutation.SetUpdatedAt(t)
	return wpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wpuo *WarnPushUpdateOne) SetDeletedAt(t time.Time) *WarnPushUpdateOne {
	wpuo.mutation.SetDeletedAt(t)
	return wpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableDeletedAt(t *time.Time) *WarnPushUpdateOne {
	if t != nil {
		wpuo.SetDeletedAt(*t)
	}
	return wpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wpuo *WarnPushUpdateOne) ClearDeletedAt() *WarnPushUpdateOne {
	wpuo.mutation.ClearDeletedAt()
	return wpuo
}

// SetTenantID sets the "tenant_id" field.
func (wpuo *WarnPushUpdateOne) SetTenantID(s string) *WarnPushUpdateOne {
	wpuo.mutation.SetTenantID(s)
	return wpuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableTenantID(s *string) *WarnPushUpdateOne {
	if s != nil {
		wpuo.SetTenantID(*s)
	}
	return wpuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (wpuo *WarnPushUpdateOne) ClearTenantID() *WarnPushUpdateOne {
	wpuo.mutation.ClearTenantID()
	return wpuo
}

// SetAccessOrgList sets the "access_org_list" field.
func (wpuo *WarnPushUpdateOne) SetAccessOrgList(s string) *WarnPushUpdateOne {
	wpuo.mutation.SetAccessOrgList(s)
	return wpuo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableAccessOrgList(s *string) *WarnPushUpdateOne {
	if s != nil {
		wpuo.SetAccessOrgList(*s)
	}
	return wpuo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (wpuo *WarnPushUpdateOne) ClearAccessOrgList() *WarnPushUpdateOne {
	wpuo.mutation.ClearAccessOrgList()
	return wpuo
}

// SetName sets the "name" field.
func (wpuo *WarnPushUpdateOne) SetName(s string) *WarnPushUpdateOne {
	wpuo.mutation.SetName(s)
	return wpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableName(s *string) *WarnPushUpdateOne {
	if s != nil {
		wpuo.SetName(*s)
	}
	return wpuo
}

// SetType sets the "type" field.
func (wpuo *WarnPushUpdateOne) SetType(bpt biz.WarnPushType) *WarnPushUpdateOne {
	wpuo.mutation.SetType(bpt)
	return wpuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableType(bpt *biz.WarnPushType) *WarnPushUpdateOne {
	if bpt != nil {
		wpuo.SetType(*bpt)
	}
	return wpuo
}

// SetURL sets the "url" field.
func (wpuo *WarnPushUpdateOne) SetURL(s string) *WarnPushUpdateOne {
	wpuo.mutation.SetURL(s)
	return wpuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableURL(s *string) *WarnPushUpdateOne {
	if s != nil {
		wpuo.SetURL(*s)
	}
	return wpuo
}

// SetRemark sets the "remark" field.
func (wpuo *WarnPushUpdateOne) SetRemark(s string) *WarnPushUpdateOne {
	wpuo.mutation.SetRemark(s)
	return wpuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableRemark(s *string) *WarnPushUpdateOne {
	if s != nil {
		wpuo.SetRemark(*s)
	}
	return wpuo
}

// SetMode sets the "mode" field.
func (wpuo *WarnPushUpdateOne) SetMode(bpm biz.WarnPushMode) *WarnPushUpdateOne {
	wpuo.mutation.SetMode(bpm)
	return wpuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableMode(bpm *biz.WarnPushMode) *WarnPushUpdateOne {
	if bpm != nil {
		wpuo.SetMode(*bpm)
	}
	return wpuo
}

// SetStatus sets the "status" field.
func (wpuo *WarnPushUpdateOne) SetStatus(bps biz.WarnPushStatus) *WarnPushUpdateOne {
	wpuo.mutation.SetStatus(bps)
	return wpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wpuo *WarnPushUpdateOne) SetNillableStatus(bps *biz.WarnPushStatus) *WarnPushUpdateOne {
	if bps != nil {
		wpuo.SetStatus(*bps)
	}
	return wpuo
}

// Mutation returns the WarnPushMutation object of the builder.
func (wpuo *WarnPushUpdateOne) Mutation() *WarnPushMutation {
	return wpuo.mutation
}

// Where appends a list predicates to the WarnPushUpdate builder.
func (wpuo *WarnPushUpdateOne) Where(ps ...predicate.WarnPush) *WarnPushUpdateOne {
	wpuo.mutation.Where(ps...)
	return wpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wpuo *WarnPushUpdateOne) Select(field string, fields ...string) *WarnPushUpdateOne {
	wpuo.fields = append([]string{field}, fields...)
	return wpuo
}

// Save executes the query and returns the updated WarnPush entity.
func (wpuo *WarnPushUpdateOne) Save(ctx context.Context) (*WarnPush, error) {
	if err := wpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wpuo.sqlSave, wpuo.mutation, wpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wpuo *WarnPushUpdateOne) SaveX(ctx context.Context) *WarnPush {
	node, err := wpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wpuo *WarnPushUpdateOne) Exec(ctx context.Context) error {
	_, err := wpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpuo *WarnPushUpdateOne) ExecX(ctx context.Context) {
	if err := wpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpuo *WarnPushUpdateOne) defaults() error {
	if _, ok := wpuo.mutation.UpdatedAt(); !ok {
		if warnpush.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnpush.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnpush.UpdateDefaultUpdatedAt()
		wpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wpuo *WarnPushUpdateOne) check() error {
	if v, ok := wpuo.mutation.GetType(); ok {
		if err := warnpush.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WarnPush.type": %w`, err)}
		}
	}
	if v, ok := wpuo.mutation.Mode(); ok {
		if err := warnpush.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "WarnPush.mode": %w`, err)}
		}
	}
	if v, ok := wpuo.mutation.Status(); ok {
		if err := warnpush.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WarnPush.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wpuo *WarnPushUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarnPushUpdateOne {
	wpuo.modifiers = append(wpuo.modifiers, modifiers...)
	return wpuo
}

func (wpuo *WarnPushUpdateOne) sqlSave(ctx context.Context) (_node *WarnPush, err error) {
	if err := wpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(warnpush.Table, warnpush.Columns, sqlgraph.NewFieldSpec(warnpush.FieldID, field.TypeUint64))
	id, ok := wpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WarnPush.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warnpush.FieldID)
		for _, f := range fields {
			if !warnpush.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warnpush.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warnpush.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wpuo.mutation.DeletedAt(); ok {
		_spec.SetField(warnpush.FieldDeletedAt, field.TypeTime, value)
	}
	if wpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(warnpush.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wpuo.mutation.TenantID(); ok {
		_spec.SetField(warnpush.FieldTenantID, field.TypeString, value)
	}
	if wpuo.mutation.TenantIDCleared() {
		_spec.ClearField(warnpush.FieldTenantID, field.TypeString)
	}
	if value, ok := wpuo.mutation.AccessOrgList(); ok {
		_spec.SetField(warnpush.FieldAccessOrgList, field.TypeString, value)
	}
	if wpuo.mutation.AccessOrgListCleared() {
		_spec.ClearField(warnpush.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := wpuo.mutation.Name(); ok {
		_spec.SetField(warnpush.FieldName, field.TypeString, value)
	}
	if value, ok := wpuo.mutation.GetType(); ok {
		_spec.SetField(warnpush.FieldType, field.TypeEnum, value)
	}
	if value, ok := wpuo.mutation.URL(); ok {
		_spec.SetField(warnpush.FieldURL, field.TypeString, value)
	}
	if value, ok := wpuo.mutation.Remark(); ok {
		_spec.SetField(warnpush.FieldRemark, field.TypeString, value)
	}
	if value, ok := wpuo.mutation.Mode(); ok {
		_spec.SetField(warnpush.FieldMode, field.TypeEnum, value)
	}
	if value, ok := wpuo.mutation.Status(); ok {
		_spec.SetField(warnpush.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(wpuo.modifiers...)
	_node = &WarnPush{config: wpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warnpush.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wpuo.mutation.done = true
	return _node, nil
}
