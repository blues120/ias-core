// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/warnpush"
	"github.com/blues120/ias-core/data/ent/warnpushlog"
)

// WarnPushLog is the model entity for the WarnPushLog schema.
type WarnPushLog struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// 授权的组织 id 列表，#分隔
	AccessOrgList string `json:"access_org_list,omitempty"`
	// 推送id
	PushID uint64 `json:"push_id,omitempty"`
	// 推送参数
	Param string `json:"param,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 推送状态
	Status biz.WarnPushLogStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarnPushLogQuery when eager-loading is set.
	Edges        WarnPushLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WarnPushLogEdges holds the relations/edges for other nodes in the graph.
type WarnPushLogEdges struct {
	// Push holds the value of the push edge.
	Push *WarnPush `json:"push,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PushOrErr returns the Push value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarnPushLogEdges) PushOrErr() (*WarnPush, error) {
	if e.loadedTypes[0] {
		if e.Push == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: warnpush.Label}
		}
		return e.Push, nil
	}
	return nil, &NotLoadedError{edge: "push"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WarnPushLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warnpushlog.FieldID, warnpushlog.FieldPushID:
			values[i] = new(sql.NullInt64)
		case warnpushlog.FieldTenantID, warnpushlog.FieldAccessOrgList, warnpushlog.FieldParam, warnpushlog.FieldRemark, warnpushlog.FieldStatus:
			values[i] = new(sql.NullString)
		case warnpushlog.FieldCreatedAt, warnpushlog.FieldUpdatedAt, warnpushlog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WarnPushLog fields.
func (wpl *WarnPushLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warnpushlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wpl.ID = uint64(value.Int64)
		case warnpushlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wpl.CreatedAt = value.Time
			}
		case warnpushlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wpl.UpdatedAt = value.Time
			}
		case warnpushlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wpl.DeletedAt = value.Time
			}
		case warnpushlog.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				wpl.TenantID = value.String
			}
		case warnpushlog.FieldAccessOrgList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_org_list", values[i])
			} else if value.Valid {
				wpl.AccessOrgList = value.String
			}
		case warnpushlog.FieldPushID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field push_id", values[i])
			} else if value.Valid {
				wpl.PushID = uint64(value.Int64)
			}
		case warnpushlog.FieldParam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field param", values[i])
			} else if value.Valid {
				wpl.Param = value.String
			}
		case warnpushlog.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				wpl.Remark = value.String
			}
		case warnpushlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wpl.Status = biz.WarnPushLogStatus(value.String)
			}
		default:
			wpl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WarnPushLog.
// This includes values selected through modifiers, order, etc.
func (wpl *WarnPushLog) Value(name string) (ent.Value, error) {
	return wpl.selectValues.Get(name)
}

// QueryPush queries the "push" edge of the WarnPushLog entity.
func (wpl *WarnPushLog) QueryPush() *WarnPushQuery {
	return NewWarnPushLogClient(wpl.config).QueryPush(wpl)
}

// Update returns a builder for updating this WarnPushLog.
// Note that you need to call WarnPushLog.Unwrap() before calling this method if this WarnPushLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (wpl *WarnPushLog) Update() *WarnPushLogUpdateOne {
	return NewWarnPushLogClient(wpl.config).UpdateOne(wpl)
}

// Unwrap unwraps the WarnPushLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wpl *WarnPushLog) Unwrap() *WarnPushLog {
	_tx, ok := wpl.config.driver.(*txDriver)
	if !ok {
		panic("ent: WarnPushLog is not a transactional entity")
	}
	wpl.config.driver = _tx.drv
	return wpl
}

// String implements the fmt.Stringer.
func (wpl *WarnPushLog) String() string {
	var builder strings.Builder
	builder.WriteString("WarnPushLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wpl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wpl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wpl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(wpl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(wpl.TenantID)
	builder.WriteString(", ")
	builder.WriteString("access_org_list=")
	builder.WriteString(wpl.AccessOrgList)
	builder.WriteString(", ")
	builder.WriteString("push_id=")
	builder.WriteString(fmt.Sprintf("%v", wpl.PushID))
	builder.WriteString(", ")
	builder.WriteString("param=")
	builder.WriteString(wpl.Param)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(wpl.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wpl.Status))
	builder.WriteByte(')')
	return builder.String()
}

// WarnPushLogs is a parsable slice of WarnPushLog.
type WarnPushLogs []*WarnPushLog
