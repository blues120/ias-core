// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/devicealgo"
)

// DeviceAlgo is the model entity for the DeviceAlgo schema.
type DeviceAlgo struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 设备id
	DeviceID uint64 `json:"device_id,omitempty"`
	// 算法组ID
	AlgoGroupID uint `json:"algo_group_id,omitempty"`
	// 算法组name(如十二合一算法)，前端显示用
	AlgoGroupName string `json:"algo_group_name,omitempty"`
	// 算法组版本号，用于算法组整体更新场景
	AlgoGroupVersion string `json:"algo_group_version,omitempty"`
	// 算法名称
	Name string `json:"name,omitempty"`
	// 算法版本
	Version string `json:"version,omitempty"`
	// 安装时间
	InstallTime  time.Time `json:"install_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceAlgo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicealgo.FieldID, devicealgo.FieldDeviceID, devicealgo.FieldAlgoGroupID:
			values[i] = new(sql.NullInt64)
		case devicealgo.FieldAlgoGroupName, devicealgo.FieldAlgoGroupVersion, devicealgo.FieldName, devicealgo.FieldVersion:
			values[i] = new(sql.NullString)
		case devicealgo.FieldInstallTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceAlgo fields.
func (da *DeviceAlgo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicealgo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			da.ID = uint64(value.Int64)
		case devicealgo.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				da.DeviceID = uint64(value.Int64)
			}
		case devicealgo.FieldAlgoGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_id", values[i])
			} else if value.Valid {
				da.AlgoGroupID = uint(value.Int64)
			}
		case devicealgo.FieldAlgoGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_name", values[i])
			} else if value.Valid {
				da.AlgoGroupName = value.String
			}
		case devicealgo.FieldAlgoGroupVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algo_group_version", values[i])
			} else if value.Valid {
				da.AlgoGroupVersion = value.String
			}
		case devicealgo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				da.Name = value.String
			}
		case devicealgo.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				da.Version = value.String
			}
		case devicealgo.FieldInstallTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field install_time", values[i])
			} else if value.Valid {
				da.InstallTime = value.Time
			}
		default:
			da.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceAlgo.
// This includes values selected through modifiers, order, etc.
func (da *DeviceAlgo) Value(name string) (ent.Value, error) {
	return da.selectValues.Get(name)
}

// Update returns a builder for updating this DeviceAlgo.
// Note that you need to call DeviceAlgo.Unwrap() before calling this method if this DeviceAlgo
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DeviceAlgo) Update() *DeviceAlgoUpdateOne {
	return NewDeviceAlgoClient(da.config).UpdateOne(da)
}

// Unwrap unwraps the DeviceAlgo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DeviceAlgo) Unwrap() *DeviceAlgo {
	_tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceAlgo is not a transactional entity")
	}
	da.config.driver = _tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DeviceAlgo) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceAlgo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", da.ID))
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", da.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("algo_group_id=")
	builder.WriteString(fmt.Sprintf("%v", da.AlgoGroupID))
	builder.WriteString(", ")
	builder.WriteString("algo_group_name=")
	builder.WriteString(da.AlgoGroupName)
	builder.WriteString(", ")
	builder.WriteString("algo_group_version=")
	builder.WriteString(da.AlgoGroupVersion)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(da.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(da.Version)
	builder.WriteString(", ")
	builder.WriteString("install_time=")
	builder.WriteString(da.InstallTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceAlgos is a parsable slice of DeviceAlgo.
type DeviceAlgos []*DeviceAlgo
