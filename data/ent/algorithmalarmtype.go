// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/algorithmalarmtype"
)

// AlgorithmAlarmType is the model entity for the AlgorithmAlarmType schema.
type AlgorithmAlarmType struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 告警类型
	TypeName     string `json:"type_name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlgorithmAlarmType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case algorithmalarmtype.FieldID:
			values[i] = new(sql.NullInt64)
		case algorithmalarmtype.FieldTypeName:
			values[i] = new(sql.NullString)
		case algorithmalarmtype.FieldCreatedAt, algorithmalarmtype.FieldUpdatedAt, algorithmalarmtype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlgorithmAlarmType fields.
func (aat *AlgorithmAlarmType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case algorithmalarmtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aat.ID = uint64(value.Int64)
		case algorithmalarmtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aat.CreatedAt = value.Time
			}
		case algorithmalarmtype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aat.UpdatedAt = value.Time
			}
		case algorithmalarmtype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aat.DeletedAt = value.Time
			}
		case algorithmalarmtype.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_name", values[i])
			} else if value.Valid {
				aat.TypeName = value.String
			}
		default:
			aat.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlgorithmAlarmType.
// This includes values selected through modifiers, order, etc.
func (aat *AlgorithmAlarmType) Value(name string) (ent.Value, error) {
	return aat.selectValues.Get(name)
}

// Update returns a builder for updating this AlgorithmAlarmType.
// Note that you need to call AlgorithmAlarmType.Unwrap() before calling this method if this AlgorithmAlarmType
// was returned from a transaction, and the transaction was committed or rolled back.
func (aat *AlgorithmAlarmType) Update() *AlgorithmAlarmTypeUpdateOne {
	return NewAlgorithmAlarmTypeClient(aat.config).UpdateOne(aat)
}

// Unwrap unwraps the AlgorithmAlarmType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aat *AlgorithmAlarmType) Unwrap() *AlgorithmAlarmType {
	_tx, ok := aat.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlgorithmAlarmType is not a transactional entity")
	}
	aat.config.driver = _tx.drv
	return aat
}

// String implements the fmt.Stringer.
func (aat *AlgorithmAlarmType) String() string {
	var builder strings.Builder
	builder.WriteString("AlgorithmAlarmType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aat.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aat.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aat.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(aat.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type_name=")
	builder.WriteString(aat.TypeName)
	builder.WriteByte(')')
	return builder.String()
}

// AlgorithmAlarmTypes is a parsable slice of AlgorithmAlarmType.
type AlgorithmAlarmTypes []*AlgorithmAlarmType
