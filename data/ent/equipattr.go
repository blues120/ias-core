// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/equipattr"
)

// EquipAttr is the model entity for the EquipAttr schema.
type EquipAttr struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 属性key
	AttrKey string `json:"attr_key,omitempty"`
	// 属性值
	AttrValue string `json:"attr_value,omitempty"`
	// 扩展字段
	Extend       string `json:"extend,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipAttr) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipattr.FieldID:
			values[i] = new(sql.NullInt64)
		case equipattr.FieldAttrKey, equipattr.FieldAttrValue, equipattr.FieldExtend:
			values[i] = new(sql.NullString)
		case equipattr.FieldCreatedAt, equipattr.FieldUpdatedAt, equipattr.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipAttr fields.
func (ea *EquipAttr) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipattr.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = uint64(value.Int64)
		case equipattr.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case equipattr.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		case equipattr.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ea.DeletedAt = value.Time
			}
		case equipattr.FieldAttrKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr_key", values[i])
			} else if value.Valid {
				ea.AttrKey = value.String
			}
		case equipattr.FieldAttrValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr_value", values[i])
			} else if value.Valid {
				ea.AttrValue = value.String
			}
		case equipattr.FieldExtend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extend", values[i])
			} else if value.Valid {
				ea.Extend = value.String
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EquipAttr.
// This includes values selected through modifiers, order, etc.
func (ea *EquipAttr) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// Update returns a builder for updating this EquipAttr.
// Note that you need to call EquipAttr.Unwrap() before calling this method if this EquipAttr
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EquipAttr) Update() *EquipAttrUpdateOne {
	return NewEquipAttrClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EquipAttr entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EquipAttr) Unwrap() *EquipAttr {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EquipAttr is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EquipAttr) String() string {
	var builder strings.Builder
	builder.WriteString("EquipAttr(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ea.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attr_key=")
	builder.WriteString(ea.AttrKey)
	builder.WriteString(", ")
	builder.WriteString("attr_value=")
	builder.WriteString(ea.AttrValue)
	builder.WriteString(", ")
	builder.WriteString("extend=")
	builder.WriteString(ea.Extend)
	builder.WriteByte(')')
	return builder.String()
}

// EquipAttrs is a parsable slice of EquipAttr.
type EquipAttrs []*EquipAttr
