// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/warnsmserr"
)

// WarnSmsErrCreate is the builder for creating a WarnSmsErr entity.
type WarnSmsErrCreate struct {
	config
	mutation *WarnSmsErrMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wsec *WarnSmsErrCreate) SetCreatedAt(t time.Time) *WarnSmsErrCreate {
	wsec.mutation.SetCreatedAt(t)
	return wsec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsec *WarnSmsErrCreate) SetNillableCreatedAt(t *time.Time) *WarnSmsErrCreate {
	if t != nil {
		wsec.SetCreatedAt(*t)
	}
	return wsec
}

// SetUpdatedAt sets the "updated_at" field.
func (wsec *WarnSmsErrCreate) SetUpdatedAt(t time.Time) *WarnSmsErrCreate {
	wsec.mutation.SetUpdatedAt(t)
	return wsec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wsec *WarnSmsErrCreate) SetNillableUpdatedAt(t *time.Time) *WarnSmsErrCreate {
	if t != nil {
		wsec.SetUpdatedAt(*t)
	}
	return wsec
}

// SetTenantID sets the "tenant_id" field.
func (wsec *WarnSmsErrCreate) SetTenantID(s string) *WarnSmsErrCreate {
	wsec.mutation.SetTenantID(s)
	return wsec
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wsec *WarnSmsErrCreate) SetNillableTenantID(s *string) *WarnSmsErrCreate {
	if s != nil {
		wsec.SetTenantID(*s)
	}
	return wsec
}

// SetAccessOrgList sets the "access_org_list" field.
func (wsec *WarnSmsErrCreate) SetAccessOrgList(s string) *WarnSmsErrCreate {
	wsec.mutation.SetAccessOrgList(s)
	return wsec
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (wsec *WarnSmsErrCreate) SetNillableAccessOrgList(s *string) *WarnSmsErrCreate {
	if s != nil {
		wsec.SetAccessOrgList(*s)
	}
	return wsec
}

// SetAppName sets the "app_name" field.
func (wsec *WarnSmsErrCreate) SetAppName(s string) *WarnSmsErrCreate {
	wsec.mutation.SetAppName(s)
	return wsec
}

// SetRecordID sets the "record_id" field.
func (wsec *WarnSmsErrCreate) SetRecordID(u uint64) *WarnSmsErrCreate {
	wsec.mutation.SetRecordID(u)
	return wsec
}

// SetErrorMsg sets the "error_msg" field.
func (wsec *WarnSmsErrCreate) SetErrorMsg(s string) *WarnSmsErrCreate {
	wsec.mutation.SetErrorMsg(s)
	return wsec
}

// SetID sets the "id" field.
func (wsec *WarnSmsErrCreate) SetID(u uint64) *WarnSmsErrCreate {
	wsec.mutation.SetID(u)
	return wsec
}

// Mutation returns the WarnSmsErrMutation object of the builder.
func (wsec *WarnSmsErrCreate) Mutation() *WarnSmsErrMutation {
	return wsec.mutation
}

// Save creates the WarnSmsErr in the database.
func (wsec *WarnSmsErrCreate) Save(ctx context.Context) (*WarnSmsErr, error) {
	if err := wsec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wsec.sqlSave, wsec.mutation, wsec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsec *WarnSmsErrCreate) SaveX(ctx context.Context) *WarnSmsErr {
	v, err := wsec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsec *WarnSmsErrCreate) Exec(ctx context.Context) error {
	_, err := wsec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsec *WarnSmsErrCreate) ExecX(ctx context.Context) {
	if err := wsec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsec *WarnSmsErrCreate) defaults() error {
	if _, ok := wsec.mutation.CreatedAt(); !ok {
		if warnsmserr.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnsmserr.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := warnsmserr.DefaultCreatedAt()
		wsec.mutation.SetCreatedAt(v)
	}
	if _, ok := wsec.mutation.UpdatedAt(); !ok {
		if warnsmserr.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warnsmserr.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warnsmserr.DefaultUpdatedAt()
		wsec.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wsec *WarnSmsErrCreate) check() error {
	if _, ok := wsec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WarnSmsErr.created_at"`)}
	}
	if _, ok := wsec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WarnSmsErr.updated_at"`)}
	}
	if _, ok := wsec.mutation.AppName(); !ok {
		return &ValidationError{Name: "app_name", err: errors.New(`ent: missing required field "WarnSmsErr.app_name"`)}
	}
	if _, ok := wsec.mutation.RecordID(); !ok {
		return &ValidationError{Name: "record_id", err: errors.New(`ent: missing required field "WarnSmsErr.record_id"`)}
	}
	if _, ok := wsec.mutation.ErrorMsg(); !ok {
		return &ValidationError{Name: "error_msg", err: errors.New(`ent: missing required field "WarnSmsErr.error_msg"`)}
	}
	return nil
}

func (wsec *WarnSmsErrCreate) sqlSave(ctx context.Context) (*WarnSmsErr, error) {
	if err := wsec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	wsec.mutation.id = &_node.ID
	wsec.mutation.done = true
	return _node, nil
}

func (wsec *WarnSmsErrCreate) createSpec() (*WarnSmsErr, *sqlgraph.CreateSpec) {
	var (
		_node = &WarnSmsErr{config: wsec.config}
		_spec = sqlgraph.NewCreateSpec(warnsmserr.Table, sqlgraph.NewFieldSpec(warnsmserr.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = wsec.conflict
	if id, ok := wsec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wsec.mutation.CreatedAt(); ok {
		_spec.SetField(warnsmserr.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wsec.mutation.UpdatedAt(); ok {
		_spec.SetField(warnsmserr.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wsec.mutation.TenantID(); ok {
		_spec.SetField(warnsmserr.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := wsec.mutation.AccessOrgList(); ok {
		_spec.SetField(warnsmserr.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := wsec.mutation.AppName(); ok {
		_spec.SetField(warnsmserr.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := wsec.mutation.RecordID(); ok {
		_spec.SetField(warnsmserr.FieldRecordID, field.TypeUint64, value)
		_node.RecordID = value
	}
	if value, ok := wsec.mutation.ErrorMsg(); ok {
		_spec.SetField(warnsmserr.FieldErrorMsg, field.TypeString, value)
		_node.ErrorMsg = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnSmsErr.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnSmsErrUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wsec *WarnSmsErrCreate) OnConflict(opts ...sql.ConflictOption) *WarnSmsErrUpsertOne {
	wsec.conflict = opts
	return &WarnSmsErrUpsertOne{
		create: wsec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsec *WarnSmsErrCreate) OnConflictColumns(columns ...string) *WarnSmsErrUpsertOne {
	wsec.conflict = append(wsec.conflict, sql.ConflictColumns(columns...))
	return &WarnSmsErrUpsertOne{
		create: wsec,
	}
}

type (
	// WarnSmsErrUpsertOne is the builder for "upsert"-ing
	//  one WarnSmsErr node.
	WarnSmsErrUpsertOne struct {
		create *WarnSmsErrCreate
	}

	// WarnSmsErrUpsert is the "OnConflict" setter.
	WarnSmsErrUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnSmsErrUpsert) SetUpdatedAt(v time.Time) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateUpdatedAt() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldUpdatedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnSmsErrUpsert) SetTenantID(v string) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateTenantID() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnSmsErrUpsert) ClearTenantID() *WarnSmsErrUpsert {
	u.SetNull(warnsmserr.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnSmsErrUpsert) SetAccessOrgList(v string) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateAccessOrgList() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnSmsErrUpsert) ClearAccessOrgList() *WarnSmsErrUpsert {
	u.SetNull(warnsmserr.FieldAccessOrgList)
	return u
}

// SetAppName sets the "app_name" field.
func (u *WarnSmsErrUpsert) SetAppName(v string) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldAppName, v)
	return u
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateAppName() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldAppName)
	return u
}

// SetRecordID sets the "record_id" field.
func (u *WarnSmsErrUpsert) SetRecordID(v uint64) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldRecordID, v)
	return u
}

// UpdateRecordID sets the "record_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateRecordID() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldRecordID)
	return u
}

// AddRecordID adds v to the "record_id" field.
func (u *WarnSmsErrUpsert) AddRecordID(v uint64) *WarnSmsErrUpsert {
	u.Add(warnsmserr.FieldRecordID, v)
	return u
}

// SetErrorMsg sets the "error_msg" field.
func (u *WarnSmsErrUpsert) SetErrorMsg(v string) *WarnSmsErrUpsert {
	u.Set(warnsmserr.FieldErrorMsg, v)
	return u
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *WarnSmsErrUpsert) UpdateErrorMsg() *WarnSmsErrUpsert {
	u.SetExcluded(warnsmserr.FieldErrorMsg)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnsmserr.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnSmsErrUpsertOne) UpdateNewValues() *WarnSmsErrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(warnsmserr.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warnsmserr.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarnSmsErrUpsertOne) Ignore() *WarnSmsErrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnSmsErrUpsertOne) DoNothing() *WarnSmsErrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnSmsErrCreate.OnConflict
// documentation for more info.
func (u *WarnSmsErrUpsertOne) Update(set func(*WarnSmsErrUpsert)) *WarnSmsErrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnSmsErrUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnSmsErrUpsertOne) SetUpdatedAt(v time.Time) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateUpdatedAt() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnSmsErrUpsertOne) SetTenantID(v string) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateTenantID() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnSmsErrUpsertOne) ClearTenantID() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnSmsErrUpsertOne) SetAccessOrgList(v string) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateAccessOrgList() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnSmsErrUpsertOne) ClearAccessOrgList() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetAppName sets the "app_name" field.
func (u *WarnSmsErrUpsertOne) SetAppName(v string) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateAppName() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateAppName()
	})
}

// SetRecordID sets the "record_id" field.
func (u *WarnSmsErrUpsertOne) SetRecordID(v uint64) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetRecordID(v)
	})
}

// AddRecordID adds v to the "record_id" field.
func (u *WarnSmsErrUpsertOne) AddRecordID(v uint64) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.AddRecordID(v)
	})
}

// UpdateRecordID sets the "record_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateRecordID() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateRecordID()
	})
}

// SetErrorMsg sets the "error_msg" field.
func (u *WarnSmsErrUpsertOne) SetErrorMsg(v string) *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetErrorMsg(v)
	})
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *WarnSmsErrUpsertOne) UpdateErrorMsg() *WarnSmsErrUpsertOne {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateErrorMsg()
	})
}

// Exec executes the query.
func (u *WarnSmsErrUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnSmsErrCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnSmsErrUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarnSmsErrUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarnSmsErrUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarnSmsErrCreateBulk is the builder for creating many WarnSmsErr entities in bulk.
type WarnSmsErrCreateBulk struct {
	config
	err      error
	builders []*WarnSmsErrCreate
	conflict []sql.ConflictOption
}

// Save creates the WarnSmsErr entities in the database.
func (wsecb *WarnSmsErrCreateBulk) Save(ctx context.Context) ([]*WarnSmsErr, error) {
	if wsecb.err != nil {
		return nil, wsecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wsecb.builders))
	nodes := make([]*WarnSmsErr, len(wsecb.builders))
	mutators := make([]Mutator, len(wsecb.builders))
	for i := range wsecb.builders {
		func(i int, root context.Context) {
			builder := wsecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarnSmsErrMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wsecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wsecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wsecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wsecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wsecb *WarnSmsErrCreateBulk) SaveX(ctx context.Context) []*WarnSmsErr {
	v, err := wsecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsecb *WarnSmsErrCreateBulk) Exec(ctx context.Context) error {
	_, err := wsecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsecb *WarnSmsErrCreateBulk) ExecX(ctx context.Context) {
	if err := wsecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WarnSmsErr.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarnSmsErrUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wsecb *WarnSmsErrCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarnSmsErrUpsertBulk {
	wsecb.conflict = opts
	return &WarnSmsErrUpsertBulk{
		create: wsecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsecb *WarnSmsErrCreateBulk) OnConflictColumns(columns ...string) *WarnSmsErrUpsertBulk {
	wsecb.conflict = append(wsecb.conflict, sql.ConflictColumns(columns...))
	return &WarnSmsErrUpsertBulk{
		create: wsecb,
	}
}

// WarnSmsErrUpsertBulk is the builder for "upsert"-ing
// a bulk of WarnSmsErr nodes.
type WarnSmsErrUpsertBulk struct {
	create *WarnSmsErrCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warnsmserr.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarnSmsErrUpsertBulk) UpdateNewValues() *WarnSmsErrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(warnsmserr.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warnsmserr.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WarnSmsErr.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarnSmsErrUpsertBulk) Ignore() *WarnSmsErrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarnSmsErrUpsertBulk) DoNothing() *WarnSmsErrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarnSmsErrCreateBulk.OnConflict
// documentation for more info.
func (u *WarnSmsErrUpsertBulk) Update(set func(*WarnSmsErrUpsert)) *WarnSmsErrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarnSmsErrUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarnSmsErrUpsertBulk) SetUpdatedAt(v time.Time) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateUpdatedAt() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *WarnSmsErrUpsertBulk) SetTenantID(v string) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateTenantID() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *WarnSmsErrUpsertBulk) ClearTenantID() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *WarnSmsErrUpsertBulk) SetAccessOrgList(v string) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateAccessOrgList() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *WarnSmsErrUpsertBulk) ClearAccessOrgList() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetAppName sets the "app_name" field.
func (u *WarnSmsErrUpsertBulk) SetAppName(v string) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateAppName() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateAppName()
	})
}

// SetRecordID sets the "record_id" field.
func (u *WarnSmsErrUpsertBulk) SetRecordID(v uint64) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetRecordID(v)
	})
}

// AddRecordID adds v to the "record_id" field.
func (u *WarnSmsErrUpsertBulk) AddRecordID(v uint64) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.AddRecordID(v)
	})
}

// UpdateRecordID sets the "record_id" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateRecordID() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateRecordID()
	})
}

// SetErrorMsg sets the "error_msg" field.
func (u *WarnSmsErrUpsertBulk) SetErrorMsg(v string) *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.SetErrorMsg(v)
	})
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *WarnSmsErrUpsertBulk) UpdateErrorMsg() *WarnSmsErrUpsertBulk {
	return u.Update(func(s *WarnSmsErrUpsert) {
		s.UpdateErrorMsg()
	})
}

// Exec executes the query.
func (u *WarnSmsErrUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WarnSmsErrCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarnSmsErrCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarnSmsErrUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
