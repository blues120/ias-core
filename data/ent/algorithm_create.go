// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/algorithm"
	"github.com/blues120/ias-core/data/ent/task"
)

// AlgorithmCreate is the builder for creating a Algorithm entity.
type AlgorithmCreate struct {
	config
	mutation *AlgorithmMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AlgorithmCreate) SetCreatedAt(t time.Time) *AlgorithmCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableCreatedAt(t *time.Time) *AlgorithmCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AlgorithmCreate) SetUpdatedAt(t time.Time) *AlgorithmCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableUpdatedAt(t *time.Time) *AlgorithmCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AlgorithmCreate) SetDeletedAt(t time.Time) *AlgorithmCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableDeletedAt(t *time.Time) *AlgorithmCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AlgorithmCreate) SetName(s string) *AlgorithmCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AlgorithmCreate) SetType(s string) *AlgorithmCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AlgorithmCreate) SetDescription(s string) *AlgorithmCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetVersion sets the "version" field.
func (ac *AlgorithmCreate) SetVersion(s string) *AlgorithmCreate {
	ac.mutation.SetVersion(s)
	return ac
}

// SetAppName sets the "app_name" field.
func (ac *AlgorithmCreate) SetAppName(s string) *AlgorithmCreate {
	ac.mutation.SetAppName(s)
	return ac
}

// SetAlarmType sets the "alarm_type" field.
func (ac *AlgorithmCreate) SetAlarmType(s string) *AlgorithmCreate {
	ac.mutation.SetAlarmType(s)
	return ac
}

// SetAlarmName sets the "alarm_name" field.
func (ac *AlgorithmCreate) SetAlarmName(s string) *AlgorithmCreate {
	ac.mutation.SetAlarmName(s)
	return ac
}

// SetNotify sets the "notify" field.
func (ac *AlgorithmCreate) SetNotify(u uint) *AlgorithmCreate {
	ac.mutation.SetNotify(u)
	return ac
}

// SetExtend sets the "extend" field.
func (ac *AlgorithmCreate) SetExtend(m map[string]interface{}) *AlgorithmCreate {
	ac.mutation.SetExtend(m)
	return ac
}

// SetDrawType sets the "draw_type" field.
func (ac *AlgorithmCreate) SetDrawType(u uint) *AlgorithmCreate {
	ac.mutation.SetDrawType(u)
	return ac
}

// SetBaseType sets the "base_type" field.
func (ac *AlgorithmCreate) SetBaseType(u uint) *AlgorithmCreate {
	ac.mutation.SetBaseType(u)
	return ac
}

// SetAvailable sets the "available" field.
func (ac *AlgorithmCreate) SetAvailable(u uint) *AlgorithmCreate {
	ac.mutation.SetAvailable(u)
	return ac
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAvailable(u *uint) *AlgorithmCreate {
	if u != nil {
		ac.SetAvailable(*u)
	}
	return ac
}

// SetImage sets the "image" field.
func (ac *AlgorithmCreate) SetImage(s string) *AlgorithmCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetLabelMap sets the "label_map" field.
func (ac *AlgorithmCreate) SetLabelMap(s string) *AlgorithmCreate {
	ac.mutation.SetLabelMap(s)
	return ac
}

// SetNillableLabelMap sets the "label_map" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableLabelMap(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetLabelMap(*s)
	}
	return ac
}

// SetTarget sets the "target" field.
func (ac *AlgorithmCreate) SetTarget(s string) *AlgorithmCreate {
	ac.mutation.SetTarget(s)
	return ac
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableTarget(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetTarget(*s)
	}
	return ac
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (ac *AlgorithmCreate) SetAlgoNameEn(s string) *AlgorithmCreate {
	ac.mutation.SetAlgoNameEn(s)
	return ac
}

// SetNillableAlgoNameEn sets the "algo_name_en" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAlgoNameEn(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetAlgoNameEn(*s)
	}
	return ac
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (ac *AlgorithmCreate) SetAlgoGroupID(u uint) *AlgorithmCreate {
	ac.mutation.SetAlgoGroupID(u)
	return ac
}

// SetNillableAlgoGroupID sets the "algo_group_id" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAlgoGroupID(u *uint) *AlgorithmCreate {
	if u != nil {
		ac.SetAlgoGroupID(*u)
	}
	return ac
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (ac *AlgorithmCreate) SetAlgoGroupName(s string) *AlgorithmCreate {
	ac.mutation.SetAlgoGroupName(s)
	return ac
}

// SetNillableAlgoGroupName sets the "algo_group_name" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAlgoGroupName(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetAlgoGroupName(*s)
	}
	return ac
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (ac *AlgorithmCreate) SetAlgoGroupVersion(s string) *AlgorithmCreate {
	ac.mutation.SetAlgoGroupVersion(s)
	return ac
}

// SetNillableAlgoGroupVersion sets the "algo_group_version" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAlgoGroupVersion(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetAlgoGroupVersion(*s)
	}
	return ac
}

// SetConfig sets the "config" field.
func (ac *AlgorithmCreate) SetConfig(s string) *AlgorithmCreate {
	ac.mutation.SetConfig(s)
	return ac
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableConfig(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetConfig(*s)
	}
	return ac
}

// SetProvider sets the "provider" field.
func (ac *AlgorithmCreate) SetProvider(s string) *AlgorithmCreate {
	ac.mutation.SetProvider(s)
	return ac
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableProvider(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetProvider(*s)
	}
	return ac
}

// SetAlgoID sets the "algo_id" field.
func (ac *AlgorithmCreate) SetAlgoID(s string) *AlgorithmCreate {
	ac.mutation.SetAlgoID(s)
	return ac
}

// SetNillableAlgoID sets the "algo_id" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableAlgoID(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetAlgoID(*s)
	}
	return ac
}

// SetPlatform sets the "platform" field.
func (ac *AlgorithmCreate) SetPlatform(s string) *AlgorithmCreate {
	ac.mutation.SetPlatform(s)
	return ac
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillablePlatform(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetPlatform(*s)
	}
	return ac
}

// SetDeviceModel sets the "device_model" field.
func (ac *AlgorithmCreate) SetDeviceModel(s string) *AlgorithmCreate {
	ac.mutation.SetDeviceModel(s)
	return ac
}

// SetNillableDeviceModel sets the "device_model" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableDeviceModel(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetDeviceModel(*s)
	}
	return ac
}

// SetIsGroupType sets the "is_group_type" field.
func (ac *AlgorithmCreate) SetIsGroupType(u uint) *AlgorithmCreate {
	ac.mutation.SetIsGroupType(u)
	return ac
}

// SetNillableIsGroupType sets the "is_group_type" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillableIsGroupType(u *uint) *AlgorithmCreate {
	if u != nil {
		ac.SetIsGroupType(*u)
	}
	return ac
}

// SetPrefix sets the "prefix" field.
func (ac *AlgorithmCreate) SetPrefix(s string) *AlgorithmCreate {
	ac.mutation.SetPrefix(s)
	return ac
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (ac *AlgorithmCreate) SetNillablePrefix(s *string) *AlgorithmCreate {
	if s != nil {
		ac.SetPrefix(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AlgorithmCreate) SetID(u uint64) *AlgorithmCreate {
	ac.mutation.SetID(u)
	return ac
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ac *AlgorithmCreate) AddTaskIDs(ids ...uint64) *AlgorithmCreate {
	ac.mutation.AddTaskIDs(ids...)
	return ac
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ac *AlgorithmCreate) AddTasks(t ...*Task) *AlgorithmCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTaskIDs(ids...)
}

// Mutation returns the AlgorithmMutation object of the builder.
func (ac *AlgorithmCreate) Mutation() *AlgorithmMutation {
	return ac.mutation
}

// Save creates the Algorithm in the database.
func (ac *AlgorithmCreate) Save(ctx context.Context) (*Algorithm, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlgorithmCreate) SaveX(ctx context.Context) *Algorithm {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlgorithmCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlgorithmCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AlgorithmCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if algorithm.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithm.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := algorithm.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if algorithm.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized algorithm.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := algorithm.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Available(); !ok {
		v := algorithm.DefaultAvailable
		ac.mutation.SetAvailable(v)
	}
	if _, ok := ac.mutation.IsGroupType(); !ok {
		v := algorithm.DefaultIsGroupType
		ac.mutation.SetIsGroupType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlgorithmCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Algorithm.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Algorithm.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Algorithm.name"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Algorithm.type"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Algorithm.description"`)}
	}
	if _, ok := ac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Algorithm.version"`)}
	}
	if _, ok := ac.mutation.AppName(); !ok {
		return &ValidationError{Name: "app_name", err: errors.New(`ent: missing required field "Algorithm.app_name"`)}
	}
	if _, ok := ac.mutation.AlarmType(); !ok {
		return &ValidationError{Name: "alarm_type", err: errors.New(`ent: missing required field "Algorithm.alarm_type"`)}
	}
	if _, ok := ac.mutation.AlarmName(); !ok {
		return &ValidationError{Name: "alarm_name", err: errors.New(`ent: missing required field "Algorithm.alarm_name"`)}
	}
	if _, ok := ac.mutation.Notify(); !ok {
		return &ValidationError{Name: "notify", err: errors.New(`ent: missing required field "Algorithm.notify"`)}
	}
	if _, ok := ac.mutation.Extend(); !ok {
		return &ValidationError{Name: "extend", err: errors.New(`ent: missing required field "Algorithm.extend"`)}
	}
	if _, ok := ac.mutation.DrawType(); !ok {
		return &ValidationError{Name: "draw_type", err: errors.New(`ent: missing required field "Algorithm.draw_type"`)}
	}
	if _, ok := ac.mutation.BaseType(); !ok {
		return &ValidationError{Name: "base_type", err: errors.New(`ent: missing required field "Algorithm.base_type"`)}
	}
	if _, ok := ac.mutation.Available(); !ok {
		return &ValidationError{Name: "available", err: errors.New(`ent: missing required field "Algorithm.available"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Algorithm.image"`)}
	}
	if v, ok := ac.mutation.Image(); ok {
		if err := algorithm.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Algorithm.image": %w`, err)}
		}
	}
	if v, ok := ac.mutation.LabelMap(); ok {
		if err := algorithm.LabelMapValidator(v); err != nil {
			return &ValidationError{Name: "label_map", err: fmt.Errorf(`ent: validator failed for field "Algorithm.label_map": %w`, err)}
		}
	}
	return nil
}

func (ac *AlgorithmCreate) sqlSave(ctx context.Context) (*Algorithm, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AlgorithmCreate) createSpec() (*Algorithm, *sqlgraph.CreateSpec) {
	var (
		_node = &Algorithm{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(algorithm.Table, sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(algorithm.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(algorithm.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(algorithm.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(algorithm.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(algorithm.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(algorithm.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.SetField(algorithm.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ac.mutation.AppName(); ok {
		_spec.SetField(algorithm.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := ac.mutation.AlarmType(); ok {
		_spec.SetField(algorithm.FieldAlarmType, field.TypeString, value)
		_node.AlarmType = value
	}
	if value, ok := ac.mutation.AlarmName(); ok {
		_spec.SetField(algorithm.FieldAlarmName, field.TypeString, value)
		_node.AlarmName = value
	}
	if value, ok := ac.mutation.Notify(); ok {
		_spec.SetField(algorithm.FieldNotify, field.TypeUint, value)
		_node.Notify = value
	}
	if value, ok := ac.mutation.Extend(); ok {
		_spec.SetField(algorithm.FieldExtend, field.TypeJSON, value)
		_node.Extend = value
	}
	if value, ok := ac.mutation.DrawType(); ok {
		_spec.SetField(algorithm.FieldDrawType, field.TypeUint, value)
		_node.DrawType = value
	}
	if value, ok := ac.mutation.BaseType(); ok {
		_spec.SetField(algorithm.FieldBaseType, field.TypeUint, value)
		_node.BaseType = value
	}
	if value, ok := ac.mutation.Available(); ok {
		_spec.SetField(algorithm.FieldAvailable, field.TypeUint, value)
		_node.Available = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.SetField(algorithm.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ac.mutation.LabelMap(); ok {
		_spec.SetField(algorithm.FieldLabelMap, field.TypeString, value)
		_node.LabelMap = value
	}
	if value, ok := ac.mutation.Target(); ok {
		_spec.SetField(algorithm.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := ac.mutation.AlgoNameEn(); ok {
		_spec.SetField(algorithm.FieldAlgoNameEn, field.TypeString, value)
		_node.AlgoNameEn = value
	}
	if value, ok := ac.mutation.AlgoGroupID(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupID, field.TypeUint, value)
		_node.AlgoGroupID = value
	}
	if value, ok := ac.mutation.AlgoGroupName(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupName, field.TypeString, value)
		_node.AlgoGroupName = value
	}
	if value, ok := ac.mutation.AlgoGroupVersion(); ok {
		_spec.SetField(algorithm.FieldAlgoGroupVersion, field.TypeString, value)
		_node.AlgoGroupVersion = value
	}
	if value, ok := ac.mutation.Config(); ok {
		_spec.SetField(algorithm.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if value, ok := ac.mutation.Provider(); ok {
		_spec.SetField(algorithm.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := ac.mutation.AlgoID(); ok {
		_spec.SetField(algorithm.FieldAlgoID, field.TypeString, value)
		_node.AlgoID = value
	}
	if value, ok := ac.mutation.Platform(); ok {
		_spec.SetField(algorithm.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := ac.mutation.DeviceModel(); ok {
		_spec.SetField(algorithm.FieldDeviceModel, field.TypeString, value)
		_node.DeviceModel = value
	}
	if value, ok := ac.mutation.IsGroupType(); ok {
		_spec.SetField(algorithm.FieldIsGroupType, field.TypeUint, value)
		_node.IsGroupType = value
	}
	if value, ok := ac.mutation.Prefix(); ok {
		_spec.SetField(algorithm.FieldPrefix, field.TypeString, value)
		_node.Prefix = value
	}
	if nodes := ac.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   algorithm.TasksTable,
			Columns: []string{algorithm.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Algorithm.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlgorithmUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AlgorithmCreate) OnConflict(opts ...sql.ConflictOption) *AlgorithmUpsertOne {
	ac.conflict = opts
	return &AlgorithmUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AlgorithmCreate) OnConflictColumns(columns ...string) *AlgorithmUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AlgorithmUpsertOne{
		create: ac,
	}
}

type (
	// AlgorithmUpsertOne is the builder for "upsert"-ing
	//  one Algorithm node.
	AlgorithmUpsertOne struct {
		create *AlgorithmCreate
	}

	// AlgorithmUpsert is the "OnConflict" setter.
	AlgorithmUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AlgorithmUpsert) SetUpdatedAt(v time.Time) *AlgorithmUpsert {
	u.Set(algorithm.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateUpdatedAt() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AlgorithmUpsert) SetDeletedAt(v time.Time) *AlgorithmUpsert {
	u.Set(algorithm.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateDeletedAt() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AlgorithmUpsert) ClearDeletedAt() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *AlgorithmUpsert) SetName(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateName() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *AlgorithmUpsert) SetType(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateType() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *AlgorithmUpsert) SetDescription(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateDescription() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldDescription)
	return u
}

// SetVersion sets the "version" field.
func (u *AlgorithmUpsert) SetVersion(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateVersion() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldVersion)
	return u
}

// SetAppName sets the "app_name" field.
func (u *AlgorithmUpsert) SetAppName(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAppName, v)
	return u
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAppName() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAppName)
	return u
}

// SetAlarmType sets the "alarm_type" field.
func (u *AlgorithmUpsert) SetAlarmType(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlarmType, v)
	return u
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlarmType() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlarmType)
	return u
}

// SetAlarmName sets the "alarm_name" field.
func (u *AlgorithmUpsert) SetAlarmName(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlarmName, v)
	return u
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlarmName() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlarmName)
	return u
}

// SetNotify sets the "notify" field.
func (u *AlgorithmUpsert) SetNotify(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldNotify, v)
	return u
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateNotify() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldNotify)
	return u
}

// AddNotify adds v to the "notify" field.
func (u *AlgorithmUpsert) AddNotify(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldNotify, v)
	return u
}

// SetExtend sets the "extend" field.
func (u *AlgorithmUpsert) SetExtend(v map[string]interface{}) *AlgorithmUpsert {
	u.Set(algorithm.FieldExtend, v)
	return u
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateExtend() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldExtend)
	return u
}

// SetDrawType sets the "draw_type" field.
func (u *AlgorithmUpsert) SetDrawType(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldDrawType, v)
	return u
}

// UpdateDrawType sets the "draw_type" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateDrawType() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldDrawType)
	return u
}

// AddDrawType adds v to the "draw_type" field.
func (u *AlgorithmUpsert) AddDrawType(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldDrawType, v)
	return u
}

// SetBaseType sets the "base_type" field.
func (u *AlgorithmUpsert) SetBaseType(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldBaseType, v)
	return u
}

// UpdateBaseType sets the "base_type" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateBaseType() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldBaseType)
	return u
}

// AddBaseType adds v to the "base_type" field.
func (u *AlgorithmUpsert) AddBaseType(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldBaseType, v)
	return u
}

// SetAvailable sets the "available" field.
func (u *AlgorithmUpsert) SetAvailable(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldAvailable, v)
	return u
}

// UpdateAvailable sets the "available" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAvailable() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAvailable)
	return u
}

// AddAvailable adds v to the "available" field.
func (u *AlgorithmUpsert) AddAvailable(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldAvailable, v)
	return u
}

// SetImage sets the "image" field.
func (u *AlgorithmUpsert) SetImage(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateImage() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldImage)
	return u
}

// SetLabelMap sets the "label_map" field.
func (u *AlgorithmUpsert) SetLabelMap(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldLabelMap, v)
	return u
}

// UpdateLabelMap sets the "label_map" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateLabelMap() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldLabelMap)
	return u
}

// ClearLabelMap clears the value of the "label_map" field.
func (u *AlgorithmUpsert) ClearLabelMap() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldLabelMap)
	return u
}

// SetTarget sets the "target" field.
func (u *AlgorithmUpsert) SetTarget(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldTarget, v)
	return u
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateTarget() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldTarget)
	return u
}

// ClearTarget clears the value of the "target" field.
func (u *AlgorithmUpsert) ClearTarget() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldTarget)
	return u
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (u *AlgorithmUpsert) SetAlgoNameEn(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlgoNameEn, v)
	return u
}

// UpdateAlgoNameEn sets the "algo_name_en" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlgoNameEn() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlgoNameEn)
	return u
}

// ClearAlgoNameEn clears the value of the "algo_name_en" field.
func (u *AlgorithmUpsert) ClearAlgoNameEn() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldAlgoNameEn)
	return u
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *AlgorithmUpsert) SetAlgoGroupID(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlgoGroupID, v)
	return u
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlgoGroupID() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlgoGroupID)
	return u
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *AlgorithmUpsert) AddAlgoGroupID(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldAlgoGroupID, v)
	return u
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *AlgorithmUpsert) ClearAlgoGroupID() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldAlgoGroupID)
	return u
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *AlgorithmUpsert) SetAlgoGroupName(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlgoGroupName, v)
	return u
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlgoGroupName() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlgoGroupName)
	return u
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *AlgorithmUpsert) ClearAlgoGroupName() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldAlgoGroupName)
	return u
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *AlgorithmUpsert) SetAlgoGroupVersion(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlgoGroupVersion, v)
	return u
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlgoGroupVersion() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlgoGroupVersion)
	return u
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *AlgorithmUpsert) ClearAlgoGroupVersion() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldAlgoGroupVersion)
	return u
}

// SetConfig sets the "config" field.
func (u *AlgorithmUpsert) SetConfig(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateConfig() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldConfig)
	return u
}

// ClearConfig clears the value of the "config" field.
func (u *AlgorithmUpsert) ClearConfig() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldConfig)
	return u
}

// SetProvider sets the "provider" field.
func (u *AlgorithmUpsert) SetProvider(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateProvider() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldProvider)
	return u
}

// ClearProvider clears the value of the "provider" field.
func (u *AlgorithmUpsert) ClearProvider() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldProvider)
	return u
}

// SetAlgoID sets the "algo_id" field.
func (u *AlgorithmUpsert) SetAlgoID(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldAlgoID, v)
	return u
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateAlgoID() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldAlgoID)
	return u
}

// ClearAlgoID clears the value of the "algo_id" field.
func (u *AlgorithmUpsert) ClearAlgoID() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldAlgoID)
	return u
}

// SetPlatform sets the "platform" field.
func (u *AlgorithmUpsert) SetPlatform(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdatePlatform() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldPlatform)
	return u
}

// ClearPlatform clears the value of the "platform" field.
func (u *AlgorithmUpsert) ClearPlatform() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldPlatform)
	return u
}

// SetDeviceModel sets the "device_model" field.
func (u *AlgorithmUpsert) SetDeviceModel(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldDeviceModel, v)
	return u
}

// UpdateDeviceModel sets the "device_model" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateDeviceModel() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldDeviceModel)
	return u
}

// ClearDeviceModel clears the value of the "device_model" field.
func (u *AlgorithmUpsert) ClearDeviceModel() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldDeviceModel)
	return u
}

// SetIsGroupType sets the "is_group_type" field.
func (u *AlgorithmUpsert) SetIsGroupType(v uint) *AlgorithmUpsert {
	u.Set(algorithm.FieldIsGroupType, v)
	return u
}

// UpdateIsGroupType sets the "is_group_type" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdateIsGroupType() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldIsGroupType)
	return u
}

// AddIsGroupType adds v to the "is_group_type" field.
func (u *AlgorithmUpsert) AddIsGroupType(v uint) *AlgorithmUpsert {
	u.Add(algorithm.FieldIsGroupType, v)
	return u
}

// ClearIsGroupType clears the value of the "is_group_type" field.
func (u *AlgorithmUpsert) ClearIsGroupType() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldIsGroupType)
	return u
}

// SetPrefix sets the "prefix" field.
func (u *AlgorithmUpsert) SetPrefix(v string) *AlgorithmUpsert {
	u.Set(algorithm.FieldPrefix, v)
	return u
}

// UpdatePrefix sets the "prefix" field to the value that was provided on create.
func (u *AlgorithmUpsert) UpdatePrefix() *AlgorithmUpsert {
	u.SetExcluded(algorithm.FieldPrefix)
	return u
}

// ClearPrefix clears the value of the "prefix" field.
func (u *AlgorithmUpsert) ClearPrefix() *AlgorithmUpsert {
	u.SetNull(algorithm.FieldPrefix)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(algorithm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlgorithmUpsertOne) UpdateNewValues() *AlgorithmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(algorithm.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(algorithm.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AlgorithmUpsertOne) Ignore() *AlgorithmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlgorithmUpsertOne) DoNothing() *AlgorithmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlgorithmCreate.OnConflict
// documentation for more info.
func (u *AlgorithmUpsertOne) Update(set func(*AlgorithmUpsert)) *AlgorithmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlgorithmUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AlgorithmUpsertOne) SetUpdatedAt(v time.Time) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateUpdatedAt() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AlgorithmUpsertOne) SetDeletedAt(v time.Time) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateDeletedAt() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AlgorithmUpsertOne) ClearDeletedAt() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AlgorithmUpsertOne) SetName(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateName() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *AlgorithmUpsertOne) SetType(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *AlgorithmUpsertOne) SetDescription(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateDescription() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDescription()
	})
}

// SetVersion sets the "version" field.
func (u *AlgorithmUpsertOne) SetVersion(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateVersion() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateVersion()
	})
}

// SetAppName sets the "app_name" field.
func (u *AlgorithmUpsertOne) SetAppName(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAppName() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAppName()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *AlgorithmUpsertOne) SetAlarmType(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlarmType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlarmType()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *AlgorithmUpsertOne) SetAlarmName(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlarmName() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlarmName()
	})
}

// SetNotify sets the "notify" field.
func (u *AlgorithmUpsertOne) SetNotify(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetNotify(v)
	})
}

// AddNotify adds v to the "notify" field.
func (u *AlgorithmUpsertOne) AddNotify(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddNotify(v)
	})
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateNotify() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateNotify()
	})
}

// SetExtend sets the "extend" field.
func (u *AlgorithmUpsertOne) SetExtend(v map[string]interface{}) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetExtend(v)
	})
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateExtend() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateExtend()
	})
}

// SetDrawType sets the "draw_type" field.
func (u *AlgorithmUpsertOne) SetDrawType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDrawType(v)
	})
}

// AddDrawType adds v to the "draw_type" field.
func (u *AlgorithmUpsertOne) AddDrawType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddDrawType(v)
	})
}

// UpdateDrawType sets the "draw_type" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateDrawType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDrawType()
	})
}

// SetBaseType sets the "base_type" field.
func (u *AlgorithmUpsertOne) SetBaseType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetBaseType(v)
	})
}

// AddBaseType adds v to the "base_type" field.
func (u *AlgorithmUpsertOne) AddBaseType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddBaseType(v)
	})
}

// UpdateBaseType sets the "base_type" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateBaseType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateBaseType()
	})
}

// SetAvailable sets the "available" field.
func (u *AlgorithmUpsertOne) SetAvailable(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAvailable(v)
	})
}

// AddAvailable adds v to the "available" field.
func (u *AlgorithmUpsertOne) AddAvailable(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddAvailable(v)
	})
}

// UpdateAvailable sets the "available" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAvailable() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAvailable()
	})
}

// SetImage sets the "image" field.
func (u *AlgorithmUpsertOne) SetImage(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateImage() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateImage()
	})
}

// SetLabelMap sets the "label_map" field.
func (u *AlgorithmUpsertOne) SetLabelMap(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetLabelMap(v)
	})
}

// UpdateLabelMap sets the "label_map" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateLabelMap() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateLabelMap()
	})
}

// ClearLabelMap clears the value of the "label_map" field.
func (u *AlgorithmUpsertOne) ClearLabelMap() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearLabelMap()
	})
}

// SetTarget sets the "target" field.
func (u *AlgorithmUpsertOne) SetTarget(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateTarget() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateTarget()
	})
}

// ClearTarget clears the value of the "target" field.
func (u *AlgorithmUpsertOne) ClearTarget() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearTarget()
	})
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (u *AlgorithmUpsertOne) SetAlgoNameEn(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoNameEn(v)
	})
}

// UpdateAlgoNameEn sets the "algo_name_en" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlgoNameEn() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoNameEn()
	})
}

// ClearAlgoNameEn clears the value of the "algo_name_en" field.
func (u *AlgorithmUpsertOne) ClearAlgoNameEn() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoNameEn()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *AlgorithmUpsertOne) SetAlgoGroupID(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *AlgorithmUpsertOne) AddAlgoGroupID(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlgoGroupID() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *AlgorithmUpsertOne) ClearAlgoGroupID() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupID()
	})
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *AlgorithmUpsertOne) SetAlgoGroupName(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupName(v)
	})
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlgoGroupName() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupName()
	})
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *AlgorithmUpsertOne) ClearAlgoGroupName() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupName()
	})
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *AlgorithmUpsertOne) SetAlgoGroupVersion(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupVersion(v)
	})
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlgoGroupVersion() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupVersion()
	})
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *AlgorithmUpsertOne) ClearAlgoGroupVersion() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupVersion()
	})
}

// SetConfig sets the "config" field.
func (u *AlgorithmUpsertOne) SetConfig(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateConfig() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *AlgorithmUpsertOne) ClearConfig() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearConfig()
	})
}

// SetProvider sets the "provider" field.
func (u *AlgorithmUpsertOne) SetProvider(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateProvider() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *AlgorithmUpsertOne) ClearProvider() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearProvider()
	})
}

// SetAlgoID sets the "algo_id" field.
func (u *AlgorithmUpsertOne) SetAlgoID(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoID(v)
	})
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateAlgoID() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoID()
	})
}

// ClearAlgoID clears the value of the "algo_id" field.
func (u *AlgorithmUpsertOne) ClearAlgoID() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoID()
	})
}

// SetPlatform sets the "platform" field.
func (u *AlgorithmUpsertOne) SetPlatform(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdatePlatform() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdatePlatform()
	})
}

// ClearPlatform clears the value of the "platform" field.
func (u *AlgorithmUpsertOne) ClearPlatform() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearPlatform()
	})
}

// SetDeviceModel sets the "device_model" field.
func (u *AlgorithmUpsertOne) SetDeviceModel(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDeviceModel(v)
	})
}

// UpdateDeviceModel sets the "device_model" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateDeviceModel() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDeviceModel()
	})
}

// ClearDeviceModel clears the value of the "device_model" field.
func (u *AlgorithmUpsertOne) ClearDeviceModel() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearDeviceModel()
	})
}

// SetIsGroupType sets the "is_group_type" field.
func (u *AlgorithmUpsertOne) SetIsGroupType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetIsGroupType(v)
	})
}

// AddIsGroupType adds v to the "is_group_type" field.
func (u *AlgorithmUpsertOne) AddIsGroupType(v uint) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddIsGroupType(v)
	})
}

// UpdateIsGroupType sets the "is_group_type" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdateIsGroupType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateIsGroupType()
	})
}

// ClearIsGroupType clears the value of the "is_group_type" field.
func (u *AlgorithmUpsertOne) ClearIsGroupType() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearIsGroupType()
	})
}

// SetPrefix sets the "prefix" field.
func (u *AlgorithmUpsertOne) SetPrefix(v string) *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetPrefix(v)
	})
}

// UpdatePrefix sets the "prefix" field to the value that was provided on create.
func (u *AlgorithmUpsertOne) UpdatePrefix() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdatePrefix()
	})
}

// ClearPrefix clears the value of the "prefix" field.
func (u *AlgorithmUpsertOne) ClearPrefix() *AlgorithmUpsertOne {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearPrefix()
	})
}

// Exec executes the query.
func (u *AlgorithmUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlgorithmCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlgorithmUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AlgorithmUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AlgorithmUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AlgorithmCreateBulk is the builder for creating many Algorithm entities in bulk.
type AlgorithmCreateBulk struct {
	config
	err      error
	builders []*AlgorithmCreate
	conflict []sql.ConflictOption
}

// Save creates the Algorithm entities in the database.
func (acb *AlgorithmCreateBulk) Save(ctx context.Context) ([]*Algorithm, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Algorithm, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlgorithmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlgorithmCreateBulk) SaveX(ctx context.Context) []*Algorithm {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlgorithmCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlgorithmCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Algorithm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlgorithmUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AlgorithmCreateBulk) OnConflict(opts ...sql.ConflictOption) *AlgorithmUpsertBulk {
	acb.conflict = opts
	return &AlgorithmUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AlgorithmCreateBulk) OnConflictColumns(columns ...string) *AlgorithmUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AlgorithmUpsertBulk{
		create: acb,
	}
}

// AlgorithmUpsertBulk is the builder for "upsert"-ing
// a bulk of Algorithm nodes.
type AlgorithmUpsertBulk struct {
	create *AlgorithmCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(algorithm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlgorithmUpsertBulk) UpdateNewValues() *AlgorithmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(algorithm.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(algorithm.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Algorithm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AlgorithmUpsertBulk) Ignore() *AlgorithmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlgorithmUpsertBulk) DoNothing() *AlgorithmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlgorithmCreateBulk.OnConflict
// documentation for more info.
func (u *AlgorithmUpsertBulk) Update(set func(*AlgorithmUpsert)) *AlgorithmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlgorithmUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AlgorithmUpsertBulk) SetUpdatedAt(v time.Time) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateUpdatedAt() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AlgorithmUpsertBulk) SetDeletedAt(v time.Time) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateDeletedAt() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AlgorithmUpsertBulk) ClearDeletedAt() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AlgorithmUpsertBulk) SetName(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateName() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *AlgorithmUpsertBulk) SetType(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *AlgorithmUpsertBulk) SetDescription(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateDescription() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDescription()
	})
}

// SetVersion sets the "version" field.
func (u *AlgorithmUpsertBulk) SetVersion(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateVersion() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateVersion()
	})
}

// SetAppName sets the "app_name" field.
func (u *AlgorithmUpsertBulk) SetAppName(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAppName() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAppName()
	})
}

// SetAlarmType sets the "alarm_type" field.
func (u *AlgorithmUpsertBulk) SetAlarmType(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlarmType(v)
	})
}

// UpdateAlarmType sets the "alarm_type" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlarmType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlarmType()
	})
}

// SetAlarmName sets the "alarm_name" field.
func (u *AlgorithmUpsertBulk) SetAlarmName(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlarmName(v)
	})
}

// UpdateAlarmName sets the "alarm_name" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlarmName() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlarmName()
	})
}

// SetNotify sets the "notify" field.
func (u *AlgorithmUpsertBulk) SetNotify(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetNotify(v)
	})
}

// AddNotify adds v to the "notify" field.
func (u *AlgorithmUpsertBulk) AddNotify(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddNotify(v)
	})
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateNotify() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateNotify()
	})
}

// SetExtend sets the "extend" field.
func (u *AlgorithmUpsertBulk) SetExtend(v map[string]interface{}) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetExtend(v)
	})
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateExtend() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateExtend()
	})
}

// SetDrawType sets the "draw_type" field.
func (u *AlgorithmUpsertBulk) SetDrawType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDrawType(v)
	})
}

// AddDrawType adds v to the "draw_type" field.
func (u *AlgorithmUpsertBulk) AddDrawType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddDrawType(v)
	})
}

// UpdateDrawType sets the "draw_type" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateDrawType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDrawType()
	})
}

// SetBaseType sets the "base_type" field.
func (u *AlgorithmUpsertBulk) SetBaseType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetBaseType(v)
	})
}

// AddBaseType adds v to the "base_type" field.
func (u *AlgorithmUpsertBulk) AddBaseType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddBaseType(v)
	})
}

// UpdateBaseType sets the "base_type" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateBaseType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateBaseType()
	})
}

// SetAvailable sets the "available" field.
func (u *AlgorithmUpsertBulk) SetAvailable(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAvailable(v)
	})
}

// AddAvailable adds v to the "available" field.
func (u *AlgorithmUpsertBulk) AddAvailable(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddAvailable(v)
	})
}

// UpdateAvailable sets the "available" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAvailable() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAvailable()
	})
}

// SetImage sets the "image" field.
func (u *AlgorithmUpsertBulk) SetImage(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateImage() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateImage()
	})
}

// SetLabelMap sets the "label_map" field.
func (u *AlgorithmUpsertBulk) SetLabelMap(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetLabelMap(v)
	})
}

// UpdateLabelMap sets the "label_map" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateLabelMap() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateLabelMap()
	})
}

// ClearLabelMap clears the value of the "label_map" field.
func (u *AlgorithmUpsertBulk) ClearLabelMap() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearLabelMap()
	})
}

// SetTarget sets the "target" field.
func (u *AlgorithmUpsertBulk) SetTarget(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateTarget() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateTarget()
	})
}

// ClearTarget clears the value of the "target" field.
func (u *AlgorithmUpsertBulk) ClearTarget() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearTarget()
	})
}

// SetAlgoNameEn sets the "algo_name_en" field.
func (u *AlgorithmUpsertBulk) SetAlgoNameEn(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoNameEn(v)
	})
}

// UpdateAlgoNameEn sets the "algo_name_en" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlgoNameEn() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoNameEn()
	})
}

// ClearAlgoNameEn clears the value of the "algo_name_en" field.
func (u *AlgorithmUpsertBulk) ClearAlgoNameEn() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoNameEn()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *AlgorithmUpsertBulk) SetAlgoGroupID(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *AlgorithmUpsertBulk) AddAlgoGroupID(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlgoGroupID() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// ClearAlgoGroupID clears the value of the "algo_group_id" field.
func (u *AlgorithmUpsertBulk) ClearAlgoGroupID() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupID()
	})
}

// SetAlgoGroupName sets the "algo_group_name" field.
func (u *AlgorithmUpsertBulk) SetAlgoGroupName(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupName(v)
	})
}

// UpdateAlgoGroupName sets the "algo_group_name" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlgoGroupName() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupName()
	})
}

// ClearAlgoGroupName clears the value of the "algo_group_name" field.
func (u *AlgorithmUpsertBulk) ClearAlgoGroupName() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupName()
	})
}

// SetAlgoGroupVersion sets the "algo_group_version" field.
func (u *AlgorithmUpsertBulk) SetAlgoGroupVersion(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoGroupVersion(v)
	})
}

// UpdateAlgoGroupVersion sets the "algo_group_version" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlgoGroupVersion() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoGroupVersion()
	})
}

// ClearAlgoGroupVersion clears the value of the "algo_group_version" field.
func (u *AlgorithmUpsertBulk) ClearAlgoGroupVersion() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoGroupVersion()
	})
}

// SetConfig sets the "config" field.
func (u *AlgorithmUpsertBulk) SetConfig(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateConfig() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *AlgorithmUpsertBulk) ClearConfig() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearConfig()
	})
}

// SetProvider sets the "provider" field.
func (u *AlgorithmUpsertBulk) SetProvider(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateProvider() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *AlgorithmUpsertBulk) ClearProvider() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearProvider()
	})
}

// SetAlgoID sets the "algo_id" field.
func (u *AlgorithmUpsertBulk) SetAlgoID(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetAlgoID(v)
	})
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateAlgoID() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateAlgoID()
	})
}

// ClearAlgoID clears the value of the "algo_id" field.
func (u *AlgorithmUpsertBulk) ClearAlgoID() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearAlgoID()
	})
}

// SetPlatform sets the "platform" field.
func (u *AlgorithmUpsertBulk) SetPlatform(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdatePlatform() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdatePlatform()
	})
}

// ClearPlatform clears the value of the "platform" field.
func (u *AlgorithmUpsertBulk) ClearPlatform() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearPlatform()
	})
}

// SetDeviceModel sets the "device_model" field.
func (u *AlgorithmUpsertBulk) SetDeviceModel(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetDeviceModel(v)
	})
}

// UpdateDeviceModel sets the "device_model" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateDeviceModel() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateDeviceModel()
	})
}

// ClearDeviceModel clears the value of the "device_model" field.
func (u *AlgorithmUpsertBulk) ClearDeviceModel() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearDeviceModel()
	})
}

// SetIsGroupType sets the "is_group_type" field.
func (u *AlgorithmUpsertBulk) SetIsGroupType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetIsGroupType(v)
	})
}

// AddIsGroupType adds v to the "is_group_type" field.
func (u *AlgorithmUpsertBulk) AddIsGroupType(v uint) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.AddIsGroupType(v)
	})
}

// UpdateIsGroupType sets the "is_group_type" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdateIsGroupType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdateIsGroupType()
	})
}

// ClearIsGroupType clears the value of the "is_group_type" field.
func (u *AlgorithmUpsertBulk) ClearIsGroupType() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearIsGroupType()
	})
}

// SetPrefix sets the "prefix" field.
func (u *AlgorithmUpsertBulk) SetPrefix(v string) *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.SetPrefix(v)
	})
}

// UpdatePrefix sets the "prefix" field to the value that was provided on create.
func (u *AlgorithmUpsertBulk) UpdatePrefix() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.UpdatePrefix()
	})
}

// ClearPrefix clears the value of the "prefix" field.
func (u *AlgorithmUpsertBulk) ClearPrefix() *AlgorithmUpsertBulk {
	return u.Update(func(s *AlgorithmUpsert) {
		s.ClearPrefix()
	})
}

// Exec executes the query.
func (u *AlgorithmUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AlgorithmCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlgorithmCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlgorithmUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
