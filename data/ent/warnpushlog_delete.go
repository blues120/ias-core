// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpushlog"
)

// WarnPushLogDelete is the builder for deleting a WarnPushLog entity.
type WarnPushLogDelete struct {
	config
	hooks    []Hook
	mutation *WarnPushLogMutation
}

// Where appends a list predicates to the WarnPushLogDelete builder.
func (wpld *WarnPushLogDelete) Where(ps ...predicate.WarnPushLog) *WarnPushLogDelete {
	wpld.mutation.Where(ps...)
	return wpld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wpld *WarnPushLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wpld.sqlExec, wpld.mutation, wpld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wpld *WarnPushLogDelete) ExecX(ctx context.Context) int {
	n, err := wpld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wpld *WarnPushLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(warnpushlog.Table, sqlgraph.NewFieldSpec(warnpushlog.FieldID, field.TypeUint64))
	if ps := wpld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wpld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wpld.mutation.done = true
	return affected, err
}

// WarnPushLogDeleteOne is the builder for deleting a single WarnPushLog entity.
type WarnPushLogDeleteOne struct {
	wpld *WarnPushLogDelete
}

// Where appends a list predicates to the WarnPushLogDelete builder.
func (wpldo *WarnPushLogDeleteOne) Where(ps ...predicate.WarnPushLog) *WarnPushLogDeleteOne {
	wpldo.wpld.mutation.Where(ps...)
	return wpldo
}

// Exec executes the deletion query.
func (wpldo *WarnPushLogDeleteOne) Exec(ctx context.Context) error {
	n, err := wpldo.wpld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{warnpushlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wpldo *WarnPushLogDeleteOne) ExecX(ctx context.Context) {
	if err := wpldo.Exec(ctx); err != nil {
		panic(err)
	}
}
