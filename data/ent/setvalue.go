// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/activeinfo"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/algorithm"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/algorithmalarmtype"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/devicetoken"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/equipattr"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/eventsubscription"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/fileupload"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/inform"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/organization"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/signature"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/tasklimits"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/user"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warningtype"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpush"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnpushlog"
)

func (aic *ActiveInfoCreate) SetActiveInfo(input *ActiveInfo) *ActiveInfoCreate {
	aic.SetProcessID(input.ProcessID)
	aic.SetStartTime(input.StartTime)
	aic.SetResult(input.Result)
	aic.SetMsg(input.Msg)
	return aic
}
func (aic *ActiveInfoCreate) SoftDelete() *ActiveInfoCreate {
	aic.SetDeletedAt(time.Now())
	return aic
}

func (aiu *ActiveInfoUpdate) SetActiveInfo(input *ActiveInfo) *ActiveInfoUpdate {
	aiu.SetProcessID(input.ProcessID)
	aiu.SetStartTime(input.StartTime)
	aiu.SetResult(input.Result)
	aiu.SetMsg(input.Msg)
	return aiu
}

func (aiuo *ActiveInfoUpdateOne) SetActiveInfo(input *ActiveInfo) *ActiveInfoUpdateOne {
	aiuo.SetProcessID(input.ProcessID)
	aiuo.SetStartTime(input.StartTime)
	aiuo.SetResult(input.Result)
	aiuo.SetMsg(input.Msg)
	return aiuo
}

func (aiq *ActiveInfoQuery) SoftDelete() *ActiveInfoQuery {
	return aiq.Where(activeinfo.DeletedAtIsNil())
}

func (ac *AlgorithmCreate) SetAlgorithm(input *Algorithm) *AlgorithmCreate {
	ac.SetName(input.Name)
	ac.SetType(input.Type)
	ac.SetDescription(input.Description)
	ac.SetVersion(input.Version)
	ac.SetAppName(input.AppName)
	ac.SetAlarmType(input.AlarmType)
	ac.SetAlarmName(input.AlarmName)
	ac.SetNotify(input.Notify)
	ac.SetExtend(input.Extend)
	ac.SetDrawType(input.DrawType)
	ac.SetBaseType(input.BaseType)
	ac.SetAvailable(input.Available)
	ac.SetImage(input.Image)
	ac.SetLabelMap(input.LabelMap)
	ac.SetTarget(input.Target)
	ac.SetAlgoNameEn(input.AlgoNameEn)
	ac.SetAlgoGroupID(input.AlgoGroupID)
	ac.SetAlgoGroupName(input.AlgoGroupName)
	ac.SetAlgoGroupVersion(input.AlgoGroupVersion)
	ac.SetConfig(input.Config)
	ac.SetProvider(input.Provider)
	ac.SetAlgoID(input.AlgoID)
	ac.SetPlatform(input.Platform)
	ac.SetDeviceModel(input.DeviceModel)
	ac.SetIsGroupType(input.IsGroupType)
	ac.SetPrefix(input.Prefix)
	return ac
}
func (ac *AlgorithmCreate) SoftDelete() *AlgorithmCreate {
	ac.SetDeletedAt(time.Now())
	return ac
}

func (au *AlgorithmUpdate) SetAlgorithm(input *Algorithm) *AlgorithmUpdate {
	au.SetName(input.Name)
	au.SetType(input.Type)
	au.SetDescription(input.Description)
	au.SetVersion(input.Version)
	au.SetAppName(input.AppName)
	au.SetAlarmType(input.AlarmType)
	au.SetAlarmName(input.AlarmName)
	au.SetNotify(input.Notify)
	au.SetExtend(input.Extend)
	au.SetDrawType(input.DrawType)
	au.SetBaseType(input.BaseType)
	au.SetAvailable(input.Available)
	au.SetImage(input.Image)
	au.SetLabelMap(input.LabelMap)
	au.SetTarget(input.Target)
	au.SetAlgoNameEn(input.AlgoNameEn)
	au.SetAlgoGroupID(input.AlgoGroupID)
	au.SetAlgoGroupName(input.AlgoGroupName)
	au.SetAlgoGroupVersion(input.AlgoGroupVersion)
	au.SetConfig(input.Config)
	au.SetProvider(input.Provider)
	au.SetAlgoID(input.AlgoID)
	au.SetPlatform(input.Platform)
	au.SetDeviceModel(input.DeviceModel)
	au.SetIsGroupType(input.IsGroupType)
	au.SetPrefix(input.Prefix)
	return au
}

func (auo *AlgorithmUpdateOne) SetAlgorithm(input *Algorithm) *AlgorithmUpdateOne {
	auo.SetName(input.Name)
	auo.SetType(input.Type)
	auo.SetDescription(input.Description)
	auo.SetVersion(input.Version)
	auo.SetAppName(input.AppName)
	auo.SetAlarmType(input.AlarmType)
	auo.SetAlarmName(input.AlarmName)
	auo.SetNotify(input.Notify)
	auo.SetExtend(input.Extend)
	auo.SetDrawType(input.DrawType)
	auo.SetBaseType(input.BaseType)
	auo.SetAvailable(input.Available)
	auo.SetImage(input.Image)
	auo.SetLabelMap(input.LabelMap)
	auo.SetTarget(input.Target)
	auo.SetAlgoNameEn(input.AlgoNameEn)
	auo.SetAlgoGroupID(input.AlgoGroupID)
	auo.SetAlgoGroupName(input.AlgoGroupName)
	auo.SetAlgoGroupVersion(input.AlgoGroupVersion)
	auo.SetConfig(input.Config)
	auo.SetProvider(input.Provider)
	auo.SetAlgoID(input.AlgoID)
	auo.SetPlatform(input.Platform)
	auo.SetDeviceModel(input.DeviceModel)
	auo.SetIsGroupType(input.IsGroupType)
	auo.SetPrefix(input.Prefix)
	return auo
}

func (aq *AlgorithmQuery) SoftDelete() *AlgorithmQuery {
	return aq.Where(algorithm.DeletedAtIsNil())
}

func (aatc *AlgorithmAlarmTypeCreate) SetAlgorithmAlarmType(input *AlgorithmAlarmType) *AlgorithmAlarmTypeCreate {
	aatc.SetTypeName(input.TypeName)
	return aatc
}
func (aatc *AlgorithmAlarmTypeCreate) SoftDelete() *AlgorithmAlarmTypeCreate {
	aatc.SetDeletedAt(time.Now())
	return aatc
}

func (aatu *AlgorithmAlarmTypeUpdate) SetAlgorithmAlarmType(input *AlgorithmAlarmType) *AlgorithmAlarmTypeUpdate {
	aatu.SetTypeName(input.TypeName)
	return aatu
}

func (aatuo *AlgorithmAlarmTypeUpdateOne) SetAlgorithmAlarmType(input *AlgorithmAlarmType) *AlgorithmAlarmTypeUpdateOne {
	aatuo.SetTypeName(input.TypeName)
	return aatuo
}

func (aatq *AlgorithmAlarmTypeQuery) SoftDelete() *AlgorithmAlarmTypeQuery {
	return aatq.Where(algorithmalarmtype.DeletedAtIsNil())
}

func (ac *AreaCreate) SetArea(input *Area) *AreaCreate {
	ac.SetName(input.Name)
	ac.SetLevel(input.Level)
	ac.SetPid(input.Pid)
	return ac
}

func (au *AreaUpdate) SetArea(input *Area) *AreaUpdate {
	au.SetName(input.Name)
	au.SetLevel(input.Level)
	au.SetPid(input.Pid)
	return au
}

func (auo *AreaUpdateOne) SetArea(input *Area) *AreaUpdateOne {
	auo.SetName(input.Name)
	auo.SetLevel(input.Level)
	auo.SetPid(input.Pid)
	return auo
}

func (cc *CameraCreate) SetCamera(input *Camera) *CameraCreate {
	cc.SetTenantID(input.TenantID)
	cc.SetAccessOrgList(input.AccessOrgList)
	cc.SetName(input.Name)
	cc.SetPosition(input.Position)
	cc.SetRegion(input.Region)
	cc.SetRegionStr(input.RegionStr)
	cc.SetLongitude(input.Longitude)
	cc.SetLatitude(input.Latitude)
	cc.SetCustomNumber(input.CustomNumber)
	cc.SetChannelID(input.ChannelID)
	cc.SetSerialNumber(input.SerialNumber)
	cc.SetPoleNumber(input.PoleNumber)
	cc.SetDeviceDescription(input.DeviceDescription)
	cc.SetScene(input.Scene)
	cc.SetPlace(input.Place)
	cc.SetStatus(input.Status)
	cc.SetSpType(input.SpType)
	cc.SetSpSource(input.SpSource)
	cc.SetSpCodecName(input.SpCodecName)
	cc.SetSpWidth(input.SpWidth)
	cc.SetSpHeight(input.SpHeight)
	cc.SetTransType(input.TransType)
	cc.SetDeviceIP(input.DeviceIP)
	cc.SetDevicePort(input.DevicePort)
	cc.SetGBID(input.GBID)
	cc.SetSipUser(input.SipUser)
	cc.SetSipPassword(input.SipPassword)
	cc.SetGBChannelID(input.GBChannelID)
	cc.SetUpGBChannelID(input.UpGBChannelID)
	cc.SetGBDeviceType(input.GBDeviceType)
	cc.SetType(input.Type)
	return cc
}
func (cc *CameraCreate) SoftDelete() *CameraCreate {
	cc.SetDeletedAt(time.Now())
	return cc
}

func (cu *CameraUpdate) SetCamera(input *Camera) *CameraUpdate {
	cu.SetTenantID(input.TenantID)
	cu.SetAccessOrgList(input.AccessOrgList)
	cu.SetName(input.Name)
	cu.SetPosition(input.Position)
	cu.SetRegion(input.Region)
	cu.SetRegionStr(input.RegionStr)
	cu.SetLongitude(input.Longitude)
	cu.SetLatitude(input.Latitude)
	cu.SetCustomNumber(input.CustomNumber)
	cu.SetChannelID(input.ChannelID)
	cu.SetSerialNumber(input.SerialNumber)
	cu.SetPoleNumber(input.PoleNumber)
	cu.SetDeviceDescription(input.DeviceDescription)
	cu.SetScene(input.Scene)
	cu.SetPlace(input.Place)
	cu.SetStatus(input.Status)
	cu.SetSpType(input.SpType)
	cu.SetSpSource(input.SpSource)
	cu.SetSpCodecName(input.SpCodecName)
	cu.SetSpWidth(input.SpWidth)
	cu.SetSpHeight(input.SpHeight)
	cu.SetTransType(input.TransType)
	cu.SetDeviceIP(input.DeviceIP)
	cu.SetDevicePort(input.DevicePort)
	cu.SetGBID(input.GBID)
	cu.SetSipUser(input.SipUser)
	cu.SetSipPassword(input.SipPassword)
	cu.SetGBChannelID(input.GBChannelID)
	cu.SetUpGBChannelID(input.UpGBChannelID)
	cu.SetGBDeviceType(input.GBDeviceType)
	cu.SetType(input.Type)
	return cu
}

func (cuo *CameraUpdateOne) SetCamera(input *Camera) *CameraUpdateOne {
	cuo.SetTenantID(input.TenantID)
	cuo.SetAccessOrgList(input.AccessOrgList)
	cuo.SetName(input.Name)
	cuo.SetPosition(input.Position)
	cuo.SetRegion(input.Region)
	cuo.SetRegionStr(input.RegionStr)
	cuo.SetLongitude(input.Longitude)
	cuo.SetLatitude(input.Latitude)
	cuo.SetCustomNumber(input.CustomNumber)
	cuo.SetChannelID(input.ChannelID)
	cuo.SetSerialNumber(input.SerialNumber)
	cuo.SetPoleNumber(input.PoleNumber)
	cuo.SetDeviceDescription(input.DeviceDescription)
	cuo.SetScene(input.Scene)
	cuo.SetPlace(input.Place)
	cuo.SetStatus(input.Status)
	cuo.SetSpType(input.SpType)
	cuo.SetSpSource(input.SpSource)
	cuo.SetSpCodecName(input.SpCodecName)
	cuo.SetSpWidth(input.SpWidth)
	cuo.SetSpHeight(input.SpHeight)
	cuo.SetTransType(input.TransType)
	cuo.SetDeviceIP(input.DeviceIP)
	cuo.SetDevicePort(input.DevicePort)
	cuo.SetGBID(input.GBID)
	cuo.SetSipUser(input.SipUser)
	cuo.SetSipPassword(input.SipPassword)
	cuo.SetGBChannelID(input.GBChannelID)
	cuo.SetUpGBChannelID(input.UpGBChannelID)
	cuo.SetGBDeviceType(input.GBDeviceType)
	cuo.SetType(input.Type)
	return cuo
}

func (cq *CameraQuery) SoftDelete() *CameraQuery {
	return cq.Where(camera.DeletedAtIsNil())
}

func (dc *DeviceCreate) SetDevice(input *Device) *DeviceCreate {
	dc.SetTenantID(input.TenantID)
	dc.SetAccessOrgList(input.AccessOrgList)
	dc.SetName(input.Name)
	dc.SetDisplayName(input.DisplayName)
	dc.SetType(input.Type)
	dc.SetExtID(input.ExtID)
	dc.SetSerialNo(input.SerialNo)
	dc.SetState(input.State)
	dc.SetMAC(input.MAC)
	dc.SetZoneName(input.ZoneName)
	dc.SetZoneID(input.ZoneID)
	dc.SetWorkspaceID(input.WorkspaceID)
	dc.SetEquipID(input.EquipID)
	dc.SetEquipPassword(input.EquipPassword)
	dc.SetDeviceInfo(input.DeviceInfo)
	dc.SetModel(input.Model)
	dc.SetAuthDeadline(input.AuthDeadline)
	dc.SetActivatedAt(input.ActivatedAt)
	return dc
}
func (dc *DeviceCreate) SoftDelete() *DeviceCreate {
	dc.SetDeletedAt(time.Now())
	return dc
}

func (du *DeviceUpdate) SetDevice(input *Device) *DeviceUpdate {
	du.SetTenantID(input.TenantID)
	du.SetAccessOrgList(input.AccessOrgList)
	du.SetName(input.Name)
	du.SetDisplayName(input.DisplayName)
	du.SetType(input.Type)
	du.SetExtID(input.ExtID)
	du.SetSerialNo(input.SerialNo)
	du.SetState(input.State)
	du.SetMAC(input.MAC)
	du.SetZoneName(input.ZoneName)
	du.SetZoneID(input.ZoneID)
	du.SetWorkspaceID(input.WorkspaceID)
	du.SetEquipID(input.EquipID)
	du.SetEquipPassword(input.EquipPassword)
	du.SetDeviceInfo(input.DeviceInfo)
	du.SetModel(input.Model)
	du.SetAuthDeadline(input.AuthDeadline)
	du.SetActivatedAt(input.ActivatedAt)
	return du
}

func (duo *DeviceUpdateOne) SetDevice(input *Device) *DeviceUpdateOne {
	duo.SetTenantID(input.TenantID)
	duo.SetAccessOrgList(input.AccessOrgList)
	duo.SetName(input.Name)
	duo.SetDisplayName(input.DisplayName)
	duo.SetType(input.Type)
	duo.SetExtID(input.ExtID)
	duo.SetSerialNo(input.SerialNo)
	duo.SetState(input.State)
	duo.SetMAC(input.MAC)
	duo.SetZoneName(input.ZoneName)
	duo.SetZoneID(input.ZoneID)
	duo.SetWorkspaceID(input.WorkspaceID)
	duo.SetEquipID(input.EquipID)
	duo.SetEquipPassword(input.EquipPassword)
	duo.SetDeviceInfo(input.DeviceInfo)
	duo.SetModel(input.Model)
	duo.SetAuthDeadline(input.AuthDeadline)
	duo.SetActivatedAt(input.ActivatedAt)
	return duo
}

func (dq *DeviceQuery) SoftDelete() *DeviceQuery {
	return dq.Where(device.DeletedAtIsNil())
}

func (dac *DeviceAlgoCreate) SetDeviceAlgo(input *DeviceAlgo) *DeviceAlgoCreate {
	dac.SetDeviceID(input.DeviceID)
	dac.SetAlgoGroupID(input.AlgoGroupID)
	dac.SetAlgoGroupName(input.AlgoGroupName)
	dac.SetAlgoGroupVersion(input.AlgoGroupVersion)
	dac.SetName(input.Name)
	dac.SetVersion(input.Version)
	dac.SetInstallTime(input.InstallTime)
	return dac
}

func (dau *DeviceAlgoUpdate) SetDeviceAlgo(input *DeviceAlgo) *DeviceAlgoUpdate {
	dau.SetDeviceID(input.DeviceID)
	dau.SetAlgoGroupID(input.AlgoGroupID)
	dau.SetAlgoGroupName(input.AlgoGroupName)
	dau.SetAlgoGroupVersion(input.AlgoGroupVersion)
	dau.SetName(input.Name)
	dau.SetVersion(input.Version)
	dau.SetInstallTime(input.InstallTime)
	return dau
}

func (dauo *DeviceAlgoUpdateOne) SetDeviceAlgo(input *DeviceAlgo) *DeviceAlgoUpdateOne {
	dauo.SetDeviceID(input.DeviceID)
	dauo.SetAlgoGroupID(input.AlgoGroupID)
	dauo.SetAlgoGroupName(input.AlgoGroupName)
	dauo.SetAlgoGroupVersion(input.AlgoGroupVersion)
	dauo.SetName(input.Name)
	dauo.SetVersion(input.Version)
	dauo.SetInstallTime(input.InstallTime)
	return dauo
}

func (dcc *DeviceCameraCreate) SetDeviceCamera(input *DeviceCamera) *DeviceCameraCreate {
	dcc.SetDeviceID(input.DeviceID)
	dcc.SetCameraID(input.CameraID)
	return dcc
}

func (dcu *DeviceCameraUpdate) SetDeviceCamera(input *DeviceCamera) *DeviceCameraUpdate {
	dcu.SetDeviceID(input.DeviceID)
	dcu.SetCameraID(input.CameraID)
	return dcu
}

func (dcuo *DeviceCameraUpdateOne) SetDeviceCamera(input *DeviceCamera) *DeviceCameraUpdateOne {
	dcuo.SetDeviceID(input.DeviceID)
	dcuo.SetCameraID(input.CameraID)
	return dcuo
}

func (dtc *DeviceTokenCreate) SetDeviceToken(input *DeviceToken) *DeviceTokenCreate {
	dtc.SetToken(input.Token)
	dtc.SetDeviceExtID(input.DeviceExtID)
	return dtc
}
func (dtc *DeviceTokenCreate) SoftDelete() *DeviceTokenCreate {
	dtc.SetDeletedAt(time.Now())
	return dtc
}

func (dtu *DeviceTokenUpdate) SetDeviceToken(input *DeviceToken) *DeviceTokenUpdate {
	dtu.SetToken(input.Token)
	dtu.SetDeviceExtID(input.DeviceExtID)
	return dtu
}

func (dtuo *DeviceTokenUpdateOne) SetDeviceToken(input *DeviceToken) *DeviceTokenUpdateOne {
	dtuo.SetToken(input.Token)
	dtuo.SetDeviceExtID(input.DeviceExtID)
	return dtuo
}

func (dtq *DeviceTokenQuery) SoftDelete() *DeviceTokenQuery {
	return dtq.Where(devicetoken.DeletedAtIsNil())
}

func (eac *EquipAttrCreate) SetEquipAttr(input *EquipAttr) *EquipAttrCreate {
	eac.SetAttrKey(input.AttrKey)
	eac.SetAttrValue(input.AttrValue)
	eac.SetExtend(input.Extend)
	return eac
}
func (eac *EquipAttrCreate) SoftDelete() *EquipAttrCreate {
	eac.SetDeletedAt(time.Now())
	return eac
}

func (eau *EquipAttrUpdate) SetEquipAttr(input *EquipAttr) *EquipAttrUpdate {
	eau.SetAttrKey(input.AttrKey)
	eau.SetAttrValue(input.AttrValue)
	eau.SetExtend(input.Extend)
	return eau
}

func (eauo *EquipAttrUpdateOne) SetEquipAttr(input *EquipAttr) *EquipAttrUpdateOne {
	eauo.SetAttrKey(input.AttrKey)
	eauo.SetAttrValue(input.AttrValue)
	eauo.SetExtend(input.Extend)
	return eauo
}

func (eaq *EquipAttrQuery) SoftDelete() *EquipAttrQuery {
	return eaq.Where(equipattr.DeletedAtIsNil())
}

func (esc *EventSubscriptionCreate) SetEventSubscription(input *EventSubscription) *EventSubscriptionCreate {
	esc.SetBoxID(input.BoxID)
	esc.SetChannelID(input.ChannelID)
	esc.SetCallback(input.Callback)
	esc.SetTemplateID(input.TemplateID)
	esc.SetStatus(input.Status)
	return esc
}
func (esc *EventSubscriptionCreate) SoftDelete() *EventSubscriptionCreate {
	esc.SetDeletedAt(time.Now())
	return esc
}

func (esu *EventSubscriptionUpdate) SetEventSubscription(input *EventSubscription) *EventSubscriptionUpdate {
	esu.SetBoxID(input.BoxID)
	esu.SetChannelID(input.ChannelID)
	esu.SetCallback(input.Callback)
	esu.SetTemplateID(input.TemplateID)
	esu.SetStatus(input.Status)
	return esu
}

func (esuo *EventSubscriptionUpdateOne) SetEventSubscription(input *EventSubscription) *EventSubscriptionUpdateOne {
	esuo.SetBoxID(input.BoxID)
	esuo.SetChannelID(input.ChannelID)
	esuo.SetCallback(input.Callback)
	esuo.SetTemplateID(input.TemplateID)
	esuo.SetStatus(input.Status)
	return esuo
}

func (esq *EventSubscriptionQuery) SoftDelete() *EventSubscriptionQuery {
	return esq.Where(eventsubscription.DeletedAtIsNil())
}

func (fuc *FileUploadCreate) SetFileUpload(input *FileUpload) *FileUploadCreate {
	fuc.SetProvider(input.Provider)
	fuc.SetFileName(input.FileName)
	fuc.SetMd5(input.Md5)
	fuc.SetTotalBytes(input.TotalBytes)
	fuc.SetEtag(input.Etag)
	fuc.SetKey(input.Key)
	fuc.SetUploadID(input.UploadID)
	fuc.SetStatus(input.Status)
	fuc.SetType(input.Type)
	fuc.SetAlgoGroupID(input.AlgoGroupID)
	fuc.SetMeta(input.Meta)
	return fuc
}
func (fuc *FileUploadCreate) SoftDelete() *FileUploadCreate {
	fuc.SetDeletedAt(time.Now())
	return fuc
}

func (fuu *FileUploadUpdate) SetFileUpload(input *FileUpload) *FileUploadUpdate {
	fuu.SetProvider(input.Provider)
	fuu.SetFileName(input.FileName)
	fuu.SetMd5(input.Md5)
	fuu.SetTotalBytes(input.TotalBytes)
	fuu.SetEtag(input.Etag)
	fuu.SetKey(input.Key)
	fuu.SetUploadID(input.UploadID)
	fuu.SetStatus(input.Status)
	fuu.SetType(input.Type)
	fuu.SetAlgoGroupID(input.AlgoGroupID)
	fuu.SetMeta(input.Meta)
	return fuu
}

func (fuuo *FileUploadUpdateOne) SetFileUpload(input *FileUpload) *FileUploadUpdateOne {
	fuuo.SetProvider(input.Provider)
	fuuo.SetFileName(input.FileName)
	fuuo.SetMd5(input.Md5)
	fuuo.SetTotalBytes(input.TotalBytes)
	fuuo.SetEtag(input.Etag)
	fuuo.SetKey(input.Key)
	fuuo.SetUploadID(input.UploadID)
	fuuo.SetStatus(input.Status)
	fuuo.SetType(input.Type)
	fuuo.SetAlgoGroupID(input.AlgoGroupID)
	fuuo.SetMeta(input.Meta)
	return fuuo
}

func (fuq *FileUploadQuery) SoftDelete() *FileUploadQuery {
	return fuq.Where(fileupload.DeletedAtIsNil())
}

func (ic *InformCreate) SetInform(input *Inform) *InformCreate {
	ic.SetTenantID(input.TenantID)
	ic.SetAccessOrgList(input.AccessOrgList)
	ic.SetAlarmName(input.AlarmName)
	ic.SetAlarmType(input.AlarmType)
	ic.SetSignName(input.SignName)
	ic.SetNotifyTemplate(input.NotifyTemplate)
	ic.SetTemplateCode(input.TemplateCode)
	ic.SetPhoneNumbers(input.PhoneNumbers)
	ic.SetNotifySwitch(input.NotifySwitch)
	ic.SetTaskName(input.TaskName)
	ic.SetTaskID(input.TaskID)
	return ic
}
func (ic *InformCreate) SoftDelete() *InformCreate {
	ic.SetDeletedAt(time.Now())
	return ic
}

func (iu *InformUpdate) SetInform(input *Inform) *InformUpdate {
	iu.SetTenantID(input.TenantID)
	iu.SetAccessOrgList(input.AccessOrgList)
	iu.SetAlarmName(input.AlarmName)
	iu.SetAlarmType(input.AlarmType)
	iu.SetSignName(input.SignName)
	iu.SetNotifyTemplate(input.NotifyTemplate)
	iu.SetTemplateCode(input.TemplateCode)
	iu.SetPhoneNumbers(input.PhoneNumbers)
	iu.SetNotifySwitch(input.NotifySwitch)
	iu.SetTaskName(input.TaskName)
	iu.SetTaskID(input.TaskID)
	return iu
}

func (iuo *InformUpdateOne) SetInform(input *Inform) *InformUpdateOne {
	iuo.SetTenantID(input.TenantID)
	iuo.SetAccessOrgList(input.AccessOrgList)
	iuo.SetAlarmName(input.AlarmName)
	iuo.SetAlarmType(input.AlarmType)
	iuo.SetSignName(input.SignName)
	iuo.SetNotifyTemplate(input.NotifyTemplate)
	iuo.SetTemplateCode(input.TemplateCode)
	iuo.SetPhoneNumbers(input.PhoneNumbers)
	iuo.SetNotifySwitch(input.NotifySwitch)
	iuo.SetTaskName(input.TaskName)
	iuo.SetTaskID(input.TaskID)
	return iuo
}

func (iq *InformQuery) SoftDelete() *InformQuery {
	return iq.Where(inform.DeletedAtIsNil())
}

func (oc *OrganizationCreate) SetOrganization(input *Organization) *OrganizationCreate {
	oc.SetName(input.Name)
	oc.SetParentID(input.ParentID)
	oc.SetIamRoleID(input.IamRoleID)
	return oc
}
func (oc *OrganizationCreate) SoftDelete() *OrganizationCreate {
	oc.SetDeletedAt(time.Now())
	return oc
}

func (ou *OrganizationUpdate) SetOrganization(input *Organization) *OrganizationUpdate {
	ou.SetName(input.Name)
	ou.SetParentID(input.ParentID)
	ou.SetIamRoleID(input.IamRoleID)
	return ou
}

func (ouo *OrganizationUpdateOne) SetOrganization(input *Organization) *OrganizationUpdateOne {
	ouo.SetName(input.Name)
	ouo.SetParentID(input.ParentID)
	ouo.SetIamRoleID(input.IamRoleID)
	return ouo
}

func (oq *OrganizationQuery) SoftDelete() *OrganizationQuery {
	return oq.Where(organization.DeletedAtIsNil())
}

func (sc *SettingCreate) SetSetting(input *Setting) *SettingCreate {
	sc.SetName(input.Name)
	sc.SetSerialNumber(input.SerialNumber)
	sc.SetVersion(input.Version)
	sc.SetModel(input.Model)
	sc.SetWorkspaceID(input.WorkspaceID)
	return sc
}

func (su *SettingUpdate) SetSetting(input *Setting) *SettingUpdate {
	su.SetName(input.Name)
	su.SetSerialNumber(input.SerialNumber)
	su.SetVersion(input.Version)
	su.SetModel(input.Model)
	su.SetWorkspaceID(input.WorkspaceID)
	return su
}

func (suo *SettingUpdateOne) SetSetting(input *Setting) *SettingUpdateOne {
	suo.SetName(input.Name)
	suo.SetSerialNumber(input.SerialNumber)
	suo.SetVersion(input.Version)
	suo.SetModel(input.Model)
	suo.SetWorkspaceID(input.WorkspaceID)
	return suo
}

func (sc *SignatureCreate) SetSignature(input *Signature) *SignatureCreate {
	sc.SetBoxID(input.BoxID)
	sc.SetAppID(input.AppID)
	sc.SetAppSecret(input.AppSecret)
	return sc
}
func (sc *SignatureCreate) SoftDelete() *SignatureCreate {
	sc.SetDeletedAt(time.Now())
	return sc
}

func (su *SignatureUpdate) SetSignature(input *Signature) *SignatureUpdate {
	su.SetBoxID(input.BoxID)
	su.SetAppID(input.AppID)
	su.SetAppSecret(input.AppSecret)
	return su
}

func (suo *SignatureUpdateOne) SetSignature(input *Signature) *SignatureUpdateOne {
	suo.SetBoxID(input.BoxID)
	suo.SetAppID(input.AppID)
	suo.SetAppSecret(input.AppSecret)
	return suo
}

func (sq *SignatureQuery) SoftDelete() *SignatureQuery {
	return sq.Where(signature.DeletedAtIsNil())
}

func (tc *TaskCreate) SetTask(input *Task) *TaskCreate {
	tc.SetTenantID(input.TenantID)
	tc.SetAccessOrgList(input.AccessOrgList)
	tc.SetName(input.Name)
	tc.SetType(input.Type)
	tc.SetAlgoID(input.AlgoID)
	tc.SetAlgoInterval(input.AlgoInterval)
	tc.SetAlgoExtra(input.AlgoExtra)
	tc.SetExtend(input.Extend)
	tc.SetDeviceID(input.DeviceID)
	tc.SetLastStartTime(input.LastStartTime)
	tc.SetStatus(input.Status)
	tc.SetAlgoGroupID(input.AlgoGroupID)
	tc.SetParentID(input.ParentID)
	tc.SetIsWarn(input.IsWarn)
	tc.SetPeriod(input.Period)
	tc.SetAlgoConfig(input.AlgoConfig)
	tc.SetReason(input.Reason)
	tc.SetAllowTimeType(input.AllowTimeType)
	return tc
}
func (tc *TaskCreate) SoftDelete() *TaskCreate {
	tc.SetDeletedAt(time.Now())
	return tc
}

func (tu *TaskUpdate) SetTask(input *Task) *TaskUpdate {
	tu.SetTenantID(input.TenantID)
	tu.SetAccessOrgList(input.AccessOrgList)
	tu.SetName(input.Name)
	tu.SetType(input.Type)
	tu.SetAlgoID(input.AlgoID)
	tu.SetAlgoInterval(input.AlgoInterval)
	tu.SetAlgoExtra(input.AlgoExtra)
	tu.SetExtend(input.Extend)
	tu.SetDeviceID(input.DeviceID)
	tu.SetLastStartTime(input.LastStartTime)
	tu.SetStatus(input.Status)
	tu.SetAlgoGroupID(input.AlgoGroupID)
	tu.SetParentID(input.ParentID)
	tu.SetIsWarn(input.IsWarn)
	tu.SetPeriod(input.Period)
	tu.SetAlgoConfig(input.AlgoConfig)
	tu.SetReason(input.Reason)
	tu.SetAllowTimeType(input.AllowTimeType)
	return tu
}

func (tuo *TaskUpdateOne) SetTask(input *Task) *TaskUpdateOne {
	tuo.SetTenantID(input.TenantID)
	tuo.SetAccessOrgList(input.AccessOrgList)
	tuo.SetName(input.Name)
	tuo.SetType(input.Type)
	tuo.SetAlgoID(input.AlgoID)
	tuo.SetAlgoInterval(input.AlgoInterval)
	tuo.SetAlgoExtra(input.AlgoExtra)
	tuo.SetExtend(input.Extend)
	tuo.SetDeviceID(input.DeviceID)
	tuo.SetLastStartTime(input.LastStartTime)
	tuo.SetStatus(input.Status)
	tuo.SetAlgoGroupID(input.AlgoGroupID)
	tuo.SetParentID(input.ParentID)
	tuo.SetIsWarn(input.IsWarn)
	tuo.SetPeriod(input.Period)
	tuo.SetAlgoConfig(input.AlgoConfig)
	tuo.SetReason(input.Reason)
	tuo.SetAllowTimeType(input.AllowTimeType)
	return tuo
}

func (tq *TaskQuery) SoftDelete() *TaskQuery {
	return tq.Where(task.DeletedAtIsNil())
}

func (tcc *TaskCameraCreate) SetTaskCamera(input *TaskCamera) *TaskCameraCreate {
	tcc.SetTenantID(input.TenantID)
	tcc.SetAccessOrgList(input.AccessOrgList)
	tcc.SetTaskID(input.TaskID)
	tcc.SetCameraID(input.CameraID)
	tcc.SetMultiImgBox(input.MultiImgBox)
	return tcc
}

func (tcu *TaskCameraUpdate) SetTaskCamera(input *TaskCamera) *TaskCameraUpdate {
	tcu.SetTenantID(input.TenantID)
	tcu.SetAccessOrgList(input.AccessOrgList)
	tcu.SetTaskID(input.TaskID)
	tcu.SetCameraID(input.CameraID)
	tcu.SetMultiImgBox(input.MultiImgBox)
	return tcu
}

func (tcuo *TaskCameraUpdateOne) SetTaskCamera(input *TaskCamera) *TaskCameraUpdateOne {
	tcuo.SetTenantID(input.TenantID)
	tcuo.SetAccessOrgList(input.AccessOrgList)
	tcuo.SetTaskID(input.TaskID)
	tcuo.SetCameraID(input.CameraID)
	tcuo.SetMultiImgBox(input.MultiImgBox)
	return tcuo
}

func (tlc *TaskLimitsCreate) SetTaskLimits(input *TaskLimits) *TaskLimitsCreate {
	tlc.SetModel(input.Model)
	tlc.SetMaxCameraNum(input.MaxCameraNum)
	tlc.SetAlgoNum(input.AlgoNum)
	tlc.SetMaxSubTaskNum(input.MaxSubTaskNum)
	return tlc
}
func (tlc *TaskLimitsCreate) SoftDelete() *TaskLimitsCreate {
	tlc.SetDeletedAt(time.Now())
	return tlc
}

func (tlu *TaskLimitsUpdate) SetTaskLimits(input *TaskLimits) *TaskLimitsUpdate {
	tlu.SetModel(input.Model)
	tlu.SetMaxCameraNum(input.MaxCameraNum)
	tlu.SetAlgoNum(input.AlgoNum)
	tlu.SetMaxSubTaskNum(input.MaxSubTaskNum)
	return tlu
}

func (tluo *TaskLimitsUpdateOne) SetTaskLimits(input *TaskLimits) *TaskLimitsUpdateOne {
	tluo.SetModel(input.Model)
	tluo.SetMaxCameraNum(input.MaxCameraNum)
	tluo.SetAlgoNum(input.AlgoNum)
	tluo.SetMaxSubTaskNum(input.MaxSubTaskNum)
	return tluo
}

func (tlq *TaskLimitsQuery) SoftDelete() *TaskLimitsQuery {
	return tlq.Where(tasklimits.DeletedAtIsNil())
}

func (upc *UpPlatformCreate) SetUpPlatform(input *UpPlatform) *UpPlatformCreate {
	upc.SetTenantID(input.TenantID)
	upc.SetAccessOrgList(input.AccessOrgList)
	upc.SetSipID(input.SipID)
	upc.SetSipDomain(input.SipDomain)
	upc.SetSipIP(input.SipIP)
	upc.SetSipPort(input.SipPort)
	upc.SetSipUser(input.SipUser)
	upc.SetSipPassword(input.SipPassword)
	upc.SetDescription(input.Description)
	upc.SetHeartbeatInterval(input.HeartbeatInterval)
	upc.SetRegisterInterval(input.RegisterInterval)
	upc.SetTransType(input.TransType)
	upc.SetGBID(input.GBID)
	upc.SetCascadestatus(input.Cascadestatus)
	upc.SetRegistrationStatus(input.RegistrationStatus)
	return upc
}

func (upu *UpPlatformUpdate) SetUpPlatform(input *UpPlatform) *UpPlatformUpdate {
	upu.SetTenantID(input.TenantID)
	upu.SetAccessOrgList(input.AccessOrgList)
	upu.SetSipID(input.SipID)
	upu.SetSipDomain(input.SipDomain)
	upu.SetSipIP(input.SipIP)
	upu.SetSipPort(input.SipPort)
	upu.SetSipUser(input.SipUser)
	upu.SetSipPassword(input.SipPassword)
	upu.SetDescription(input.Description)
	upu.SetHeartbeatInterval(input.HeartbeatInterval)
	upu.SetRegisterInterval(input.RegisterInterval)
	upu.SetTransType(input.TransType)
	upu.SetGBID(input.GBID)
	upu.SetCascadestatus(input.Cascadestatus)
	upu.SetRegistrationStatus(input.RegistrationStatus)
	return upu
}

func (upuo *UpPlatformUpdateOne) SetUpPlatform(input *UpPlatform) *UpPlatformUpdateOne {
	upuo.SetTenantID(input.TenantID)
	upuo.SetAccessOrgList(input.AccessOrgList)
	upuo.SetSipID(input.SipID)
	upuo.SetSipDomain(input.SipDomain)
	upuo.SetSipIP(input.SipIP)
	upuo.SetSipPort(input.SipPort)
	upuo.SetSipUser(input.SipUser)
	upuo.SetSipPassword(input.SipPassword)
	upuo.SetDescription(input.Description)
	upuo.SetHeartbeatInterval(input.HeartbeatInterval)
	upuo.SetRegisterInterval(input.RegisterInterval)
	upuo.SetTransType(input.TransType)
	upuo.SetGBID(input.GBID)
	upuo.SetCascadestatus(input.Cascadestatus)
	upuo.SetRegistrationStatus(input.RegistrationStatus)
	return upuo
}

func (uc *UserCreate) SetUser(input *User) *UserCreate {
	uc.SetName(input.Name)
	uc.SetPassword(input.Password)
	return uc
}
func (uc *UserCreate) SoftDelete() *UserCreate {
	uc.SetDeletedAt(time.Now())
	return uc
}

func (uu *UserUpdate) SetUser(input *User) *UserUpdate {
	uu.SetName(input.Name)
	uu.SetPassword(input.Password)
	return uu
}

func (uuo *UserUpdateOne) SetUser(input *User) *UserUpdateOne {
	uuo.SetName(input.Name)
	uuo.SetPassword(input.Password)
	return uuo
}

func (uq *UserQuery) SoftDelete() *UserQuery {
	return uq.Where(user.DeletedAtIsNil())
}

func (wpc *WarnPushCreate) SetWarnPush(input *WarnPush) *WarnPushCreate {
	wpc.SetTenantID(input.TenantID)
	wpc.SetAccessOrgList(input.AccessOrgList)
	wpc.SetName(input.Name)
	wpc.SetType(input.Type)
	wpc.SetURL(input.URL)
	wpc.SetRemark(input.Remark)
	wpc.SetMode(input.Mode)
	wpc.SetStatus(input.Status)
	return wpc
}
func (wpc *WarnPushCreate) SoftDelete() *WarnPushCreate {
	wpc.SetDeletedAt(time.Now())
	return wpc
}

func (wpu *WarnPushUpdate) SetWarnPush(input *WarnPush) *WarnPushUpdate {
	wpu.SetTenantID(input.TenantID)
	wpu.SetAccessOrgList(input.AccessOrgList)
	wpu.SetName(input.Name)
	wpu.SetType(input.Type)
	wpu.SetURL(input.URL)
	wpu.SetRemark(input.Remark)
	wpu.SetMode(input.Mode)
	wpu.SetStatus(input.Status)
	return wpu
}

func (wpuo *WarnPushUpdateOne) SetWarnPush(input *WarnPush) *WarnPushUpdateOne {
	wpuo.SetTenantID(input.TenantID)
	wpuo.SetAccessOrgList(input.AccessOrgList)
	wpuo.SetName(input.Name)
	wpuo.SetType(input.Type)
	wpuo.SetURL(input.URL)
	wpuo.SetRemark(input.Remark)
	wpuo.SetMode(input.Mode)
	wpuo.SetStatus(input.Status)
	return wpuo
}

func (wpq *WarnPushQuery) SoftDelete() *WarnPushQuery {
	return wpq.Where(warnpush.DeletedAtIsNil())
}

func (wplc *WarnPushLogCreate) SetWarnPushLog(input *WarnPushLog) *WarnPushLogCreate {
	wplc.SetTenantID(input.TenantID)
	wplc.SetAccessOrgList(input.AccessOrgList)
	wplc.SetPushID(input.PushID)
	wplc.SetParam(input.Param)
	wplc.SetRemark(input.Remark)
	wplc.SetStatus(input.Status)
	return wplc
}
func (wplc *WarnPushLogCreate) SoftDelete() *WarnPushLogCreate {
	wplc.SetDeletedAt(time.Now())
	return wplc
}

func (wplu *WarnPushLogUpdate) SetWarnPushLog(input *WarnPushLog) *WarnPushLogUpdate {
	wplu.SetTenantID(input.TenantID)
	wplu.SetAccessOrgList(input.AccessOrgList)
	wplu.SetPushID(input.PushID)
	wplu.SetParam(input.Param)
	wplu.SetRemark(input.Remark)
	wplu.SetStatus(input.Status)
	return wplu
}

func (wpluo *WarnPushLogUpdateOne) SetWarnPushLog(input *WarnPushLog) *WarnPushLogUpdateOne {
	wpluo.SetTenantID(input.TenantID)
	wpluo.SetAccessOrgList(input.AccessOrgList)
	wpluo.SetPushID(input.PushID)
	wpluo.SetParam(input.Param)
	wpluo.SetRemark(input.Remark)
	wpluo.SetStatus(input.Status)
	return wpluo
}

func (wplq *WarnPushLogQuery) SoftDelete() *WarnPushLogQuery {
	return wplq.Where(warnpushlog.DeletedAtIsNil())
}

func (wsec *WarnSmsErrCreate) SetWarnSmsErr(input *WarnSmsErr) *WarnSmsErrCreate {
	wsec.SetTenantID(input.TenantID)
	wsec.SetAccessOrgList(input.AccessOrgList)
	wsec.SetAppName(input.AppName)
	wsec.SetRecordID(input.RecordID)
	wsec.SetErrorMsg(input.ErrorMsg)
	return wsec
}

func (wseu *WarnSmsErrUpdate) SetWarnSmsErr(input *WarnSmsErr) *WarnSmsErrUpdate {
	wseu.SetTenantID(input.TenantID)
	wseu.SetAccessOrgList(input.AccessOrgList)
	wseu.SetAppName(input.AppName)
	wseu.SetRecordID(input.RecordID)
	wseu.SetErrorMsg(input.ErrorMsg)
	return wseu
}

func (wseuo *WarnSmsErrUpdateOne) SetWarnSmsErr(input *WarnSmsErr) *WarnSmsErrUpdateOne {
	wseuo.SetTenantID(input.TenantID)
	wseuo.SetAccessOrgList(input.AccessOrgList)
	wseuo.SetAppName(input.AppName)
	wseuo.SetRecordID(input.RecordID)
	wseuo.SetErrorMsg(input.ErrorMsg)
	return wseuo
}

func (wtc *WarningTypeCreate) SetWarningType(input *WarningType) *WarningTypeCreate {
	wtc.SetAlarmType(input.AlarmType)
	wtc.SetAlarmName(input.AlarmName)
	return wtc
}
func (wtc *WarningTypeCreate) SoftDelete() *WarningTypeCreate {
	wtc.SetDeletedAt(time.Now())
	return wtc
}

func (wtu *WarningTypeUpdate) SetWarningType(input *WarningType) *WarningTypeUpdate {
	wtu.SetAlarmType(input.AlarmType)
	wtu.SetAlarmName(input.AlarmName)
	return wtu
}

func (wtuo *WarningTypeUpdateOne) SetWarningType(input *WarningType) *WarningTypeUpdateOne {
	wtuo.SetAlarmType(input.AlarmType)
	wtuo.SetAlarmName(input.AlarmName)
	return wtuo
}

func (wtq *WarningTypeQuery) SoftDelete() *WarningTypeQuery {
	return wtq.Where(warningtype.DeletedAtIsNil())
}
