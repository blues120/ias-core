// Code generated by ent, DO NOT EDIT.

package algorithm

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDescription, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldVersion, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAppName, v))
}

// AlarmType applies equality check predicate on the "alarm_type" field. It's identical to AlarmTypeEQ.
func AlarmType(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlarmType, v))
}

// AlarmName applies equality check predicate on the "alarm_name" field. It's identical to AlarmNameEQ.
func AlarmName(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlarmName, v))
}

// Notify applies equality check predicate on the "notify" field. It's identical to NotifyEQ.
func Notify(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldNotify, v))
}

// DrawType applies equality check predicate on the "draw_type" field. It's identical to DrawTypeEQ.
func DrawType(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDrawType, v))
}

// BaseType applies equality check predicate on the "base_type" field. It's identical to BaseTypeEQ.
func BaseType(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldBaseType, v))
}

// Available applies equality check predicate on the "available" field. It's identical to AvailableEQ.
func Available(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAvailable, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldImage, v))
}

// LabelMap applies equality check predicate on the "label_map" field. It's identical to LabelMapEQ.
func LabelMap(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldLabelMap, v))
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldTarget, v))
}

// AlgoNameEn applies equality check predicate on the "algo_name_en" field. It's identical to AlgoNameEnEQ.
func AlgoNameEn(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoNameEn, v))
}

// AlgoGroupID applies equality check predicate on the "algo_group_id" field. It's identical to AlgoGroupIDEQ.
func AlgoGroupID(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupName applies equality check predicate on the "algo_group_name" field. It's identical to AlgoGroupNameEQ.
func AlgoGroupName(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupName, v))
}

// AlgoGroupVersion applies equality check predicate on the "algo_group_version" field. It's identical to AlgoGroupVersionEQ.
func AlgoGroupVersion(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupVersion, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldConfig, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldProvider, v))
}

// AlgoID applies equality check predicate on the "algo_id" field. It's identical to AlgoIDEQ.
func AlgoID(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoID, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldPlatform, v))
}

// DeviceModel applies equality check predicate on the "device_model" field. It's identical to DeviceModelEQ.
func DeviceModel(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDeviceModel, v))
}

// IsGroupType applies equality check predicate on the "is_group_type" field. It's identical to IsGroupTypeEQ.
func IsGroupType(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldIsGroupType, v))
}

// Prefix applies equality check predicate on the "prefix" field. It's identical to PrefixEQ.
func Prefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldPrefix, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldDescription, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldVersion, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAppName, v))
}

// AlarmTypeEQ applies the EQ predicate on the "alarm_type" field.
func AlarmTypeEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlarmType, v))
}

// AlarmTypeNEQ applies the NEQ predicate on the "alarm_type" field.
func AlarmTypeNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlarmType, v))
}

// AlarmTypeIn applies the In predicate on the "alarm_type" field.
func AlarmTypeIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlarmType, vs...))
}

// AlarmTypeNotIn applies the NotIn predicate on the "alarm_type" field.
func AlarmTypeNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlarmType, vs...))
}

// AlarmTypeGT applies the GT predicate on the "alarm_type" field.
func AlarmTypeGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlarmType, v))
}

// AlarmTypeGTE applies the GTE predicate on the "alarm_type" field.
func AlarmTypeGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlarmType, v))
}

// AlarmTypeLT applies the LT predicate on the "alarm_type" field.
func AlarmTypeLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlarmType, v))
}

// AlarmTypeLTE applies the LTE predicate on the "alarm_type" field.
func AlarmTypeLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlarmType, v))
}

// AlarmTypeContains applies the Contains predicate on the "alarm_type" field.
func AlarmTypeContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlarmType, v))
}

// AlarmTypeHasPrefix applies the HasPrefix predicate on the "alarm_type" field.
func AlarmTypeHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlarmType, v))
}

// AlarmTypeHasSuffix applies the HasSuffix predicate on the "alarm_type" field.
func AlarmTypeHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlarmType, v))
}

// AlarmTypeEqualFold applies the EqualFold predicate on the "alarm_type" field.
func AlarmTypeEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlarmType, v))
}

// AlarmTypeContainsFold applies the ContainsFold predicate on the "alarm_type" field.
func AlarmTypeContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlarmType, v))
}

// AlarmNameEQ applies the EQ predicate on the "alarm_name" field.
func AlarmNameEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlarmName, v))
}

// AlarmNameNEQ applies the NEQ predicate on the "alarm_name" field.
func AlarmNameNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlarmName, v))
}

// AlarmNameIn applies the In predicate on the "alarm_name" field.
func AlarmNameIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlarmName, vs...))
}

// AlarmNameNotIn applies the NotIn predicate on the "alarm_name" field.
func AlarmNameNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlarmName, vs...))
}

// AlarmNameGT applies the GT predicate on the "alarm_name" field.
func AlarmNameGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlarmName, v))
}

// AlarmNameGTE applies the GTE predicate on the "alarm_name" field.
func AlarmNameGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlarmName, v))
}

// AlarmNameLT applies the LT predicate on the "alarm_name" field.
func AlarmNameLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlarmName, v))
}

// AlarmNameLTE applies the LTE predicate on the "alarm_name" field.
func AlarmNameLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlarmName, v))
}

// AlarmNameContains applies the Contains predicate on the "alarm_name" field.
func AlarmNameContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlarmName, v))
}

// AlarmNameHasPrefix applies the HasPrefix predicate on the "alarm_name" field.
func AlarmNameHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlarmName, v))
}

// AlarmNameHasSuffix applies the HasSuffix predicate on the "alarm_name" field.
func AlarmNameHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlarmName, v))
}

// AlarmNameEqualFold applies the EqualFold predicate on the "alarm_name" field.
func AlarmNameEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlarmName, v))
}

// AlarmNameContainsFold applies the ContainsFold predicate on the "alarm_name" field.
func AlarmNameContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlarmName, v))
}

// NotifyEQ applies the EQ predicate on the "notify" field.
func NotifyEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldNotify, v))
}

// NotifyNEQ applies the NEQ predicate on the "notify" field.
func NotifyNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldNotify, v))
}

// NotifyIn applies the In predicate on the "notify" field.
func NotifyIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldNotify, vs...))
}

// NotifyNotIn applies the NotIn predicate on the "notify" field.
func NotifyNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldNotify, vs...))
}

// NotifyGT applies the GT predicate on the "notify" field.
func NotifyGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldNotify, v))
}

// NotifyGTE applies the GTE predicate on the "notify" field.
func NotifyGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldNotify, v))
}

// NotifyLT applies the LT predicate on the "notify" field.
func NotifyLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldNotify, v))
}

// NotifyLTE applies the LTE predicate on the "notify" field.
func NotifyLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldNotify, v))
}

// DrawTypeEQ applies the EQ predicate on the "draw_type" field.
func DrawTypeEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDrawType, v))
}

// DrawTypeNEQ applies the NEQ predicate on the "draw_type" field.
func DrawTypeNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldDrawType, v))
}

// DrawTypeIn applies the In predicate on the "draw_type" field.
func DrawTypeIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldDrawType, vs...))
}

// DrawTypeNotIn applies the NotIn predicate on the "draw_type" field.
func DrawTypeNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldDrawType, vs...))
}

// DrawTypeGT applies the GT predicate on the "draw_type" field.
func DrawTypeGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldDrawType, v))
}

// DrawTypeGTE applies the GTE predicate on the "draw_type" field.
func DrawTypeGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldDrawType, v))
}

// DrawTypeLT applies the LT predicate on the "draw_type" field.
func DrawTypeLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldDrawType, v))
}

// DrawTypeLTE applies the LTE predicate on the "draw_type" field.
func DrawTypeLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldDrawType, v))
}

// BaseTypeEQ applies the EQ predicate on the "base_type" field.
func BaseTypeEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldBaseType, v))
}

// BaseTypeNEQ applies the NEQ predicate on the "base_type" field.
func BaseTypeNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldBaseType, v))
}

// BaseTypeIn applies the In predicate on the "base_type" field.
func BaseTypeIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldBaseType, vs...))
}

// BaseTypeNotIn applies the NotIn predicate on the "base_type" field.
func BaseTypeNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldBaseType, vs...))
}

// BaseTypeGT applies the GT predicate on the "base_type" field.
func BaseTypeGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldBaseType, v))
}

// BaseTypeGTE applies the GTE predicate on the "base_type" field.
func BaseTypeGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldBaseType, v))
}

// BaseTypeLT applies the LT predicate on the "base_type" field.
func BaseTypeLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldBaseType, v))
}

// BaseTypeLTE applies the LTE predicate on the "base_type" field.
func BaseTypeLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldBaseType, v))
}

// AvailableEQ applies the EQ predicate on the "available" field.
func AvailableEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAvailable, v))
}

// AvailableNEQ applies the NEQ predicate on the "available" field.
func AvailableNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAvailable, v))
}

// AvailableIn applies the In predicate on the "available" field.
func AvailableIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAvailable, vs...))
}

// AvailableNotIn applies the NotIn predicate on the "available" field.
func AvailableNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAvailable, vs...))
}

// AvailableGT applies the GT predicate on the "available" field.
func AvailableGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAvailable, v))
}

// AvailableGTE applies the GTE predicate on the "available" field.
func AvailableGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAvailable, v))
}

// AvailableLT applies the LT predicate on the "available" field.
func AvailableLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAvailable, v))
}

// AvailableLTE applies the LTE predicate on the "available" field.
func AvailableLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAvailable, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldImage, v))
}

// LabelMapEQ applies the EQ predicate on the "label_map" field.
func LabelMapEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldLabelMap, v))
}

// LabelMapNEQ applies the NEQ predicate on the "label_map" field.
func LabelMapNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldLabelMap, v))
}

// LabelMapIn applies the In predicate on the "label_map" field.
func LabelMapIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldLabelMap, vs...))
}

// LabelMapNotIn applies the NotIn predicate on the "label_map" field.
func LabelMapNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldLabelMap, vs...))
}

// LabelMapGT applies the GT predicate on the "label_map" field.
func LabelMapGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldLabelMap, v))
}

// LabelMapGTE applies the GTE predicate on the "label_map" field.
func LabelMapGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldLabelMap, v))
}

// LabelMapLT applies the LT predicate on the "label_map" field.
func LabelMapLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldLabelMap, v))
}

// LabelMapLTE applies the LTE predicate on the "label_map" field.
func LabelMapLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldLabelMap, v))
}

// LabelMapContains applies the Contains predicate on the "label_map" field.
func LabelMapContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldLabelMap, v))
}

// LabelMapHasPrefix applies the HasPrefix predicate on the "label_map" field.
func LabelMapHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldLabelMap, v))
}

// LabelMapHasSuffix applies the HasSuffix predicate on the "label_map" field.
func LabelMapHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldLabelMap, v))
}

// LabelMapIsNil applies the IsNil predicate on the "label_map" field.
func LabelMapIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldLabelMap))
}

// LabelMapNotNil applies the NotNil predicate on the "label_map" field.
func LabelMapNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldLabelMap))
}

// LabelMapEqualFold applies the EqualFold predicate on the "label_map" field.
func LabelMapEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldLabelMap, v))
}

// LabelMapContainsFold applies the ContainsFold predicate on the "label_map" field.
func LabelMapContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldLabelMap, v))
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldTarget, v))
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldTarget, v))
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldTarget, vs...))
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldTarget, vs...))
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldTarget, v))
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldTarget, v))
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldTarget, v))
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldTarget, v))
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldTarget, v))
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldTarget, v))
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldTarget, v))
}

// TargetIsNil applies the IsNil predicate on the "target" field.
func TargetIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldTarget))
}

// TargetNotNil applies the NotNil predicate on the "target" field.
func TargetNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldTarget))
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldTarget, v))
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldTarget, v))
}

// AlgoNameEnEQ applies the EQ predicate on the "algo_name_en" field.
func AlgoNameEnEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoNameEn, v))
}

// AlgoNameEnNEQ applies the NEQ predicate on the "algo_name_en" field.
func AlgoNameEnNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlgoNameEn, v))
}

// AlgoNameEnIn applies the In predicate on the "algo_name_en" field.
func AlgoNameEnIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlgoNameEn, vs...))
}

// AlgoNameEnNotIn applies the NotIn predicate on the "algo_name_en" field.
func AlgoNameEnNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlgoNameEn, vs...))
}

// AlgoNameEnGT applies the GT predicate on the "algo_name_en" field.
func AlgoNameEnGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlgoNameEn, v))
}

// AlgoNameEnGTE applies the GTE predicate on the "algo_name_en" field.
func AlgoNameEnGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlgoNameEn, v))
}

// AlgoNameEnLT applies the LT predicate on the "algo_name_en" field.
func AlgoNameEnLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlgoNameEn, v))
}

// AlgoNameEnLTE applies the LTE predicate on the "algo_name_en" field.
func AlgoNameEnLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlgoNameEn, v))
}

// AlgoNameEnContains applies the Contains predicate on the "algo_name_en" field.
func AlgoNameEnContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlgoNameEn, v))
}

// AlgoNameEnHasPrefix applies the HasPrefix predicate on the "algo_name_en" field.
func AlgoNameEnHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlgoNameEn, v))
}

// AlgoNameEnHasSuffix applies the HasSuffix predicate on the "algo_name_en" field.
func AlgoNameEnHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlgoNameEn, v))
}

// AlgoNameEnIsNil applies the IsNil predicate on the "algo_name_en" field.
func AlgoNameEnIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldAlgoNameEn))
}

// AlgoNameEnNotNil applies the NotNil predicate on the "algo_name_en" field.
func AlgoNameEnNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldAlgoNameEn))
}

// AlgoNameEnEqualFold applies the EqualFold predicate on the "algo_name_en" field.
func AlgoNameEnEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlgoNameEn, v))
}

// AlgoNameEnContainsFold applies the ContainsFold predicate on the "algo_name_en" field.
func AlgoNameEnContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlgoNameEn, v))
}

// AlgoGroupIDEQ applies the EQ predicate on the "algo_group_id" field.
func AlgoGroupIDEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDNEQ applies the NEQ predicate on the "algo_group_id" field.
func AlgoGroupIDNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlgoGroupID, v))
}

// AlgoGroupIDIn applies the In predicate on the "algo_group_id" field.
func AlgoGroupIDIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDNotIn applies the NotIn predicate on the "algo_group_id" field.
func AlgoGroupIDNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlgoGroupID, vs...))
}

// AlgoGroupIDGT applies the GT predicate on the "algo_group_id" field.
func AlgoGroupIDGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlgoGroupID, v))
}

// AlgoGroupIDGTE applies the GTE predicate on the "algo_group_id" field.
func AlgoGroupIDGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDLT applies the LT predicate on the "algo_group_id" field.
func AlgoGroupIDLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlgoGroupID, v))
}

// AlgoGroupIDLTE applies the LTE predicate on the "algo_group_id" field.
func AlgoGroupIDLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlgoGroupID, v))
}

// AlgoGroupIDIsNil applies the IsNil predicate on the "algo_group_id" field.
func AlgoGroupIDIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldAlgoGroupID))
}

// AlgoGroupIDNotNil applies the NotNil predicate on the "algo_group_id" field.
func AlgoGroupIDNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldAlgoGroupID))
}

// AlgoGroupNameEQ applies the EQ predicate on the "algo_group_name" field.
func AlgoGroupNameEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupName, v))
}

// AlgoGroupNameNEQ applies the NEQ predicate on the "algo_group_name" field.
func AlgoGroupNameNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlgoGroupName, v))
}

// AlgoGroupNameIn applies the In predicate on the "algo_group_name" field.
func AlgoGroupNameIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlgoGroupName, vs...))
}

// AlgoGroupNameNotIn applies the NotIn predicate on the "algo_group_name" field.
func AlgoGroupNameNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlgoGroupName, vs...))
}

// AlgoGroupNameGT applies the GT predicate on the "algo_group_name" field.
func AlgoGroupNameGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlgoGroupName, v))
}

// AlgoGroupNameGTE applies the GTE predicate on the "algo_group_name" field.
func AlgoGroupNameGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlgoGroupName, v))
}

// AlgoGroupNameLT applies the LT predicate on the "algo_group_name" field.
func AlgoGroupNameLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlgoGroupName, v))
}

// AlgoGroupNameLTE applies the LTE predicate on the "algo_group_name" field.
func AlgoGroupNameLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlgoGroupName, v))
}

// AlgoGroupNameContains applies the Contains predicate on the "algo_group_name" field.
func AlgoGroupNameContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlgoGroupName, v))
}

// AlgoGroupNameHasPrefix applies the HasPrefix predicate on the "algo_group_name" field.
func AlgoGroupNameHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlgoGroupName, v))
}

// AlgoGroupNameHasSuffix applies the HasSuffix predicate on the "algo_group_name" field.
func AlgoGroupNameHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlgoGroupName, v))
}

// AlgoGroupNameIsNil applies the IsNil predicate on the "algo_group_name" field.
func AlgoGroupNameIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldAlgoGroupName))
}

// AlgoGroupNameNotNil applies the NotNil predicate on the "algo_group_name" field.
func AlgoGroupNameNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldAlgoGroupName))
}

// AlgoGroupNameEqualFold applies the EqualFold predicate on the "algo_group_name" field.
func AlgoGroupNameEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlgoGroupName, v))
}

// AlgoGroupNameContainsFold applies the ContainsFold predicate on the "algo_group_name" field.
func AlgoGroupNameContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlgoGroupName, v))
}

// AlgoGroupVersionEQ applies the EQ predicate on the "algo_group_version" field.
func AlgoGroupVersionEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionNEQ applies the NEQ predicate on the "algo_group_version" field.
func AlgoGroupVersionNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionIn applies the In predicate on the "algo_group_version" field.
func AlgoGroupVersionIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlgoGroupVersion, vs...))
}

// AlgoGroupVersionNotIn applies the NotIn predicate on the "algo_group_version" field.
func AlgoGroupVersionNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlgoGroupVersion, vs...))
}

// AlgoGroupVersionGT applies the GT predicate on the "algo_group_version" field.
func AlgoGroupVersionGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionGTE applies the GTE predicate on the "algo_group_version" field.
func AlgoGroupVersionGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionLT applies the LT predicate on the "algo_group_version" field.
func AlgoGroupVersionLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionLTE applies the LTE predicate on the "algo_group_version" field.
func AlgoGroupVersionLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionContains applies the Contains predicate on the "algo_group_version" field.
func AlgoGroupVersionContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionHasPrefix applies the HasPrefix predicate on the "algo_group_version" field.
func AlgoGroupVersionHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionHasSuffix applies the HasSuffix predicate on the "algo_group_version" field.
func AlgoGroupVersionHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionIsNil applies the IsNil predicate on the "algo_group_version" field.
func AlgoGroupVersionIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldAlgoGroupVersion))
}

// AlgoGroupVersionNotNil applies the NotNil predicate on the "algo_group_version" field.
func AlgoGroupVersionNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldAlgoGroupVersion))
}

// AlgoGroupVersionEqualFold applies the EqualFold predicate on the "algo_group_version" field.
func AlgoGroupVersionEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlgoGroupVersion, v))
}

// AlgoGroupVersionContainsFold applies the ContainsFold predicate on the "algo_group_version" field.
func AlgoGroupVersionContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlgoGroupVersion, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldConfig, v))
}

// ConfigContains applies the Contains predicate on the "config" field.
func ConfigContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldConfig, v))
}

// ConfigHasPrefix applies the HasPrefix predicate on the "config" field.
func ConfigHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldConfig, v))
}

// ConfigHasSuffix applies the HasSuffix predicate on the "config" field.
func ConfigHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldConfig, v))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldConfig))
}

// ConfigEqualFold applies the EqualFold predicate on the "config" field.
func ConfigEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldConfig, v))
}

// ConfigContainsFold applies the ContainsFold predicate on the "config" field.
func ConfigContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldConfig, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderIsNil applies the IsNil predicate on the "provider" field.
func ProviderIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldProvider))
}

// ProviderNotNil applies the NotNil predicate on the "provider" field.
func ProviderNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldProvider))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldProvider, v))
}

// AlgoIDEQ applies the EQ predicate on the "algo_id" field.
func AlgoIDEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldAlgoID, v))
}

// AlgoIDNEQ applies the NEQ predicate on the "algo_id" field.
func AlgoIDNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldAlgoID, v))
}

// AlgoIDIn applies the In predicate on the "algo_id" field.
func AlgoIDIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldAlgoID, vs...))
}

// AlgoIDNotIn applies the NotIn predicate on the "algo_id" field.
func AlgoIDNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldAlgoID, vs...))
}

// AlgoIDGT applies the GT predicate on the "algo_id" field.
func AlgoIDGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldAlgoID, v))
}

// AlgoIDGTE applies the GTE predicate on the "algo_id" field.
func AlgoIDGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldAlgoID, v))
}

// AlgoIDLT applies the LT predicate on the "algo_id" field.
func AlgoIDLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldAlgoID, v))
}

// AlgoIDLTE applies the LTE predicate on the "algo_id" field.
func AlgoIDLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldAlgoID, v))
}

// AlgoIDContains applies the Contains predicate on the "algo_id" field.
func AlgoIDContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldAlgoID, v))
}

// AlgoIDHasPrefix applies the HasPrefix predicate on the "algo_id" field.
func AlgoIDHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldAlgoID, v))
}

// AlgoIDHasSuffix applies the HasSuffix predicate on the "algo_id" field.
func AlgoIDHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldAlgoID, v))
}

// AlgoIDIsNil applies the IsNil predicate on the "algo_id" field.
func AlgoIDIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldAlgoID))
}

// AlgoIDNotNil applies the NotNil predicate on the "algo_id" field.
func AlgoIDNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldAlgoID))
}

// AlgoIDEqualFold applies the EqualFold predicate on the "algo_id" field.
func AlgoIDEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldAlgoID, v))
}

// AlgoIDContainsFold applies the ContainsFold predicate on the "algo_id" field.
func AlgoIDContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldAlgoID, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformIsNil applies the IsNil predicate on the "platform" field.
func PlatformIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldPlatform))
}

// PlatformNotNil applies the NotNil predicate on the "platform" field.
func PlatformNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldPlatform))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldPlatform, v))
}

// DeviceModelEQ applies the EQ predicate on the "device_model" field.
func DeviceModelEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldDeviceModel, v))
}

// DeviceModelNEQ applies the NEQ predicate on the "device_model" field.
func DeviceModelNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldDeviceModel, v))
}

// DeviceModelIn applies the In predicate on the "device_model" field.
func DeviceModelIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldDeviceModel, vs...))
}

// DeviceModelNotIn applies the NotIn predicate on the "device_model" field.
func DeviceModelNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldDeviceModel, vs...))
}

// DeviceModelGT applies the GT predicate on the "device_model" field.
func DeviceModelGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldDeviceModel, v))
}

// DeviceModelGTE applies the GTE predicate on the "device_model" field.
func DeviceModelGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldDeviceModel, v))
}

// DeviceModelLT applies the LT predicate on the "device_model" field.
func DeviceModelLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldDeviceModel, v))
}

// DeviceModelLTE applies the LTE predicate on the "device_model" field.
func DeviceModelLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldDeviceModel, v))
}

// DeviceModelContains applies the Contains predicate on the "device_model" field.
func DeviceModelContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldDeviceModel, v))
}

// DeviceModelHasPrefix applies the HasPrefix predicate on the "device_model" field.
func DeviceModelHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldDeviceModel, v))
}

// DeviceModelHasSuffix applies the HasSuffix predicate on the "device_model" field.
func DeviceModelHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldDeviceModel, v))
}

// DeviceModelIsNil applies the IsNil predicate on the "device_model" field.
func DeviceModelIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldDeviceModel))
}

// DeviceModelNotNil applies the NotNil predicate on the "device_model" field.
func DeviceModelNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldDeviceModel))
}

// DeviceModelEqualFold applies the EqualFold predicate on the "device_model" field.
func DeviceModelEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldDeviceModel, v))
}

// DeviceModelContainsFold applies the ContainsFold predicate on the "device_model" field.
func DeviceModelContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldDeviceModel, v))
}

// IsGroupTypeEQ applies the EQ predicate on the "is_group_type" field.
func IsGroupTypeEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldIsGroupType, v))
}

// IsGroupTypeNEQ applies the NEQ predicate on the "is_group_type" field.
func IsGroupTypeNEQ(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldIsGroupType, v))
}

// IsGroupTypeIn applies the In predicate on the "is_group_type" field.
func IsGroupTypeIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldIsGroupType, vs...))
}

// IsGroupTypeNotIn applies the NotIn predicate on the "is_group_type" field.
func IsGroupTypeNotIn(vs ...uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldIsGroupType, vs...))
}

// IsGroupTypeGT applies the GT predicate on the "is_group_type" field.
func IsGroupTypeGT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldIsGroupType, v))
}

// IsGroupTypeGTE applies the GTE predicate on the "is_group_type" field.
func IsGroupTypeGTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldIsGroupType, v))
}

// IsGroupTypeLT applies the LT predicate on the "is_group_type" field.
func IsGroupTypeLT(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldIsGroupType, v))
}

// IsGroupTypeLTE applies the LTE predicate on the "is_group_type" field.
func IsGroupTypeLTE(v uint) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldIsGroupType, v))
}

// IsGroupTypeIsNil applies the IsNil predicate on the "is_group_type" field.
func IsGroupTypeIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldIsGroupType))
}

// IsGroupTypeNotNil applies the NotNil predicate on the "is_group_type" field.
func IsGroupTypeNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldIsGroupType))
}

// PrefixEQ applies the EQ predicate on the "prefix" field.
func PrefixEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEQ(FieldPrefix, v))
}

// PrefixNEQ applies the NEQ predicate on the "prefix" field.
func PrefixNEQ(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNEQ(FieldPrefix, v))
}

// PrefixIn applies the In predicate on the "prefix" field.
func PrefixIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIn(FieldPrefix, vs...))
}

// PrefixNotIn applies the NotIn predicate on the "prefix" field.
func PrefixNotIn(vs ...string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotIn(FieldPrefix, vs...))
}

// PrefixGT applies the GT predicate on the "prefix" field.
func PrefixGT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGT(FieldPrefix, v))
}

// PrefixGTE applies the GTE predicate on the "prefix" field.
func PrefixGTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldGTE(FieldPrefix, v))
}

// PrefixLT applies the LT predicate on the "prefix" field.
func PrefixLT(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLT(FieldPrefix, v))
}

// PrefixLTE applies the LTE predicate on the "prefix" field.
func PrefixLTE(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldLTE(FieldPrefix, v))
}

// PrefixContains applies the Contains predicate on the "prefix" field.
func PrefixContains(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContains(FieldPrefix, v))
}

// PrefixHasPrefix applies the HasPrefix predicate on the "prefix" field.
func PrefixHasPrefix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasPrefix(FieldPrefix, v))
}

// PrefixHasSuffix applies the HasSuffix predicate on the "prefix" field.
func PrefixHasSuffix(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldHasSuffix(FieldPrefix, v))
}

// PrefixIsNil applies the IsNil predicate on the "prefix" field.
func PrefixIsNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldIsNull(FieldPrefix))
}

// PrefixNotNil applies the NotNil predicate on the "prefix" field.
func PrefixNotNil() predicate.Algorithm {
	return predicate.Algorithm(sql.FieldNotNull(FieldPrefix))
}

// PrefixEqualFold applies the EqualFold predicate on the "prefix" field.
func PrefixEqualFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldEqualFold(FieldPrefix, v))
}

// PrefixContainsFold applies the ContainsFold predicate on the "prefix" field.
func PrefixContainsFold(v string) predicate.Algorithm {
	return predicate.Algorithm(sql.FieldContainsFold(FieldPrefix, v))
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Algorithm {
	return predicate.Algorithm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Algorithm {
	return predicate.Algorithm(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Algorithm) predicate.Algorithm {
	return predicate.Algorithm(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Algorithm) predicate.Algorithm {
	return predicate.Algorithm(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Algorithm) predicate.Algorithm {
	return predicate.Algorithm(sql.NotPredicates(p))
}
