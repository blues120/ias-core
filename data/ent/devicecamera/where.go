// Code generated by ent, DO NOT EDIT.

package devicecamera

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldDeviceID, v))
}

// CameraID applies equality check predicate on the "camera_id" field. It's identical to CameraIDEQ.
func CameraID(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldCameraID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNotIn(FieldDeviceID, vs...))
}

// CameraIDEQ applies the EQ predicate on the "camera_id" field.
func CameraIDEQ(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldEQ(FieldCameraID, v))
}

// CameraIDNEQ applies the NEQ predicate on the "camera_id" field.
func CameraIDNEQ(v uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNEQ(FieldCameraID, v))
}

// CameraIDIn applies the In predicate on the "camera_id" field.
func CameraIDIn(vs ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldIn(FieldCameraID, vs...))
}

// CameraIDNotIn applies the NotIn predicate on the "camera_id" field.
func CameraIDNotIn(vs ...uint64) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.FieldNotIn(FieldCameraID, vs...))
}

// HasCamera applies the HasEdge predicate on the "camera" edge.
func HasCamera() predicate.DeviceCamera {
	return predicate.DeviceCamera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CameraTable, CameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCameraWith applies the HasEdge predicate on the "camera" edge with a given conditions (other predicates).
func HasCameraWith(preds ...predicate.Camera) predicate.DeviceCamera {
	return predicate.DeviceCamera(func(s *sql.Selector) {
		step := newCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.DeviceCamera {
	return predicate.DeviceCamera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Task) predicate.DeviceCamera {
	return predicate.DeviceCamera(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceCamera) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceCamera) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceCamera) predicate.DeviceCamera {
	return predicate.DeviceCamera(sql.NotPredicates(p))
}
