// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/tasklimits"
)

// TaskLimitsCreate is the builder for creating a TaskLimits entity.
type TaskLimitsCreate struct {
	config
	mutation *TaskLimitsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TaskLimitsCreate) SetCreatedAt(t time.Time) *TaskLimitsCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TaskLimitsCreate) SetNillableCreatedAt(t *time.Time) *TaskLimitsCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlc *TaskLimitsCreate) SetUpdatedAt(t time.Time) *TaskLimitsCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlc *TaskLimitsCreate) SetNillableUpdatedAt(t *time.Time) *TaskLimitsCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetDeletedAt sets the "deleted_at" field.
func (tlc *TaskLimitsCreate) SetDeletedAt(t time.Time) *TaskLimitsCreate {
	tlc.mutation.SetDeletedAt(t)
	return tlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tlc *TaskLimitsCreate) SetNillableDeletedAt(t *time.Time) *TaskLimitsCreate {
	if t != nil {
		tlc.SetDeletedAt(*t)
	}
	return tlc
}

// SetModel sets the "model" field.
func (tlc *TaskLimitsCreate) SetModel(s string) *TaskLimitsCreate {
	tlc.mutation.SetModel(s)
	return tlc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tlc *TaskLimitsCreate) SetNillableModel(s *string) *TaskLimitsCreate {
	if s != nil {
		tlc.SetModel(*s)
	}
	return tlc
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (tlc *TaskLimitsCreate) SetMaxCameraNum(u uint64) *TaskLimitsCreate {
	tlc.mutation.SetMaxCameraNum(u)
	return tlc
}

// SetAlgoNum sets the "algoNum" field.
func (tlc *TaskLimitsCreate) SetAlgoNum(u uint64) *TaskLimitsCreate {
	tlc.mutation.SetAlgoNum(u)
	return tlc
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (tlc *TaskLimitsCreate) SetMaxSubTaskNum(u uint64) *TaskLimitsCreate {
	tlc.mutation.SetMaxSubTaskNum(u)
	return tlc
}

// SetID sets the "id" field.
func (tlc *TaskLimitsCreate) SetID(u uint64) *TaskLimitsCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// Mutation returns the TaskLimitsMutation object of the builder.
func (tlc *TaskLimitsCreate) Mutation() *TaskLimitsMutation {
	return tlc.mutation
}

// Save creates the TaskLimits in the database.
func (tlc *TaskLimitsCreate) Save(ctx context.Context) (*TaskLimits, error) {
	if err := tlc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TaskLimitsCreate) SaveX(ctx context.Context) *TaskLimits {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TaskLimitsCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TaskLimitsCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TaskLimitsCreate) defaults() error {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		if tasklimits.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized tasklimits.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := tasklimits.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		if tasklimits.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tasklimits.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tasklimits.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TaskLimitsCreate) check() error {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskLimits.created_at"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskLimits.updated_at"`)}
	}
	if _, ok := tlc.mutation.MaxCameraNum(); !ok {
		return &ValidationError{Name: "maxCameraNum", err: errors.New(`ent: missing required field "TaskLimits.maxCameraNum"`)}
	}
	if _, ok := tlc.mutation.AlgoNum(); !ok {
		return &ValidationError{Name: "algoNum", err: errors.New(`ent: missing required field "TaskLimits.algoNum"`)}
	}
	if _, ok := tlc.mutation.MaxSubTaskNum(); !ok {
		return &ValidationError{Name: "maxSubTaskNum", err: errors.New(`ent: missing required field "TaskLimits.maxSubTaskNum"`)}
	}
	return nil
}

func (tlc *TaskLimitsCreate) sqlSave(ctx context.Context) (*TaskLimits, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TaskLimitsCreate) createSpec() (*TaskLimits, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskLimits{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(tasklimits.Table, sqlgraph.NewFieldSpec(tasklimits.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = tlc.conflict
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(tasklimits.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.SetField(tasklimits.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tlc.mutation.DeletedAt(); ok {
		_spec.SetField(tasklimits.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tlc.mutation.Model(); ok {
		_spec.SetField(tasklimits.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := tlc.mutation.MaxCameraNum(); ok {
		_spec.SetField(tasklimits.FieldMaxCameraNum, field.TypeUint64, value)
		_node.MaxCameraNum = value
	}
	if value, ok := tlc.mutation.AlgoNum(); ok {
		_spec.SetField(tasklimits.FieldAlgoNum, field.TypeUint64, value)
		_node.AlgoNum = value
	}
	if value, ok := tlc.mutation.MaxSubTaskNum(); ok {
		_spec.SetField(tasklimits.FieldMaxSubTaskNum, field.TypeUint64, value)
		_node.MaxSubTaskNum = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskLimits.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskLimitsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tlc *TaskLimitsCreate) OnConflict(opts ...sql.ConflictOption) *TaskLimitsUpsertOne {
	tlc.conflict = opts
	return &TaskLimitsUpsertOne{
		create: tlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlc *TaskLimitsCreate) OnConflictColumns(columns ...string) *TaskLimitsUpsertOne {
	tlc.conflict = append(tlc.conflict, sql.ConflictColumns(columns...))
	return &TaskLimitsUpsertOne{
		create: tlc,
	}
}

type (
	// TaskLimitsUpsertOne is the builder for "upsert"-ing
	//  one TaskLimits node.
	TaskLimitsUpsertOne struct {
		create *TaskLimitsCreate
	}

	// TaskLimitsUpsert is the "OnConflict" setter.
	TaskLimitsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLimitsUpsert) SetUpdatedAt(v time.Time) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateUpdatedAt() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskLimitsUpsert) SetDeletedAt(v time.Time) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateDeletedAt() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskLimitsUpsert) ClearDeletedAt() *TaskLimitsUpsert {
	u.SetNull(tasklimits.FieldDeletedAt)
	return u
}

// SetModel sets the "model" field.
func (u *TaskLimitsUpsert) SetModel(v string) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateModel() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *TaskLimitsUpsert) ClearModel() *TaskLimitsUpsert {
	u.SetNull(tasklimits.FieldModel)
	return u
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (u *TaskLimitsUpsert) SetMaxCameraNum(v uint64) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldMaxCameraNum, v)
	return u
}

// UpdateMaxCameraNum sets the "maxCameraNum" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateMaxCameraNum() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldMaxCameraNum)
	return u
}

// AddMaxCameraNum adds v to the "maxCameraNum" field.
func (u *TaskLimitsUpsert) AddMaxCameraNum(v uint64) *TaskLimitsUpsert {
	u.Add(tasklimits.FieldMaxCameraNum, v)
	return u
}

// SetAlgoNum sets the "algoNum" field.
func (u *TaskLimitsUpsert) SetAlgoNum(v uint64) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldAlgoNum, v)
	return u
}

// UpdateAlgoNum sets the "algoNum" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateAlgoNum() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldAlgoNum)
	return u
}

// AddAlgoNum adds v to the "algoNum" field.
func (u *TaskLimitsUpsert) AddAlgoNum(v uint64) *TaskLimitsUpsert {
	u.Add(tasklimits.FieldAlgoNum, v)
	return u
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (u *TaskLimitsUpsert) SetMaxSubTaskNum(v uint64) *TaskLimitsUpsert {
	u.Set(tasklimits.FieldMaxSubTaskNum, v)
	return u
}

// UpdateMaxSubTaskNum sets the "maxSubTaskNum" field to the value that was provided on create.
func (u *TaskLimitsUpsert) UpdateMaxSubTaskNum() *TaskLimitsUpsert {
	u.SetExcluded(tasklimits.FieldMaxSubTaskNum)
	return u
}

// AddMaxSubTaskNum adds v to the "maxSubTaskNum" field.
func (u *TaskLimitsUpsert) AddMaxSubTaskNum(v uint64) *TaskLimitsUpsert {
	u.Add(tasklimits.FieldMaxSubTaskNum, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklimits.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskLimitsUpsertOne) UpdateNewValues() *TaskLimitsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tasklimits.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tasklimits.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskLimitsUpsertOne) Ignore() *TaskLimitsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskLimitsUpsertOne) DoNothing() *TaskLimitsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskLimitsCreate.OnConflict
// documentation for more info.
func (u *TaskLimitsUpsertOne) Update(set func(*TaskLimitsUpsert)) *TaskLimitsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskLimitsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLimitsUpsertOne) SetUpdatedAt(v time.Time) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateUpdatedAt() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskLimitsUpsertOne) SetDeletedAt(v time.Time) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateDeletedAt() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskLimitsUpsertOne) ClearDeletedAt() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetModel sets the "model" field.
func (u *TaskLimitsUpsertOne) SetModel(v string) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateModel() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *TaskLimitsUpsertOne) ClearModel() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.ClearModel()
	})
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (u *TaskLimitsUpsertOne) SetMaxCameraNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetMaxCameraNum(v)
	})
}

// AddMaxCameraNum adds v to the "maxCameraNum" field.
func (u *TaskLimitsUpsertOne) AddMaxCameraNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddMaxCameraNum(v)
	})
}

// UpdateMaxCameraNum sets the "maxCameraNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateMaxCameraNum() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateMaxCameraNum()
	})
}

// SetAlgoNum sets the "algoNum" field.
func (u *TaskLimitsUpsertOne) SetAlgoNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetAlgoNum(v)
	})
}

// AddAlgoNum adds v to the "algoNum" field.
func (u *TaskLimitsUpsertOne) AddAlgoNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddAlgoNum(v)
	})
}

// UpdateAlgoNum sets the "algoNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateAlgoNum() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateAlgoNum()
	})
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (u *TaskLimitsUpsertOne) SetMaxSubTaskNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetMaxSubTaskNum(v)
	})
}

// AddMaxSubTaskNum adds v to the "maxSubTaskNum" field.
func (u *TaskLimitsUpsertOne) AddMaxSubTaskNum(v uint64) *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddMaxSubTaskNum(v)
	})
}

// UpdateMaxSubTaskNum sets the "maxSubTaskNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertOne) UpdateMaxSubTaskNum() *TaskLimitsUpsertOne {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateMaxSubTaskNum()
	})
}

// Exec executes the query.
func (u *TaskLimitsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskLimitsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskLimitsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskLimitsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskLimitsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskLimitsCreateBulk is the builder for creating many TaskLimits entities in bulk.
type TaskLimitsCreateBulk struct {
	config
	err      error
	builders []*TaskLimitsCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskLimits entities in the database.
func (tlcb *TaskLimitsCreateBulk) Save(ctx context.Context) ([]*TaskLimits, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TaskLimits, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskLimitsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TaskLimitsCreateBulk) SaveX(ctx context.Context) []*TaskLimits {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TaskLimitsCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TaskLimitsCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskLimits.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskLimitsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tlcb *TaskLimitsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskLimitsUpsertBulk {
	tlcb.conflict = opts
	return &TaskLimitsUpsertBulk{
		create: tlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlcb *TaskLimitsCreateBulk) OnConflictColumns(columns ...string) *TaskLimitsUpsertBulk {
	tlcb.conflict = append(tlcb.conflict, sql.ConflictColumns(columns...))
	return &TaskLimitsUpsertBulk{
		create: tlcb,
	}
}

// TaskLimitsUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskLimits nodes.
type TaskLimitsUpsertBulk struct {
	create *TaskLimitsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklimits.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskLimitsUpsertBulk) UpdateNewValues() *TaskLimitsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tasklimits.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tasklimits.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskLimits.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskLimitsUpsertBulk) Ignore() *TaskLimitsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskLimitsUpsertBulk) DoNothing() *TaskLimitsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskLimitsCreateBulk.OnConflict
// documentation for more info.
func (u *TaskLimitsUpsertBulk) Update(set func(*TaskLimitsUpsert)) *TaskLimitsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskLimitsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLimitsUpsertBulk) SetUpdatedAt(v time.Time) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateUpdatedAt() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskLimitsUpsertBulk) SetDeletedAt(v time.Time) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateDeletedAt() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskLimitsUpsertBulk) ClearDeletedAt() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetModel sets the "model" field.
func (u *TaskLimitsUpsertBulk) SetModel(v string) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateModel() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *TaskLimitsUpsertBulk) ClearModel() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.ClearModel()
	})
}

// SetMaxCameraNum sets the "maxCameraNum" field.
func (u *TaskLimitsUpsertBulk) SetMaxCameraNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetMaxCameraNum(v)
	})
}

// AddMaxCameraNum adds v to the "maxCameraNum" field.
func (u *TaskLimitsUpsertBulk) AddMaxCameraNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddMaxCameraNum(v)
	})
}

// UpdateMaxCameraNum sets the "maxCameraNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateMaxCameraNum() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateMaxCameraNum()
	})
}

// SetAlgoNum sets the "algoNum" field.
func (u *TaskLimitsUpsertBulk) SetAlgoNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetAlgoNum(v)
	})
}

// AddAlgoNum adds v to the "algoNum" field.
func (u *TaskLimitsUpsertBulk) AddAlgoNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddAlgoNum(v)
	})
}

// UpdateAlgoNum sets the "algoNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateAlgoNum() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateAlgoNum()
	})
}

// SetMaxSubTaskNum sets the "maxSubTaskNum" field.
func (u *TaskLimitsUpsertBulk) SetMaxSubTaskNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.SetMaxSubTaskNum(v)
	})
}

// AddMaxSubTaskNum adds v to the "maxSubTaskNum" field.
func (u *TaskLimitsUpsertBulk) AddMaxSubTaskNum(v uint64) *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.AddMaxSubTaskNum(v)
	})
}

// UpdateMaxSubTaskNum sets the "maxSubTaskNum" field to the value that was provided on create.
func (u *TaskLimitsUpsertBulk) UpdateMaxSubTaskNum() *TaskLimitsUpsertBulk {
	return u.Update(func(s *TaskLimitsUpsert) {
		s.UpdateMaxSubTaskNum()
	})
}

// Exec executes the query.
func (u *TaskLimitsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskLimitsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskLimitsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskLimitsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
