// Code generated by ent, DO NOT EDIT.

package device

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAccessOrgList, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDisplayName, v))
}

// ExtID applies equality check predicate on the "ext_id" field. It's identical to ExtIDEQ.
func ExtID(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldExtID, v))
}

// SerialNo applies equality check predicate on the "serial_no" field. It's identical to SerialNoEQ.
func SerialNo(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldSerialNo, v))
}

// MAC applies equality check predicate on the "mac" field. It's identical to MACEQ.
func MAC(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldMAC, v))
}

// ZoneName applies equality check predicate on the "zone_name" field. It's identical to ZoneNameEQ.
func ZoneName(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldZoneName, v))
}

// ZoneID applies equality check predicate on the "zone_id" field. It's identical to ZoneIDEQ.
func ZoneID(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldZoneID, v))
}

// WorkspaceID applies equality check predicate on the "workspace_id" field. It's identical to WorkspaceIDEQ.
func WorkspaceID(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldWorkspaceID, v))
}

// EquipID applies equality check predicate on the "equip_id" field. It's identical to EquipIDEQ.
func EquipID(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldEquipID, v))
}

// EquipPassword applies equality check predicate on the "equip_password" field. It's identical to EquipPasswordEQ.
func EquipPassword(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldEquipPassword, v))
}

// DeviceInfo applies equality check predicate on the "device_info" field. It's identical to DeviceInfoEQ.
func DeviceInfo(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeviceInfo, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldModel, v))
}

// AuthDeadline applies equality check predicate on the "auth_deadline" field. It's identical to AuthDeadlineEQ.
func AuthDeadline(v int64) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAuthDeadline, v))
}

// ActivatedAt applies equality check predicate on the "activated_at" field. It's identical to ActivatedAtEQ.
func ActivatedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldActivatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldDeletedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldDisplayName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v biz.EdgeDeviceType) predicate.Device {
	vc := v
	return predicate.Device(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v biz.EdgeDeviceType) predicate.Device {
	vc := v
	return predicate.Device(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...biz.EdgeDeviceType) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...biz.EdgeDeviceType) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(sql.FieldNotIn(FieldType, v...))
}

// ExtIDEQ applies the EQ predicate on the "ext_id" field.
func ExtIDEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldExtID, v))
}

// ExtIDNEQ applies the NEQ predicate on the "ext_id" field.
func ExtIDNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldExtID, v))
}

// ExtIDIn applies the In predicate on the "ext_id" field.
func ExtIDIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldExtID, vs...))
}

// ExtIDNotIn applies the NotIn predicate on the "ext_id" field.
func ExtIDNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldExtID, vs...))
}

// ExtIDGT applies the GT predicate on the "ext_id" field.
func ExtIDGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldExtID, v))
}

// ExtIDGTE applies the GTE predicate on the "ext_id" field.
func ExtIDGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldExtID, v))
}

// ExtIDLT applies the LT predicate on the "ext_id" field.
func ExtIDLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldExtID, v))
}

// ExtIDLTE applies the LTE predicate on the "ext_id" field.
func ExtIDLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldExtID, v))
}

// ExtIDContains applies the Contains predicate on the "ext_id" field.
func ExtIDContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldExtID, v))
}

// ExtIDHasPrefix applies the HasPrefix predicate on the "ext_id" field.
func ExtIDHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldExtID, v))
}

// ExtIDHasSuffix applies the HasSuffix predicate on the "ext_id" field.
func ExtIDHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldExtID, v))
}

// ExtIDEqualFold applies the EqualFold predicate on the "ext_id" field.
func ExtIDEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldExtID, v))
}

// ExtIDContainsFold applies the ContainsFold predicate on the "ext_id" field.
func ExtIDContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldExtID, v))
}

// SerialNoEQ applies the EQ predicate on the "serial_no" field.
func SerialNoEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldSerialNo, v))
}

// SerialNoNEQ applies the NEQ predicate on the "serial_no" field.
func SerialNoNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldSerialNo, v))
}

// SerialNoIn applies the In predicate on the "serial_no" field.
func SerialNoIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldSerialNo, vs...))
}

// SerialNoNotIn applies the NotIn predicate on the "serial_no" field.
func SerialNoNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldSerialNo, vs...))
}

// SerialNoGT applies the GT predicate on the "serial_no" field.
func SerialNoGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldSerialNo, v))
}

// SerialNoGTE applies the GTE predicate on the "serial_no" field.
func SerialNoGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldSerialNo, v))
}

// SerialNoLT applies the LT predicate on the "serial_no" field.
func SerialNoLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldSerialNo, v))
}

// SerialNoLTE applies the LTE predicate on the "serial_no" field.
func SerialNoLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldSerialNo, v))
}

// SerialNoContains applies the Contains predicate on the "serial_no" field.
func SerialNoContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldSerialNo, v))
}

// SerialNoHasPrefix applies the HasPrefix predicate on the "serial_no" field.
func SerialNoHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldSerialNo, v))
}

// SerialNoHasSuffix applies the HasSuffix predicate on the "serial_no" field.
func SerialNoHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldSerialNo, v))
}

// SerialNoEqualFold applies the EqualFold predicate on the "serial_no" field.
func SerialNoEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldSerialNo, v))
}

// SerialNoContainsFold applies the ContainsFold predicate on the "serial_no" field.
func SerialNoContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldSerialNo, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v biz.DeviceState) predicate.Device {
	vc := v
	return predicate.Device(sql.FieldEQ(FieldState, vc))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v biz.DeviceState) predicate.Device {
	vc := v
	return predicate.Device(sql.FieldNEQ(FieldState, vc))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...biz.DeviceState) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(sql.FieldIn(FieldState, v...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...biz.DeviceState) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(sql.FieldNotIn(FieldState, v...))
}

// MACEQ applies the EQ predicate on the "mac" field.
func MACEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldMAC, v))
}

// MACNEQ applies the NEQ predicate on the "mac" field.
func MACNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldMAC, v))
}

// MACIn applies the In predicate on the "mac" field.
func MACIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldMAC, vs...))
}

// MACNotIn applies the NotIn predicate on the "mac" field.
func MACNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldMAC, vs...))
}

// MACGT applies the GT predicate on the "mac" field.
func MACGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldMAC, v))
}

// MACGTE applies the GTE predicate on the "mac" field.
func MACGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldMAC, v))
}

// MACLT applies the LT predicate on the "mac" field.
func MACLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldMAC, v))
}

// MACLTE applies the LTE predicate on the "mac" field.
func MACLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldMAC, v))
}

// MACContains applies the Contains predicate on the "mac" field.
func MACContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldMAC, v))
}

// MACHasPrefix applies the HasPrefix predicate on the "mac" field.
func MACHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldMAC, v))
}

// MACHasSuffix applies the HasSuffix predicate on the "mac" field.
func MACHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldMAC, v))
}

// MACEqualFold applies the EqualFold predicate on the "mac" field.
func MACEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldMAC, v))
}

// MACContainsFold applies the ContainsFold predicate on the "mac" field.
func MACContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldMAC, v))
}

// ZoneNameEQ applies the EQ predicate on the "zone_name" field.
func ZoneNameEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldZoneName, v))
}

// ZoneNameNEQ applies the NEQ predicate on the "zone_name" field.
func ZoneNameNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldZoneName, v))
}

// ZoneNameIn applies the In predicate on the "zone_name" field.
func ZoneNameIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldZoneName, vs...))
}

// ZoneNameNotIn applies the NotIn predicate on the "zone_name" field.
func ZoneNameNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldZoneName, vs...))
}

// ZoneNameGT applies the GT predicate on the "zone_name" field.
func ZoneNameGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldZoneName, v))
}

// ZoneNameGTE applies the GTE predicate on the "zone_name" field.
func ZoneNameGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldZoneName, v))
}

// ZoneNameLT applies the LT predicate on the "zone_name" field.
func ZoneNameLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldZoneName, v))
}

// ZoneNameLTE applies the LTE predicate on the "zone_name" field.
func ZoneNameLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldZoneName, v))
}

// ZoneNameContains applies the Contains predicate on the "zone_name" field.
func ZoneNameContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldZoneName, v))
}

// ZoneNameHasPrefix applies the HasPrefix predicate on the "zone_name" field.
func ZoneNameHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldZoneName, v))
}

// ZoneNameHasSuffix applies the HasSuffix predicate on the "zone_name" field.
func ZoneNameHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldZoneName, v))
}

// ZoneNameEqualFold applies the EqualFold predicate on the "zone_name" field.
func ZoneNameEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldZoneName, v))
}

// ZoneNameContainsFold applies the ContainsFold predicate on the "zone_name" field.
func ZoneNameContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldZoneName, v))
}

// ZoneIDEQ applies the EQ predicate on the "zone_id" field.
func ZoneIDEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldZoneID, v))
}

// ZoneIDNEQ applies the NEQ predicate on the "zone_id" field.
func ZoneIDNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldZoneID, v))
}

// ZoneIDIn applies the In predicate on the "zone_id" field.
func ZoneIDIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldZoneID, vs...))
}

// ZoneIDNotIn applies the NotIn predicate on the "zone_id" field.
func ZoneIDNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldZoneID, vs...))
}

// ZoneIDGT applies the GT predicate on the "zone_id" field.
func ZoneIDGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldZoneID, v))
}

// ZoneIDGTE applies the GTE predicate on the "zone_id" field.
func ZoneIDGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldZoneID, v))
}

// ZoneIDLT applies the LT predicate on the "zone_id" field.
func ZoneIDLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldZoneID, v))
}

// ZoneIDLTE applies the LTE predicate on the "zone_id" field.
func ZoneIDLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldZoneID, v))
}

// ZoneIDContains applies the Contains predicate on the "zone_id" field.
func ZoneIDContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldZoneID, v))
}

// ZoneIDHasPrefix applies the HasPrefix predicate on the "zone_id" field.
func ZoneIDHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldZoneID, v))
}

// ZoneIDHasSuffix applies the HasSuffix predicate on the "zone_id" field.
func ZoneIDHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldZoneID, v))
}

// ZoneIDEqualFold applies the EqualFold predicate on the "zone_id" field.
func ZoneIDEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldZoneID, v))
}

// ZoneIDContainsFold applies the ContainsFold predicate on the "zone_id" field.
func ZoneIDContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldZoneID, v))
}

// WorkspaceIDEQ applies the EQ predicate on the "workspace_id" field.
func WorkspaceIDEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldWorkspaceID, v))
}

// WorkspaceIDNEQ applies the NEQ predicate on the "workspace_id" field.
func WorkspaceIDNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldWorkspaceID, v))
}

// WorkspaceIDIn applies the In predicate on the "workspace_id" field.
func WorkspaceIDIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldWorkspaceID, vs...))
}

// WorkspaceIDNotIn applies the NotIn predicate on the "workspace_id" field.
func WorkspaceIDNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldWorkspaceID, vs...))
}

// WorkspaceIDGT applies the GT predicate on the "workspace_id" field.
func WorkspaceIDGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldWorkspaceID, v))
}

// WorkspaceIDGTE applies the GTE predicate on the "workspace_id" field.
func WorkspaceIDGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldWorkspaceID, v))
}

// WorkspaceIDLT applies the LT predicate on the "workspace_id" field.
func WorkspaceIDLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldWorkspaceID, v))
}

// WorkspaceIDLTE applies the LTE predicate on the "workspace_id" field.
func WorkspaceIDLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldWorkspaceID, v))
}

// WorkspaceIDContains applies the Contains predicate on the "workspace_id" field.
func WorkspaceIDContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldWorkspaceID, v))
}

// WorkspaceIDHasPrefix applies the HasPrefix predicate on the "workspace_id" field.
func WorkspaceIDHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldWorkspaceID, v))
}

// WorkspaceIDHasSuffix applies the HasSuffix predicate on the "workspace_id" field.
func WorkspaceIDHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldWorkspaceID, v))
}

// WorkspaceIDEqualFold applies the EqualFold predicate on the "workspace_id" field.
func WorkspaceIDEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldWorkspaceID, v))
}

// WorkspaceIDContainsFold applies the ContainsFold predicate on the "workspace_id" field.
func WorkspaceIDContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldWorkspaceID, v))
}

// EquipIDEQ applies the EQ predicate on the "equip_id" field.
func EquipIDEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldEquipID, v))
}

// EquipIDNEQ applies the NEQ predicate on the "equip_id" field.
func EquipIDNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldEquipID, v))
}

// EquipIDIn applies the In predicate on the "equip_id" field.
func EquipIDIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldEquipID, vs...))
}

// EquipIDNotIn applies the NotIn predicate on the "equip_id" field.
func EquipIDNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldEquipID, vs...))
}

// EquipIDGT applies the GT predicate on the "equip_id" field.
func EquipIDGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldEquipID, v))
}

// EquipIDGTE applies the GTE predicate on the "equip_id" field.
func EquipIDGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldEquipID, v))
}

// EquipIDLT applies the LT predicate on the "equip_id" field.
func EquipIDLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldEquipID, v))
}

// EquipIDLTE applies the LTE predicate on the "equip_id" field.
func EquipIDLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldEquipID, v))
}

// EquipIDContains applies the Contains predicate on the "equip_id" field.
func EquipIDContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldEquipID, v))
}

// EquipIDHasPrefix applies the HasPrefix predicate on the "equip_id" field.
func EquipIDHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldEquipID, v))
}

// EquipIDHasSuffix applies the HasSuffix predicate on the "equip_id" field.
func EquipIDHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldEquipID, v))
}

// EquipIDEqualFold applies the EqualFold predicate on the "equip_id" field.
func EquipIDEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldEquipID, v))
}

// EquipIDContainsFold applies the ContainsFold predicate on the "equip_id" field.
func EquipIDContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldEquipID, v))
}

// EquipPasswordEQ applies the EQ predicate on the "equip_password" field.
func EquipPasswordEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldEquipPassword, v))
}

// EquipPasswordNEQ applies the NEQ predicate on the "equip_password" field.
func EquipPasswordNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldEquipPassword, v))
}

// EquipPasswordIn applies the In predicate on the "equip_password" field.
func EquipPasswordIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldEquipPassword, vs...))
}

// EquipPasswordNotIn applies the NotIn predicate on the "equip_password" field.
func EquipPasswordNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldEquipPassword, vs...))
}

// EquipPasswordGT applies the GT predicate on the "equip_password" field.
func EquipPasswordGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldEquipPassword, v))
}

// EquipPasswordGTE applies the GTE predicate on the "equip_password" field.
func EquipPasswordGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldEquipPassword, v))
}

// EquipPasswordLT applies the LT predicate on the "equip_password" field.
func EquipPasswordLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldEquipPassword, v))
}

// EquipPasswordLTE applies the LTE predicate on the "equip_password" field.
func EquipPasswordLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldEquipPassword, v))
}

// EquipPasswordContains applies the Contains predicate on the "equip_password" field.
func EquipPasswordContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldEquipPassword, v))
}

// EquipPasswordHasPrefix applies the HasPrefix predicate on the "equip_password" field.
func EquipPasswordHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldEquipPassword, v))
}

// EquipPasswordHasSuffix applies the HasSuffix predicate on the "equip_password" field.
func EquipPasswordHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldEquipPassword, v))
}

// EquipPasswordEqualFold applies the EqualFold predicate on the "equip_password" field.
func EquipPasswordEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldEquipPassword, v))
}

// EquipPasswordContainsFold applies the ContainsFold predicate on the "equip_password" field.
func EquipPasswordContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldEquipPassword, v))
}

// DeviceInfoEQ applies the EQ predicate on the "device_info" field.
func DeviceInfoEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeviceInfo, v))
}

// DeviceInfoNEQ applies the NEQ predicate on the "device_info" field.
func DeviceInfoNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldDeviceInfo, v))
}

// DeviceInfoIn applies the In predicate on the "device_info" field.
func DeviceInfoIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldDeviceInfo, vs...))
}

// DeviceInfoNotIn applies the NotIn predicate on the "device_info" field.
func DeviceInfoNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldDeviceInfo, vs...))
}

// DeviceInfoGT applies the GT predicate on the "device_info" field.
func DeviceInfoGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldDeviceInfo, v))
}

// DeviceInfoGTE applies the GTE predicate on the "device_info" field.
func DeviceInfoGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldDeviceInfo, v))
}

// DeviceInfoLT applies the LT predicate on the "device_info" field.
func DeviceInfoLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldDeviceInfo, v))
}

// DeviceInfoLTE applies the LTE predicate on the "device_info" field.
func DeviceInfoLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldDeviceInfo, v))
}

// DeviceInfoContains applies the Contains predicate on the "device_info" field.
func DeviceInfoContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldDeviceInfo, v))
}

// DeviceInfoHasPrefix applies the HasPrefix predicate on the "device_info" field.
func DeviceInfoHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldDeviceInfo, v))
}

// DeviceInfoHasSuffix applies the HasSuffix predicate on the "device_info" field.
func DeviceInfoHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldDeviceInfo, v))
}

// DeviceInfoEqualFold applies the EqualFold predicate on the "device_info" field.
func DeviceInfoEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldDeviceInfo, v))
}

// DeviceInfoContainsFold applies the ContainsFold predicate on the "device_info" field.
func DeviceInfoContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldDeviceInfo, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldModel, v))
}

// AuthDeadlineEQ applies the EQ predicate on the "auth_deadline" field.
func AuthDeadlineEQ(v int64) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAuthDeadline, v))
}

// AuthDeadlineNEQ applies the NEQ predicate on the "auth_deadline" field.
func AuthDeadlineNEQ(v int64) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldAuthDeadline, v))
}

// AuthDeadlineIn applies the In predicate on the "auth_deadline" field.
func AuthDeadlineIn(vs ...int64) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldAuthDeadline, vs...))
}

// AuthDeadlineNotIn applies the NotIn predicate on the "auth_deadline" field.
func AuthDeadlineNotIn(vs ...int64) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldAuthDeadline, vs...))
}

// AuthDeadlineGT applies the GT predicate on the "auth_deadline" field.
func AuthDeadlineGT(v int64) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldAuthDeadline, v))
}

// AuthDeadlineGTE applies the GTE predicate on the "auth_deadline" field.
func AuthDeadlineGTE(v int64) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldAuthDeadline, v))
}

// AuthDeadlineLT applies the LT predicate on the "auth_deadline" field.
func AuthDeadlineLT(v int64) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldAuthDeadline, v))
}

// AuthDeadlineLTE applies the LTE predicate on the "auth_deadline" field.
func AuthDeadlineLTE(v int64) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldAuthDeadline, v))
}

// AuthDeadlineIsNil applies the IsNil predicate on the "auth_deadline" field.
func AuthDeadlineIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldAuthDeadline))
}

// AuthDeadlineNotNil applies the NotNil predicate on the "auth_deadline" field.
func AuthDeadlineNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldAuthDeadline))
}

// ActivatedAtEQ applies the EQ predicate on the "activated_at" field.
func ActivatedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldActivatedAt, v))
}

// ActivatedAtNEQ applies the NEQ predicate on the "activated_at" field.
func ActivatedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldActivatedAt, v))
}

// ActivatedAtIn applies the In predicate on the "activated_at" field.
func ActivatedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldActivatedAt, vs...))
}

// ActivatedAtNotIn applies the NotIn predicate on the "activated_at" field.
func ActivatedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldActivatedAt, vs...))
}

// ActivatedAtGT applies the GT predicate on the "activated_at" field.
func ActivatedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldActivatedAt, v))
}

// ActivatedAtGTE applies the GTE predicate on the "activated_at" field.
func ActivatedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldActivatedAt, v))
}

// ActivatedAtLT applies the LT predicate on the "activated_at" field.
func ActivatedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldActivatedAt, v))
}

// ActivatedAtLTE applies the LTE predicate on the "activated_at" field.
func ActivatedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldActivatedAt, v))
}

// HasCamera applies the HasEdge predicate on the "camera" edge.
func HasCamera() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CameraTable, CameraPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCameraWith applies the HasEdge predicate on the "camera" edge with a given conditions (other predicates).
func HasCameraWith(preds ...predicate.Camera) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskDevice applies the HasEdge predicate on the "task_device" edge.
func HasTaskDevice() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskDeviceTable, TaskDeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskDeviceWith applies the HasEdge predicate on the "task_device" edge with a given conditions (other predicates).
func HasTaskDeviceWith(preds ...predicate.Task) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newTaskDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceCamera applies the HasEdge predicate on the "device_camera" edge.
func HasDeviceCamera() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeviceCameraTable, DeviceCameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceCameraWith applies the HasEdge predicate on the "device_camera" edge with a given conditions (other predicates).
func HasDeviceCameraWith(preds ...predicate.DeviceCamera) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newDeviceCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
