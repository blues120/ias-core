// Code generated by ent, DO NOT EDIT.

package device

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAccessOrgList holds the string denoting the access_org_list field in the database.
	FieldAccessOrgList = "access_org_list"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldExtID holds the string denoting the ext_id field in the database.
	FieldExtID = "ext_id"
	// FieldSerialNo holds the string denoting the serial_no field in the database.
	FieldSerialNo = "serial_no"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldMAC holds the string denoting the mac field in the database.
	FieldMAC = "mac"
	// FieldZoneName holds the string denoting the zone_name field in the database.
	FieldZoneName = "zone_name"
	// FieldZoneID holds the string denoting the zone_id field in the database.
	FieldZoneID = "zone_id"
	// FieldWorkspaceID holds the string denoting the workspace_id field in the database.
	FieldWorkspaceID = "workspace_id"
	// FieldEquipID holds the string denoting the equip_id field in the database.
	FieldEquipID = "equip_id"
	// FieldEquipPassword holds the string denoting the equip_password field in the database.
	FieldEquipPassword = "equip_password"
	// FieldDeviceInfo holds the string denoting the device_info field in the database.
	FieldDeviceInfo = "device_info"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldAuthDeadline holds the string denoting the auth_deadline field in the database.
	FieldAuthDeadline = "auth_deadline"
	// FieldActivatedAt holds the string denoting the activated_at field in the database.
	FieldActivatedAt = "activated_at"
	// EdgeCamera holds the string denoting the camera edge name in mutations.
	EdgeCamera = "camera"
	// EdgeTaskDevice holds the string denoting the task_device edge name in mutations.
	EdgeTaskDevice = "task_device"
	// EdgeDeviceCamera holds the string denoting the device_camera edge name in mutations.
	EdgeDeviceCamera = "device_camera"
	// Table holds the table name of the device in the database.
	Table = "device"
	// CameraTable is the table that holds the camera relation/edge. The primary key declared below.
	CameraTable = "device_camera"
	// CameraInverseTable is the table name for the Camera entity.
	// It exists in this package in order to avoid circular dependency with the "camera" package.
	CameraInverseTable = "camera"
	// TaskDeviceTable is the table that holds the task_device relation/edge.
	TaskDeviceTable = "task"
	// TaskDeviceInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskDeviceInverseTable = "task"
	// TaskDeviceColumn is the table column denoting the task_device relation/edge.
	TaskDeviceColumn = "device_id"
	// DeviceCameraTable is the table that holds the device_camera relation/edge.
	DeviceCameraTable = "device_camera"
	// DeviceCameraInverseTable is the table name for the DeviceCamera entity.
	// It exists in this package in order to avoid circular dependency with the "devicecamera" package.
	DeviceCameraInverseTable = "device_camera"
	// DeviceCameraColumn is the table column denoting the device_camera relation/edge.
	DeviceCameraColumn = "device_id"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantID,
	FieldAccessOrgList,
	FieldName,
	FieldDisplayName,
	FieldType,
	FieldExtID,
	FieldSerialNo,
	FieldState,
	FieldMAC,
	FieldZoneName,
	FieldZoneID,
	FieldWorkspaceID,
	FieldEquipID,
	FieldEquipPassword,
	FieldDeviceInfo,
	FieldModel,
	FieldAuthDeadline,
	FieldActivatedAt,
}

var (
	// CameraPrimaryKey and CameraColumn2 are the table columns denoting the
	// primary key for the camera relation (M2M).
	CameraPrimaryKey = []string{"device_id", "camera_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gitlab.ctyuncdn.cn/ias/ias-core/data/ent/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [4]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type biz.EdgeDeviceType) error {
	switch _type {
	case "box", "node":
		return nil
	default:
		return fmt.Errorf("device: invalid enum value for type field: %q", _type)
	}
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s biz.DeviceState) error {
	switch s {
	case "online", "offline":
		return nil
	default:
		return fmt.Errorf("device: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAccessOrgList orders the results by the access_org_list field.
func ByAccessOrgList(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessOrgList, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByExtID orders the results by the ext_id field.
func ByExtID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtID, opts...).ToFunc()
}

// BySerialNo orders the results by the serial_no field.
func BySerialNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerialNo, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByMAC orders the results by the mac field.
func ByMAC(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMAC, opts...).ToFunc()
}

// ByZoneName orders the results by the zone_name field.
func ByZoneName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZoneName, opts...).ToFunc()
}

// ByZoneID orders the results by the zone_id field.
func ByZoneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZoneID, opts...).ToFunc()
}

// ByWorkspaceID orders the results by the workspace_id field.
func ByWorkspaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkspaceID, opts...).ToFunc()
}

// ByEquipID orders the results by the equip_id field.
func ByEquipID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipID, opts...).ToFunc()
}

// ByEquipPassword orders the results by the equip_password field.
func ByEquipPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipPassword, opts...).ToFunc()
}

// ByDeviceInfo orders the results by the device_info field.
func ByDeviceInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceInfo, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByAuthDeadline orders the results by the auth_deadline field.
func ByAuthDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthDeadline, opts...).ToFunc()
}

// ByActivatedAt orders the results by the activated_at field.
func ByActivatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivatedAt, opts...).ToFunc()
}

// ByCameraCount orders the results by camera count.
func ByCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCameraStep(), opts...)
	}
}

// ByCamera orders the results by camera terms.
func ByCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaskDeviceCount orders the results by task_device count.
func ByTaskDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskDeviceStep(), opts...)
	}
}

// ByTaskDevice orders the results by task_device terms.
func ByTaskDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceCameraCount orders the results by device_camera count.
func ByDeviceCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceCameraStep(), opts...)
	}
}

// ByDeviceCamera orders the results by device_camera terms.
func ByDeviceCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CameraTable, CameraPrimaryKey...),
	)
}
func newTaskDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskDeviceTable, TaskDeviceColumn),
	)
}
func newDeviceCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceCameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeviceCameraTable, DeviceCameraColumn),
	)
}
