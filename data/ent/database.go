// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
)

// Database is the client that holds all ent builders.
type Database struct {
	client *Client
}

// NewDatabase creates a new database configured with the given options.
func NewDatabase(client *Client) *Database {
	return &Database{client: client}
}

// InTx runs the given function f within a transaction.
func (db *Database) InTx(ctx context.Context, f func(context.Context) error) error {
	tx := TxFromContext(ctx)
	if tx != nil {
		return f(ctx)
	}

	tx, err := db.client.Tx(ctx)
	if err != nil {
		return fmt.Errorf("starting transaction: %w", err)
	}

	if err = f(NewTxContext(ctx, tx)); err != nil {
		if err2 := tx.Rollback(); err2 != nil {
			return fmt.Errorf("rolling back transaction: %v (original error: %w)", err2, err)
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

func (db *Database) loadClient(ctx context.Context) *Client {
	tx := TxFromContext(ctx)
	if tx != nil {
		return tx.Client()
	}
	return db.client
}

// Exec executes a query that doesn't return rows. For example, in SQL, INSERT or UPDATE.
func (db *Database) Exec(ctx context.Context, query string, args ...interface{}) (*sql.Result, error) {
	var res sql.Result
	err := db.loadClient(ctx).driver.Exec(ctx, query, args, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Query executes a query that returns rows, typically a SELECT in SQL.
func (db *Database) Query(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var rows sql.Rows
	err := db.loadClient(ctx).driver.Query(ctx, query, args, &rows)
	if err != nil {
		return nil, err
	}
	return &rows, nil
}

func (db *Database) Close() error {
	return db.client.Close()
}

// ActiveInfo is the client for interacting with the ActiveInfo builders.
func (db *Database) ActiveInfo(ctx context.Context) *ActiveInfoClient {
	return db.loadClient(ctx).ActiveInfo
}

// Algorithm is the client for interacting with the Algorithm builders.
func (db *Database) Algorithm(ctx context.Context) *AlgorithmClient {
	return db.loadClient(ctx).Algorithm
}

// AlgorithmAlarmType is the client for interacting with the AlgorithmAlarmType builders.
func (db *Database) AlgorithmAlarmType(ctx context.Context) *AlgorithmAlarmTypeClient {
	return db.loadClient(ctx).AlgorithmAlarmType
}

// Area is the client for interacting with the Area builders.
func (db *Database) Area(ctx context.Context) *AreaClient {
	return db.loadClient(ctx).Area
}

// Camera is the client for interacting with the Camera builders.
func (db *Database) Camera(ctx context.Context) *CameraClient {
	return db.loadClient(ctx).Camera
}

// Device is the client for interacting with the Device builders.
func (db *Database) Device(ctx context.Context) *DeviceClient {
	return db.loadClient(ctx).Device
}

// DeviceAlgo is the client for interacting with the DeviceAlgo builders.
func (db *Database) DeviceAlgo(ctx context.Context) *DeviceAlgoClient {
	return db.loadClient(ctx).DeviceAlgo
}

// DeviceCamera is the client for interacting with the DeviceCamera builders.
func (db *Database) DeviceCamera(ctx context.Context) *DeviceCameraClient {
	return db.loadClient(ctx).DeviceCamera
}

// DeviceToken is the client for interacting with the DeviceToken builders.
func (db *Database) DeviceToken(ctx context.Context) *DeviceTokenClient {
	return db.loadClient(ctx).DeviceToken
}

// EquipAttr is the client for interacting with the EquipAttr builders.
func (db *Database) EquipAttr(ctx context.Context) *EquipAttrClient {
	return db.loadClient(ctx).EquipAttr
}

// EventSubscription is the client for interacting with the EventSubscription builders.
func (db *Database) EventSubscription(ctx context.Context) *EventSubscriptionClient {
	return db.loadClient(ctx).EventSubscription
}

// FileUpload is the client for interacting with the FileUpload builders.
func (db *Database) FileUpload(ctx context.Context) *FileUploadClient {
	return db.loadClient(ctx).FileUpload
}

// Inform is the client for interacting with the Inform builders.
func (db *Database) Inform(ctx context.Context) *InformClient {
	return db.loadClient(ctx).Inform
}

// Organization is the client for interacting with the Organization builders.
func (db *Database) Organization(ctx context.Context) *OrganizationClient {
	return db.loadClient(ctx).Organization
}

// Setting is the client for interacting with the Setting builders.
func (db *Database) Setting(ctx context.Context) *SettingClient {
	return db.loadClient(ctx).Setting
}

// Signature is the client for interacting with the Signature builders.
func (db *Database) Signature(ctx context.Context) *SignatureClient {
	return db.loadClient(ctx).Signature
}

// Task is the client for interacting with the Task builders.
func (db *Database) Task(ctx context.Context) *TaskClient {
	return db.loadClient(ctx).Task
}

// TaskCamera is the client for interacting with the TaskCamera builders.
func (db *Database) TaskCamera(ctx context.Context) *TaskCameraClient {
	return db.loadClient(ctx).TaskCamera
}

// TaskLimits is the client for interacting with the TaskLimits builders.
func (db *Database) TaskLimits(ctx context.Context) *TaskLimitsClient {
	return db.loadClient(ctx).TaskLimits
}

// UpPlatform is the client for interacting with the UpPlatform builders.
func (db *Database) UpPlatform(ctx context.Context) *UpPlatformClient {
	return db.loadClient(ctx).UpPlatform
}

// User is the client for interacting with the User builders.
func (db *Database) User(ctx context.Context) *UserClient {
	return db.loadClient(ctx).User
}

// WarnPush is the client for interacting with the WarnPush builders.
func (db *Database) WarnPush(ctx context.Context) *WarnPushClient {
	return db.loadClient(ctx).WarnPush
}

// WarnPushLog is the client for interacting with the WarnPushLog builders.
func (db *Database) WarnPushLog(ctx context.Context) *WarnPushLogClient {
	return db.loadClient(ctx).WarnPushLog
}

// WarnSmsErr is the client for interacting with the WarnSmsErr builders.
func (db *Database) WarnSmsErr(ctx context.Context) *WarnSmsErrClient {
	return db.loadClient(ctx).WarnSmsErr
}

// WarningType is the client for interacting with the WarningType builders.
func (db *Database) WarningType(ctx context.Context) *WarningTypeClient {
	return db.loadClient(ctx).WarningType
}
