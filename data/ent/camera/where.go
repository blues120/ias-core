// Code generated by ent, DO NOT EDIT.

package camera

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/biz/streaming"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldTenantID, v))
}

// AccessOrgList applies equality check predicate on the "access_org_list" field. It's identical to AccessOrgListEQ.
func AccessOrgList(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldAccessOrgList, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldName, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPosition, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldRegion, v))
}

// RegionStr applies equality check predicate on the "region_str" field. It's identical to RegionStrEQ.
func RegionStr(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldRegionStr, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLongitude, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLatitude, v))
}

// CustomNumber applies equality check predicate on the "custom_number" field. It's identical to CustomNumberEQ.
func CustomNumber(v int) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCustomNumber, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldChannelID, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSerialNumber, v))
}

// PoleNumber applies equality check predicate on the "pole_number" field. It's identical to PoleNumberEQ.
func PoleNumber(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPoleNumber, v))
}

// DeviceDescription applies equality check predicate on the "device_description" field. It's identical to DeviceDescriptionEQ.
func DeviceDescription(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeviceDescription, v))
}

// Scene applies equality check predicate on the "scene" field. It's identical to SceneEQ.
func Scene(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldScene, v))
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPlace, v))
}

// SpSource applies equality check predicate on the "sp_source" field. It's identical to SpSourceEQ.
func SpSource(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpSource, v))
}

// SpCodecName applies equality check predicate on the "sp_codec_name" field. It's identical to SpCodecNameEQ.
func SpCodecName(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpCodecName, v))
}

// SpWidth applies equality check predicate on the "sp_width" field. It's identical to SpWidthEQ.
func SpWidth(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpWidth, v))
}

// SpHeight applies equality check predicate on the "sp_height" field. It's identical to SpHeightEQ.
func SpHeight(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpHeight, v))
}

// TransType applies equality check predicate on the "trans_type" field. It's identical to TransTypeEQ.
func TransType(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldTransType, v))
}

// DeviceIP applies equality check predicate on the "device_ip" field. It's identical to DeviceIPEQ.
func DeviceIP(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeviceIP, v))
}

// DevicePort applies equality check predicate on the "device_port" field. It's identical to DevicePortEQ.
func DevicePort(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDevicePort, v))
}

// GBID applies equality check predicate on the "gb_id" field. It's identical to GBIDEQ.
func GBID(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBID, v))
}

// SipUser applies equality check predicate on the "sip_user" field. It's identical to SipUserEQ.
func SipUser(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSipUser, v))
}

// SipPassword applies equality check predicate on the "sip_password" field. It's identical to SipPasswordEQ.
func SipPassword(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSipPassword, v))
}

// GBChannelID applies equality check predicate on the "gb_channel_id" field. It's identical to GBChannelIDEQ.
func GBChannelID(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBChannelID, v))
}

// UpGBChannelID applies equality check predicate on the "up_gb_channel_id" field. It's identical to UpGBChannelIDEQ.
func UpGBChannelID(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpGBChannelID, v))
}

// GBDeviceType applies equality check predicate on the "gb_device_type" field. It's identical to GBDeviceTypeEQ.
func GBDeviceType(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBDeviceType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldDeletedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldTenantID, v))
}

// AccessOrgListEQ applies the EQ predicate on the "access_org_list" field.
func AccessOrgListEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldAccessOrgList, v))
}

// AccessOrgListNEQ applies the NEQ predicate on the "access_org_list" field.
func AccessOrgListNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldAccessOrgList, v))
}

// AccessOrgListIn applies the In predicate on the "access_org_list" field.
func AccessOrgListIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldAccessOrgList, vs...))
}

// AccessOrgListNotIn applies the NotIn predicate on the "access_org_list" field.
func AccessOrgListNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldAccessOrgList, vs...))
}

// AccessOrgListGT applies the GT predicate on the "access_org_list" field.
func AccessOrgListGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldAccessOrgList, v))
}

// AccessOrgListGTE applies the GTE predicate on the "access_org_list" field.
func AccessOrgListGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldAccessOrgList, v))
}

// AccessOrgListLT applies the LT predicate on the "access_org_list" field.
func AccessOrgListLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldAccessOrgList, v))
}

// AccessOrgListLTE applies the LTE predicate on the "access_org_list" field.
func AccessOrgListLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldAccessOrgList, v))
}

// AccessOrgListContains applies the Contains predicate on the "access_org_list" field.
func AccessOrgListContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldAccessOrgList, v))
}

// AccessOrgListHasPrefix applies the HasPrefix predicate on the "access_org_list" field.
func AccessOrgListHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldAccessOrgList, v))
}

// AccessOrgListHasSuffix applies the HasSuffix predicate on the "access_org_list" field.
func AccessOrgListHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldAccessOrgList, v))
}

// AccessOrgListIsNil applies the IsNil predicate on the "access_org_list" field.
func AccessOrgListIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldAccessOrgList))
}

// AccessOrgListNotNil applies the NotNil predicate on the "access_org_list" field.
func AccessOrgListNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldAccessOrgList))
}

// AccessOrgListEqualFold applies the EqualFold predicate on the "access_org_list" field.
func AccessOrgListEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldAccessOrgList, v))
}

// AccessOrgListContainsFold applies the ContainsFold predicate on the "access_org_list" field.
func AccessOrgListContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldAccessOrgList, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldName, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldPosition, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldRegion))
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldRegion))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldRegion, v))
}

// RegionStrEQ applies the EQ predicate on the "region_str" field.
func RegionStrEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldRegionStr, v))
}

// RegionStrNEQ applies the NEQ predicate on the "region_str" field.
func RegionStrNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldRegionStr, v))
}

// RegionStrIn applies the In predicate on the "region_str" field.
func RegionStrIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldRegionStr, vs...))
}

// RegionStrNotIn applies the NotIn predicate on the "region_str" field.
func RegionStrNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldRegionStr, vs...))
}

// RegionStrGT applies the GT predicate on the "region_str" field.
func RegionStrGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldRegionStr, v))
}

// RegionStrGTE applies the GTE predicate on the "region_str" field.
func RegionStrGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldRegionStr, v))
}

// RegionStrLT applies the LT predicate on the "region_str" field.
func RegionStrLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldRegionStr, v))
}

// RegionStrLTE applies the LTE predicate on the "region_str" field.
func RegionStrLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldRegionStr, v))
}

// RegionStrContains applies the Contains predicate on the "region_str" field.
func RegionStrContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldRegionStr, v))
}

// RegionStrHasPrefix applies the HasPrefix predicate on the "region_str" field.
func RegionStrHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldRegionStr, v))
}

// RegionStrHasSuffix applies the HasSuffix predicate on the "region_str" field.
func RegionStrHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldRegionStr, v))
}

// RegionStrIsNil applies the IsNil predicate on the "region_str" field.
func RegionStrIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldRegionStr))
}

// RegionStrNotNil applies the NotNil predicate on the "region_str" field.
func RegionStrNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldRegionStr))
}

// RegionStrEqualFold applies the EqualFold predicate on the "region_str" field.
func RegionStrEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldRegionStr, v))
}

// RegionStrContainsFold applies the ContainsFold predicate on the "region_str" field.
func RegionStrContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldRegionStr, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldLongitude, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldLatitude, v))
}

// CustomNumberEQ applies the EQ predicate on the "custom_number" field.
func CustomNumberEQ(v int) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCustomNumber, v))
}

// CustomNumberNEQ applies the NEQ predicate on the "custom_number" field.
func CustomNumberNEQ(v int) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldCustomNumber, v))
}

// CustomNumberIn applies the In predicate on the "custom_number" field.
func CustomNumberIn(vs ...int) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldCustomNumber, vs...))
}

// CustomNumberNotIn applies the NotIn predicate on the "custom_number" field.
func CustomNumberNotIn(vs ...int) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldCustomNumber, vs...))
}

// CustomNumberGT applies the GT predicate on the "custom_number" field.
func CustomNumberGT(v int) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldCustomNumber, v))
}

// CustomNumberGTE applies the GTE predicate on the "custom_number" field.
func CustomNumberGTE(v int) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldCustomNumber, v))
}

// CustomNumberLT applies the LT predicate on the "custom_number" field.
func CustomNumberLT(v int) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldCustomNumber, v))
}

// CustomNumberLTE applies the LTE predicate on the "custom_number" field.
func CustomNumberLTE(v int) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldCustomNumber, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldChannelID, v))
}

// ChannelIDContains applies the Contains predicate on the "channel_id" field.
func ChannelIDContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldChannelID, v))
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channel_id" field.
func ChannelIDHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldChannelID, v))
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channel_id" field.
func ChannelIDHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldChannelID, v))
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channel_id" field.
func ChannelIDEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldChannelID, v))
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channel_id" field.
func ChannelIDContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldChannelID, v))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldSerialNumber, v))
}

// PoleNumberEQ applies the EQ predicate on the "pole_number" field.
func PoleNumberEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPoleNumber, v))
}

// PoleNumberNEQ applies the NEQ predicate on the "pole_number" field.
func PoleNumberNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldPoleNumber, v))
}

// PoleNumberIn applies the In predicate on the "pole_number" field.
func PoleNumberIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldPoleNumber, vs...))
}

// PoleNumberNotIn applies the NotIn predicate on the "pole_number" field.
func PoleNumberNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldPoleNumber, vs...))
}

// PoleNumberGT applies the GT predicate on the "pole_number" field.
func PoleNumberGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldPoleNumber, v))
}

// PoleNumberGTE applies the GTE predicate on the "pole_number" field.
func PoleNumberGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldPoleNumber, v))
}

// PoleNumberLT applies the LT predicate on the "pole_number" field.
func PoleNumberLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldPoleNumber, v))
}

// PoleNumberLTE applies the LTE predicate on the "pole_number" field.
func PoleNumberLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldPoleNumber, v))
}

// PoleNumberContains applies the Contains predicate on the "pole_number" field.
func PoleNumberContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldPoleNumber, v))
}

// PoleNumberHasPrefix applies the HasPrefix predicate on the "pole_number" field.
func PoleNumberHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldPoleNumber, v))
}

// PoleNumberHasSuffix applies the HasSuffix predicate on the "pole_number" field.
func PoleNumberHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldPoleNumber, v))
}

// PoleNumberEqualFold applies the EqualFold predicate on the "pole_number" field.
func PoleNumberEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldPoleNumber, v))
}

// PoleNumberContainsFold applies the ContainsFold predicate on the "pole_number" field.
func PoleNumberContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldPoleNumber, v))
}

// DeviceDescriptionEQ applies the EQ predicate on the "device_description" field.
func DeviceDescriptionEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeviceDescription, v))
}

// DeviceDescriptionNEQ applies the NEQ predicate on the "device_description" field.
func DeviceDescriptionNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldDeviceDescription, v))
}

// DeviceDescriptionIn applies the In predicate on the "device_description" field.
func DeviceDescriptionIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldDeviceDescription, vs...))
}

// DeviceDescriptionNotIn applies the NotIn predicate on the "device_description" field.
func DeviceDescriptionNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldDeviceDescription, vs...))
}

// DeviceDescriptionGT applies the GT predicate on the "device_description" field.
func DeviceDescriptionGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldDeviceDescription, v))
}

// DeviceDescriptionGTE applies the GTE predicate on the "device_description" field.
func DeviceDescriptionGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldDeviceDescription, v))
}

// DeviceDescriptionLT applies the LT predicate on the "device_description" field.
func DeviceDescriptionLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldDeviceDescription, v))
}

// DeviceDescriptionLTE applies the LTE predicate on the "device_description" field.
func DeviceDescriptionLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldDeviceDescription, v))
}

// DeviceDescriptionContains applies the Contains predicate on the "device_description" field.
func DeviceDescriptionContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldDeviceDescription, v))
}

// DeviceDescriptionHasPrefix applies the HasPrefix predicate on the "device_description" field.
func DeviceDescriptionHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldDeviceDescription, v))
}

// DeviceDescriptionHasSuffix applies the HasSuffix predicate on the "device_description" field.
func DeviceDescriptionHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldDeviceDescription, v))
}

// DeviceDescriptionEqualFold applies the EqualFold predicate on the "device_description" field.
func DeviceDescriptionEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldDeviceDescription, v))
}

// DeviceDescriptionContainsFold applies the ContainsFold predicate on the "device_description" field.
func DeviceDescriptionContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldDeviceDescription, v))
}

// SceneEQ applies the EQ predicate on the "scene" field.
func SceneEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldScene, v))
}

// SceneNEQ applies the NEQ predicate on the "scene" field.
func SceneNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldScene, v))
}

// SceneIn applies the In predicate on the "scene" field.
func SceneIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldScene, vs...))
}

// SceneNotIn applies the NotIn predicate on the "scene" field.
func SceneNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldScene, vs...))
}

// SceneGT applies the GT predicate on the "scene" field.
func SceneGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldScene, v))
}

// SceneGTE applies the GTE predicate on the "scene" field.
func SceneGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldScene, v))
}

// SceneLT applies the LT predicate on the "scene" field.
func SceneLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldScene, v))
}

// SceneLTE applies the LTE predicate on the "scene" field.
func SceneLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldScene, v))
}

// SceneContains applies the Contains predicate on the "scene" field.
func SceneContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldScene, v))
}

// SceneHasPrefix applies the HasPrefix predicate on the "scene" field.
func SceneHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldScene, v))
}

// SceneHasSuffix applies the HasSuffix predicate on the "scene" field.
func SceneHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldScene, v))
}

// SceneEqualFold applies the EqualFold predicate on the "scene" field.
func SceneEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldScene, v))
}

// SceneContainsFold applies the ContainsFold predicate on the "scene" field.
func SceneContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldScene, v))
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPlace, v))
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldPlace, v))
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldPlace, vs...))
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldPlace, vs...))
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldPlace, v))
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldPlace, v))
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldPlace, v))
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldPlace, v))
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldPlace, v))
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldPlace, v))
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldPlace, v))
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldPlace, v))
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldPlace, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v biz.CameraStatus) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v biz.CameraStatus) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...biz.CameraStatus) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...biz.CameraStatus) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldNotIn(FieldStatus, v...))
}

// SpTypeEQ applies the EQ predicate on the "sp_type" field.
func SpTypeEQ(v streaming.ProtocolType) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldEQ(FieldSpType, vc))
}

// SpTypeNEQ applies the NEQ predicate on the "sp_type" field.
func SpTypeNEQ(v streaming.ProtocolType) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldNEQ(FieldSpType, vc))
}

// SpTypeIn applies the In predicate on the "sp_type" field.
func SpTypeIn(vs ...streaming.ProtocolType) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldIn(FieldSpType, v...))
}

// SpTypeNotIn applies the NotIn predicate on the "sp_type" field.
func SpTypeNotIn(vs ...streaming.ProtocolType) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldNotIn(FieldSpType, v...))
}

// SpSourceEQ applies the EQ predicate on the "sp_source" field.
func SpSourceEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpSource, v))
}

// SpSourceNEQ applies the NEQ predicate on the "sp_source" field.
func SpSourceNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSpSource, v))
}

// SpSourceIn applies the In predicate on the "sp_source" field.
func SpSourceIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSpSource, vs...))
}

// SpSourceNotIn applies the NotIn predicate on the "sp_source" field.
func SpSourceNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSpSource, vs...))
}

// SpSourceGT applies the GT predicate on the "sp_source" field.
func SpSourceGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSpSource, v))
}

// SpSourceGTE applies the GTE predicate on the "sp_source" field.
func SpSourceGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSpSource, v))
}

// SpSourceLT applies the LT predicate on the "sp_source" field.
func SpSourceLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSpSource, v))
}

// SpSourceLTE applies the LTE predicate on the "sp_source" field.
func SpSourceLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSpSource, v))
}

// SpSourceContains applies the Contains predicate on the "sp_source" field.
func SpSourceContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldSpSource, v))
}

// SpSourceHasPrefix applies the HasPrefix predicate on the "sp_source" field.
func SpSourceHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldSpSource, v))
}

// SpSourceHasSuffix applies the HasSuffix predicate on the "sp_source" field.
func SpSourceHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldSpSource, v))
}

// SpSourceEqualFold applies the EqualFold predicate on the "sp_source" field.
func SpSourceEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldSpSource, v))
}

// SpSourceContainsFold applies the ContainsFold predicate on the "sp_source" field.
func SpSourceContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldSpSource, v))
}

// SpCodecNameEQ applies the EQ predicate on the "sp_codec_name" field.
func SpCodecNameEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpCodecName, v))
}

// SpCodecNameNEQ applies the NEQ predicate on the "sp_codec_name" field.
func SpCodecNameNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSpCodecName, v))
}

// SpCodecNameIn applies the In predicate on the "sp_codec_name" field.
func SpCodecNameIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSpCodecName, vs...))
}

// SpCodecNameNotIn applies the NotIn predicate on the "sp_codec_name" field.
func SpCodecNameNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSpCodecName, vs...))
}

// SpCodecNameGT applies the GT predicate on the "sp_codec_name" field.
func SpCodecNameGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSpCodecName, v))
}

// SpCodecNameGTE applies the GTE predicate on the "sp_codec_name" field.
func SpCodecNameGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSpCodecName, v))
}

// SpCodecNameLT applies the LT predicate on the "sp_codec_name" field.
func SpCodecNameLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSpCodecName, v))
}

// SpCodecNameLTE applies the LTE predicate on the "sp_codec_name" field.
func SpCodecNameLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSpCodecName, v))
}

// SpCodecNameContains applies the Contains predicate on the "sp_codec_name" field.
func SpCodecNameContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldSpCodecName, v))
}

// SpCodecNameHasPrefix applies the HasPrefix predicate on the "sp_codec_name" field.
func SpCodecNameHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldSpCodecName, v))
}

// SpCodecNameHasSuffix applies the HasSuffix predicate on the "sp_codec_name" field.
func SpCodecNameHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldSpCodecName, v))
}

// SpCodecNameEqualFold applies the EqualFold predicate on the "sp_codec_name" field.
func SpCodecNameEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldSpCodecName, v))
}

// SpCodecNameContainsFold applies the ContainsFold predicate on the "sp_codec_name" field.
func SpCodecNameContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldSpCodecName, v))
}

// SpWidthEQ applies the EQ predicate on the "sp_width" field.
func SpWidthEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpWidth, v))
}

// SpWidthNEQ applies the NEQ predicate on the "sp_width" field.
func SpWidthNEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSpWidth, v))
}

// SpWidthIn applies the In predicate on the "sp_width" field.
func SpWidthIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSpWidth, vs...))
}

// SpWidthNotIn applies the NotIn predicate on the "sp_width" field.
func SpWidthNotIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSpWidth, vs...))
}

// SpWidthGT applies the GT predicate on the "sp_width" field.
func SpWidthGT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSpWidth, v))
}

// SpWidthGTE applies the GTE predicate on the "sp_width" field.
func SpWidthGTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSpWidth, v))
}

// SpWidthLT applies the LT predicate on the "sp_width" field.
func SpWidthLT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSpWidth, v))
}

// SpWidthLTE applies the LTE predicate on the "sp_width" field.
func SpWidthLTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSpWidth, v))
}

// SpHeightEQ applies the EQ predicate on the "sp_height" field.
func SpHeightEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSpHeight, v))
}

// SpHeightNEQ applies the NEQ predicate on the "sp_height" field.
func SpHeightNEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSpHeight, v))
}

// SpHeightIn applies the In predicate on the "sp_height" field.
func SpHeightIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSpHeight, vs...))
}

// SpHeightNotIn applies the NotIn predicate on the "sp_height" field.
func SpHeightNotIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSpHeight, vs...))
}

// SpHeightGT applies the GT predicate on the "sp_height" field.
func SpHeightGT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSpHeight, v))
}

// SpHeightGTE applies the GTE predicate on the "sp_height" field.
func SpHeightGTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSpHeight, v))
}

// SpHeightLT applies the LT predicate on the "sp_height" field.
func SpHeightLT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSpHeight, v))
}

// SpHeightLTE applies the LTE predicate on the "sp_height" field.
func SpHeightLTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSpHeight, v))
}

// TransTypeEQ applies the EQ predicate on the "trans_type" field.
func TransTypeEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldTransType, v))
}

// TransTypeNEQ applies the NEQ predicate on the "trans_type" field.
func TransTypeNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldTransType, v))
}

// TransTypeIn applies the In predicate on the "trans_type" field.
func TransTypeIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldTransType, vs...))
}

// TransTypeNotIn applies the NotIn predicate on the "trans_type" field.
func TransTypeNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldTransType, vs...))
}

// TransTypeGT applies the GT predicate on the "trans_type" field.
func TransTypeGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldTransType, v))
}

// TransTypeGTE applies the GTE predicate on the "trans_type" field.
func TransTypeGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldTransType, v))
}

// TransTypeLT applies the LT predicate on the "trans_type" field.
func TransTypeLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldTransType, v))
}

// TransTypeLTE applies the LTE predicate on the "trans_type" field.
func TransTypeLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldTransType, v))
}

// TransTypeContains applies the Contains predicate on the "trans_type" field.
func TransTypeContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldTransType, v))
}

// TransTypeHasPrefix applies the HasPrefix predicate on the "trans_type" field.
func TransTypeHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldTransType, v))
}

// TransTypeHasSuffix applies the HasSuffix predicate on the "trans_type" field.
func TransTypeHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldTransType, v))
}

// TransTypeEqualFold applies the EqualFold predicate on the "trans_type" field.
func TransTypeEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldTransType, v))
}

// TransTypeContainsFold applies the ContainsFold predicate on the "trans_type" field.
func TransTypeContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldTransType, v))
}

// DeviceIPEQ applies the EQ predicate on the "device_ip" field.
func DeviceIPEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDeviceIP, v))
}

// DeviceIPNEQ applies the NEQ predicate on the "device_ip" field.
func DeviceIPNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldDeviceIP, v))
}

// DeviceIPIn applies the In predicate on the "device_ip" field.
func DeviceIPIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldDeviceIP, vs...))
}

// DeviceIPNotIn applies the NotIn predicate on the "device_ip" field.
func DeviceIPNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldDeviceIP, vs...))
}

// DeviceIPGT applies the GT predicate on the "device_ip" field.
func DeviceIPGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldDeviceIP, v))
}

// DeviceIPGTE applies the GTE predicate on the "device_ip" field.
func DeviceIPGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldDeviceIP, v))
}

// DeviceIPLT applies the LT predicate on the "device_ip" field.
func DeviceIPLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldDeviceIP, v))
}

// DeviceIPLTE applies the LTE predicate on the "device_ip" field.
func DeviceIPLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldDeviceIP, v))
}

// DeviceIPContains applies the Contains predicate on the "device_ip" field.
func DeviceIPContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldDeviceIP, v))
}

// DeviceIPHasPrefix applies the HasPrefix predicate on the "device_ip" field.
func DeviceIPHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldDeviceIP, v))
}

// DeviceIPHasSuffix applies the HasSuffix predicate on the "device_ip" field.
func DeviceIPHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldDeviceIP, v))
}

// DeviceIPEqualFold applies the EqualFold predicate on the "device_ip" field.
func DeviceIPEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldDeviceIP, v))
}

// DeviceIPContainsFold applies the ContainsFold predicate on the "device_ip" field.
func DeviceIPContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldDeviceIP, v))
}

// DevicePortEQ applies the EQ predicate on the "device_port" field.
func DevicePortEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDevicePort, v))
}

// DevicePortNEQ applies the NEQ predicate on the "device_port" field.
func DevicePortNEQ(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldDevicePort, v))
}

// DevicePortIn applies the In predicate on the "device_port" field.
func DevicePortIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldDevicePort, vs...))
}

// DevicePortNotIn applies the NotIn predicate on the "device_port" field.
func DevicePortNotIn(vs ...int32) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldDevicePort, vs...))
}

// DevicePortGT applies the GT predicate on the "device_port" field.
func DevicePortGT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldDevicePort, v))
}

// DevicePortGTE applies the GTE predicate on the "device_port" field.
func DevicePortGTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldDevicePort, v))
}

// DevicePortLT applies the LT predicate on the "device_port" field.
func DevicePortLT(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldDevicePort, v))
}

// DevicePortLTE applies the LTE predicate on the "device_port" field.
func DevicePortLTE(v int32) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldDevicePort, v))
}

// GBIDEQ applies the EQ predicate on the "gb_id" field.
func GBIDEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBID, v))
}

// GBIDNEQ applies the NEQ predicate on the "gb_id" field.
func GBIDNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldGBID, v))
}

// GBIDIn applies the In predicate on the "gb_id" field.
func GBIDIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldGBID, vs...))
}

// GBIDNotIn applies the NotIn predicate on the "gb_id" field.
func GBIDNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldGBID, vs...))
}

// GBIDGT applies the GT predicate on the "gb_id" field.
func GBIDGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldGBID, v))
}

// GBIDGTE applies the GTE predicate on the "gb_id" field.
func GBIDGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldGBID, v))
}

// GBIDLT applies the LT predicate on the "gb_id" field.
func GBIDLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldGBID, v))
}

// GBIDLTE applies the LTE predicate on the "gb_id" field.
func GBIDLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldGBID, v))
}

// GBIDContains applies the Contains predicate on the "gb_id" field.
func GBIDContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldGBID, v))
}

// GBIDHasPrefix applies the HasPrefix predicate on the "gb_id" field.
func GBIDHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldGBID, v))
}

// GBIDHasSuffix applies the HasSuffix predicate on the "gb_id" field.
func GBIDHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldGBID, v))
}

// GBIDEqualFold applies the EqualFold predicate on the "gb_id" field.
func GBIDEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldGBID, v))
}

// GBIDContainsFold applies the ContainsFold predicate on the "gb_id" field.
func GBIDContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldGBID, v))
}

// SipUserEQ applies the EQ predicate on the "sip_user" field.
func SipUserEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSipUser, v))
}

// SipUserNEQ applies the NEQ predicate on the "sip_user" field.
func SipUserNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSipUser, v))
}

// SipUserIn applies the In predicate on the "sip_user" field.
func SipUserIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSipUser, vs...))
}

// SipUserNotIn applies the NotIn predicate on the "sip_user" field.
func SipUserNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSipUser, vs...))
}

// SipUserGT applies the GT predicate on the "sip_user" field.
func SipUserGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSipUser, v))
}

// SipUserGTE applies the GTE predicate on the "sip_user" field.
func SipUserGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSipUser, v))
}

// SipUserLT applies the LT predicate on the "sip_user" field.
func SipUserLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSipUser, v))
}

// SipUserLTE applies the LTE predicate on the "sip_user" field.
func SipUserLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSipUser, v))
}

// SipUserContains applies the Contains predicate on the "sip_user" field.
func SipUserContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldSipUser, v))
}

// SipUserHasPrefix applies the HasPrefix predicate on the "sip_user" field.
func SipUserHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldSipUser, v))
}

// SipUserHasSuffix applies the HasSuffix predicate on the "sip_user" field.
func SipUserHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldSipUser, v))
}

// SipUserEqualFold applies the EqualFold predicate on the "sip_user" field.
func SipUserEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldSipUser, v))
}

// SipUserContainsFold applies the ContainsFold predicate on the "sip_user" field.
func SipUserContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldSipUser, v))
}

// SipPasswordEQ applies the EQ predicate on the "sip_password" field.
func SipPasswordEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldSipPassword, v))
}

// SipPasswordNEQ applies the NEQ predicate on the "sip_password" field.
func SipPasswordNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldSipPassword, v))
}

// SipPasswordIn applies the In predicate on the "sip_password" field.
func SipPasswordIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldSipPassword, vs...))
}

// SipPasswordNotIn applies the NotIn predicate on the "sip_password" field.
func SipPasswordNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldSipPassword, vs...))
}

// SipPasswordGT applies the GT predicate on the "sip_password" field.
func SipPasswordGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldSipPassword, v))
}

// SipPasswordGTE applies the GTE predicate on the "sip_password" field.
func SipPasswordGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldSipPassword, v))
}

// SipPasswordLT applies the LT predicate on the "sip_password" field.
func SipPasswordLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldSipPassword, v))
}

// SipPasswordLTE applies the LTE predicate on the "sip_password" field.
func SipPasswordLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldSipPassword, v))
}

// SipPasswordContains applies the Contains predicate on the "sip_password" field.
func SipPasswordContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldSipPassword, v))
}

// SipPasswordHasPrefix applies the HasPrefix predicate on the "sip_password" field.
func SipPasswordHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldSipPassword, v))
}

// SipPasswordHasSuffix applies the HasSuffix predicate on the "sip_password" field.
func SipPasswordHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldSipPassword, v))
}

// SipPasswordEqualFold applies the EqualFold predicate on the "sip_password" field.
func SipPasswordEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldSipPassword, v))
}

// SipPasswordContainsFold applies the ContainsFold predicate on the "sip_password" field.
func SipPasswordContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldSipPassword, v))
}

// GBChannelIDEQ applies the EQ predicate on the "gb_channel_id" field.
func GBChannelIDEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBChannelID, v))
}

// GBChannelIDNEQ applies the NEQ predicate on the "gb_channel_id" field.
func GBChannelIDNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldGBChannelID, v))
}

// GBChannelIDIn applies the In predicate on the "gb_channel_id" field.
func GBChannelIDIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldGBChannelID, vs...))
}

// GBChannelIDNotIn applies the NotIn predicate on the "gb_channel_id" field.
func GBChannelIDNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldGBChannelID, vs...))
}

// GBChannelIDGT applies the GT predicate on the "gb_channel_id" field.
func GBChannelIDGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldGBChannelID, v))
}

// GBChannelIDGTE applies the GTE predicate on the "gb_channel_id" field.
func GBChannelIDGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldGBChannelID, v))
}

// GBChannelIDLT applies the LT predicate on the "gb_channel_id" field.
func GBChannelIDLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldGBChannelID, v))
}

// GBChannelIDLTE applies the LTE predicate on the "gb_channel_id" field.
func GBChannelIDLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldGBChannelID, v))
}

// GBChannelIDContains applies the Contains predicate on the "gb_channel_id" field.
func GBChannelIDContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldGBChannelID, v))
}

// GBChannelIDHasPrefix applies the HasPrefix predicate on the "gb_channel_id" field.
func GBChannelIDHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldGBChannelID, v))
}

// GBChannelIDHasSuffix applies the HasSuffix predicate on the "gb_channel_id" field.
func GBChannelIDHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldGBChannelID, v))
}

// GBChannelIDEqualFold applies the EqualFold predicate on the "gb_channel_id" field.
func GBChannelIDEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldGBChannelID, v))
}

// GBChannelIDContainsFold applies the ContainsFold predicate on the "gb_channel_id" field.
func GBChannelIDContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldGBChannelID, v))
}

// UpGBChannelIDEQ applies the EQ predicate on the "up_gb_channel_id" field.
func UpGBChannelIDEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpGBChannelID, v))
}

// UpGBChannelIDNEQ applies the NEQ predicate on the "up_gb_channel_id" field.
func UpGBChannelIDNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldUpGBChannelID, v))
}

// UpGBChannelIDIn applies the In predicate on the "up_gb_channel_id" field.
func UpGBChannelIDIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldUpGBChannelID, vs...))
}

// UpGBChannelIDNotIn applies the NotIn predicate on the "up_gb_channel_id" field.
func UpGBChannelIDNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldUpGBChannelID, vs...))
}

// UpGBChannelIDGT applies the GT predicate on the "up_gb_channel_id" field.
func UpGBChannelIDGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldUpGBChannelID, v))
}

// UpGBChannelIDGTE applies the GTE predicate on the "up_gb_channel_id" field.
func UpGBChannelIDGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldUpGBChannelID, v))
}

// UpGBChannelIDLT applies the LT predicate on the "up_gb_channel_id" field.
func UpGBChannelIDLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldUpGBChannelID, v))
}

// UpGBChannelIDLTE applies the LTE predicate on the "up_gb_channel_id" field.
func UpGBChannelIDLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldUpGBChannelID, v))
}

// UpGBChannelIDContains applies the Contains predicate on the "up_gb_channel_id" field.
func UpGBChannelIDContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldUpGBChannelID, v))
}

// UpGBChannelIDHasPrefix applies the HasPrefix predicate on the "up_gb_channel_id" field.
func UpGBChannelIDHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldUpGBChannelID, v))
}

// UpGBChannelIDHasSuffix applies the HasSuffix predicate on the "up_gb_channel_id" field.
func UpGBChannelIDHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldUpGBChannelID, v))
}

// UpGBChannelIDEqualFold applies the EqualFold predicate on the "up_gb_channel_id" field.
func UpGBChannelIDEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldUpGBChannelID, v))
}

// UpGBChannelIDContainsFold applies the ContainsFold predicate on the "up_gb_channel_id" field.
func UpGBChannelIDContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldUpGBChannelID, v))
}

// GBDeviceTypeEQ applies the EQ predicate on the "gb_device_type" field.
func GBDeviceTypeEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldGBDeviceType, v))
}

// GBDeviceTypeNEQ applies the NEQ predicate on the "gb_device_type" field.
func GBDeviceTypeNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldGBDeviceType, v))
}

// GBDeviceTypeIn applies the In predicate on the "gb_device_type" field.
func GBDeviceTypeIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldGBDeviceType, vs...))
}

// GBDeviceTypeNotIn applies the NotIn predicate on the "gb_device_type" field.
func GBDeviceTypeNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldGBDeviceType, vs...))
}

// GBDeviceTypeGT applies the GT predicate on the "gb_device_type" field.
func GBDeviceTypeGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldGBDeviceType, v))
}

// GBDeviceTypeGTE applies the GTE predicate on the "gb_device_type" field.
func GBDeviceTypeGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldGBDeviceType, v))
}

// GBDeviceTypeLT applies the LT predicate on the "gb_device_type" field.
func GBDeviceTypeLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldGBDeviceType, v))
}

// GBDeviceTypeLTE applies the LTE predicate on the "gb_device_type" field.
func GBDeviceTypeLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldGBDeviceType, v))
}

// GBDeviceTypeContains applies the Contains predicate on the "gb_device_type" field.
func GBDeviceTypeContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldGBDeviceType, v))
}

// GBDeviceTypeHasPrefix applies the HasPrefix predicate on the "gb_device_type" field.
func GBDeviceTypeHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldGBDeviceType, v))
}

// GBDeviceTypeHasSuffix applies the HasSuffix predicate on the "gb_device_type" field.
func GBDeviceTypeHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldGBDeviceType, v))
}

// GBDeviceTypeEqualFold applies the EqualFold predicate on the "gb_device_type" field.
func GBDeviceTypeEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldGBDeviceType, v))
}

// GBDeviceTypeContainsFold applies the ContainsFold predicate on the "gb_device_type" field.
func GBDeviceTypeContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldGBDeviceType, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v biz.MediaType) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v biz.MediaType) predicate.Camera {
	vc := v
	return predicate.Camera(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...biz.MediaType) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...biz.MediaType) predicate.Camera {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Camera(sql.FieldNotIn(FieldType, v...))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaskTable, TaskPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeviceTable, DevicePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskCamera applies the HasEdge predicate on the "task_camera" edge.
func HasTaskCamera() predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TaskCameraTable, TaskCameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskCameraWith applies the HasEdge predicate on the "task_camera" edge with a given conditions (other predicates).
func HasTaskCameraWith(preds ...predicate.TaskCamera) predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := newTaskCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceCamera applies the HasEdge predicate on the "device_camera" edge.
func HasDeviceCamera() predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeviceCameraTable, DeviceCameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceCameraWith applies the HasEdge predicate on the "device_camera" edge with a given conditions (other predicates).
func HasDeviceCameraWith(preds ...predicate.DeviceCamera) predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := newDeviceCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.NotPredicates(p))
}
