// Code generated by ent, DO NOT EDIT.

package camera

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/blues120/ias-core/biz"
	"github.com/blues120/ias-core/biz/streaming"
)

const (
	// Label holds the string label denoting the camera type in the database.
	Label = "camera"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAccessOrgList holds the string denoting the access_org_list field in the database.
	FieldAccessOrgList = "access_org_list"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldRegionStr holds the string denoting the region_str field in the database.
	FieldRegionStr = "region_str"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldCustomNumber holds the string denoting the custom_number field in the database.
	FieldCustomNumber = "custom_number"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldSerialNumber holds the string denoting the serial_number field in the database.
	FieldSerialNumber = "serial_number"
	// FieldPoleNumber holds the string denoting the pole_number field in the database.
	FieldPoleNumber = "pole_number"
	// FieldDeviceDescription holds the string denoting the device_description field in the database.
	FieldDeviceDescription = "device_description"
	// FieldScene holds the string denoting the scene field in the database.
	FieldScene = "scene"
	// FieldPlace holds the string denoting the place field in the database.
	FieldPlace = "place"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSpType holds the string denoting the sp_type field in the database.
	FieldSpType = "sp_type"
	// FieldSpSource holds the string denoting the sp_source field in the database.
	FieldSpSource = "sp_source"
	// FieldSpCodecName holds the string denoting the sp_codec_name field in the database.
	FieldSpCodecName = "sp_codec_name"
	// FieldSpWidth holds the string denoting the sp_width field in the database.
	FieldSpWidth = "sp_width"
	// FieldSpHeight holds the string denoting the sp_height field in the database.
	FieldSpHeight = "sp_height"
	// FieldTransType holds the string denoting the trans_type field in the database.
	FieldTransType = "trans_type"
	// FieldDeviceIP holds the string denoting the device_ip field in the database.
	FieldDeviceIP = "device_ip"
	// FieldDevicePort holds the string denoting the device_port field in the database.
	FieldDevicePort = "device_port"
	// FieldGBID holds the string denoting the gb_id field in the database.
	FieldGBID = "gb_id"
	// FieldSipUser holds the string denoting the sip_user field in the database.
	FieldSipUser = "sip_user"
	// FieldSipPassword holds the string denoting the sip_password field in the database.
	FieldSipPassword = "sip_password"
	// FieldGBChannelID holds the string denoting the gb_channel_id field in the database.
	FieldGBChannelID = "gb_channel_id"
	// FieldUpGBChannelID holds the string denoting the up_gb_channel_id field in the database.
	FieldUpGBChannelID = "up_gb_channel_id"
	// FieldGBDeviceType holds the string denoting the gb_device_type field in the database.
	FieldGBDeviceType = "gb_device_type"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeTaskCamera holds the string denoting the task_camera edge name in mutations.
	EdgeTaskCamera = "task_camera"
	// EdgeDeviceCamera holds the string denoting the device_camera edge name in mutations.
	EdgeDeviceCamera = "device_camera"
	// Table holds the table name of the camera in the database.
	Table = "camera"
	// TaskTable is the table that holds the task relation/edge. The primary key declared below.
	TaskTable = "task_camera"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "task"
	// DeviceTable is the table that holds the device relation/edge. The primary key declared below.
	DeviceTable = "device_camera"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "device"
	// TaskCameraTable is the table that holds the task_camera relation/edge.
	TaskCameraTable = "task_camera"
	// TaskCameraInverseTable is the table name for the TaskCamera entity.
	// It exists in this package in order to avoid circular dependency with the "taskcamera" package.
	TaskCameraInverseTable = "task_camera"
	// TaskCameraColumn is the table column denoting the task_camera relation/edge.
	TaskCameraColumn = "camera_id"
	// DeviceCameraTable is the table that holds the device_camera relation/edge.
	DeviceCameraTable = "device_camera"
	// DeviceCameraInverseTable is the table name for the DeviceCamera entity.
	// It exists in this package in order to avoid circular dependency with the "devicecamera" package.
	DeviceCameraInverseTable = "device_camera"
	// DeviceCameraColumn is the table column denoting the device_camera relation/edge.
	DeviceCameraColumn = "camera_id"
)

// Columns holds all SQL columns for camera fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantID,
	FieldAccessOrgList,
	FieldName,
	FieldPosition,
	FieldRegion,
	FieldRegionStr,
	FieldLongitude,
	FieldLatitude,
	FieldCustomNumber,
	FieldChannelID,
	FieldSerialNumber,
	FieldPoleNumber,
	FieldDeviceDescription,
	FieldScene,
	FieldPlace,
	FieldStatus,
	FieldSpType,
	FieldSpSource,
	FieldSpCodecName,
	FieldSpWidth,
	FieldSpHeight,
	FieldTransType,
	FieldDeviceIP,
	FieldDevicePort,
	FieldGBID,
	FieldSipUser,
	FieldSipPassword,
	FieldGBChannelID,
	FieldUpGBChannelID,
	FieldGBDeviceType,
	FieldType,
}

var (
	// TaskPrimaryKey and TaskColumn2 are the table columns denoting the
	// primary key for the task relation (M2M).
	TaskPrimaryKey = []string{"task_id", "camera_id"}
	// DevicePrimaryKey and DeviceColumn2 are the table columns denoting the
	// primary key for the device relation (M2M).
	DevicePrimaryKey = []string{"device_id", "camera_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/blues120/ias-core/data/ent/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [4]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPlace holds the default value on creation for the "place" field.
	DefaultPlace string
	// SpSourceValidator is a validator for the "sp_source" field. It is called by the builders before save.
	SpSourceValidator func(string) error
	// DefaultTransType holds the default value on creation for the "trans_type" field.
	DefaultTransType string
	// DefaultDeviceIP holds the default value on creation for the "device_ip" field.
	DefaultDeviceIP string
	// DefaultDevicePort holds the default value on creation for the "device_port" field.
	DefaultDevicePort int32
	// DefaultGBID holds the default value on creation for the "gb_id" field.
	DefaultGBID string
	// DefaultSipUser holds the default value on creation for the "sip_user" field.
	DefaultSipUser string
	// DefaultSipPassword holds the default value on creation for the "sip_password" field.
	DefaultSipPassword string
	// DefaultGBChannelID holds the default value on creation for the "gb_channel_id" field.
	DefaultGBChannelID string
	// DefaultUpGBChannelID holds the default value on creation for the "up_gb_channel_id" field.
	DefaultUpGBChannelID string
	// DefaultGBDeviceType holds the default value on creation for the "gb_device_type" field.
	DefaultGBDeviceType string
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s biz.CameraStatus) error {
	switch s {
	case "online", "offline":
		return nil
	default:
		return fmt.Errorf("camera: invalid enum value for status field: %q", s)
	}
}

// SpTypeValidator is a validator for the "sp_type" field enum values. It is called by the builders before save.
func SpTypeValidator(st streaming.ProtocolType) error {
	switch st {
	case "rtsp", "rtmp", "onvif", "offline-video", "gb28181":
		return nil
	default:
		return fmt.Errorf("camera: invalid enum value for sp_type field: %q", st)
	}
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type biz.MediaType) error {
	switch _type {
	case "camera", "audio":
		return nil
	default:
		return fmt.Errorf("camera: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Camera queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAccessOrgList orders the results by the access_org_list field.
func ByAccessOrgList(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessOrgList, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByRegionStr orders the results by the region_str field.
func ByRegionStr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionStr, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByCustomNumber orders the results by the custom_number field.
func ByCustomNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomNumber, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// BySerialNumber orders the results by the serial_number field.
func BySerialNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerialNumber, opts...).ToFunc()
}

// ByPoleNumber orders the results by the pole_number field.
func ByPoleNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoleNumber, opts...).ToFunc()
}

// ByDeviceDescription orders the results by the device_description field.
func ByDeviceDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceDescription, opts...).ToFunc()
}

// ByScene orders the results by the scene field.
func ByScene(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScene, opts...).ToFunc()
}

// ByPlace orders the results by the place field.
func ByPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlace, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySpType orders the results by the sp_type field.
func BySpType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpType, opts...).ToFunc()
}

// BySpSource orders the results by the sp_source field.
func BySpSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpSource, opts...).ToFunc()
}

// BySpCodecName orders the results by the sp_codec_name field.
func BySpCodecName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpCodecName, opts...).ToFunc()
}

// BySpWidth orders the results by the sp_width field.
func BySpWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpWidth, opts...).ToFunc()
}

// BySpHeight orders the results by the sp_height field.
func BySpHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpHeight, opts...).ToFunc()
}

// ByTransType orders the results by the trans_type field.
func ByTransType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransType, opts...).ToFunc()
}

// ByDeviceIP orders the results by the device_ip field.
func ByDeviceIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceIP, opts...).ToFunc()
}

// ByDevicePort orders the results by the device_port field.
func ByDevicePort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevicePort, opts...).ToFunc()
}

// ByGBID orders the results by the gb_id field.
func ByGBID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGBID, opts...).ToFunc()
}

// BySipUser orders the results by the sip_user field.
func BySipUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSipUser, opts...).ToFunc()
}

// BySipPassword orders the results by the sip_password field.
func BySipPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSipPassword, opts...).ToFunc()
}

// ByGBChannelID orders the results by the gb_channel_id field.
func ByGBChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGBChannelID, opts...).ToFunc()
}

// ByUpGBChannelID orders the results by the up_gb_channel_id field.
func ByUpGBChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpGBChannelID, opts...).ToFunc()
}

// ByGBDeviceType orders the results by the gb_device_type field.
func ByGBDeviceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGBDeviceType, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTaskCount orders the results by task count.
func ByTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskStep(), opts...)
	}
}

// ByTask orders the results by task terms.
func ByTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceCount orders the results by device count.
func ByDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceStep(), opts...)
	}
}

// ByDevice orders the results by device terms.
func ByDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaskCameraCount orders the results by task_camera count.
func ByTaskCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskCameraStep(), opts...)
	}
}

// ByTaskCamera orders the results by task_camera terms.
func ByTaskCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceCameraCount orders the results by device_camera count.
func ByDeviceCameraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceCameraStep(), opts...)
	}
}

// ByDeviceCamera orders the results by device_camera terms.
func ByDeviceCamera(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceCameraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaskTable, TaskPrimaryKey...),
	)
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeviceTable, DevicePrimaryKey...),
	)
}
func newTaskCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskCameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TaskCameraTable, TaskCameraColumn),
	)
}
func newDeviceCameraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceCameraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeviceCameraTable, DeviceCameraColumn),
	)
}
