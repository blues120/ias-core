// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blues120/ias-core/data/ent/predicate"
	"github.com/blues120/ias-core/data/ent/upplatform"
)

// UpPlatformUpdate is the builder for updating UpPlatform entities.
type UpPlatformUpdate struct {
	config
	hooks     []Hook
	mutation  *UpPlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UpPlatformUpdate builder.
func (upu *UpPlatformUpdate) Where(ps ...predicate.UpPlatform) *UpPlatformUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetTenantID sets the "tenant_id" field.
func (upu *UpPlatformUpdate) SetTenantID(s string) *UpPlatformUpdate {
	upu.mutation.SetTenantID(s)
	return upu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableTenantID(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetTenantID(*s)
	}
	return upu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (upu *UpPlatformUpdate) ClearTenantID() *UpPlatformUpdate {
	upu.mutation.ClearTenantID()
	return upu
}

// SetAccessOrgList sets the "access_org_list" field.
func (upu *UpPlatformUpdate) SetAccessOrgList(s string) *UpPlatformUpdate {
	upu.mutation.SetAccessOrgList(s)
	return upu
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableAccessOrgList(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetAccessOrgList(*s)
	}
	return upu
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (upu *UpPlatformUpdate) ClearAccessOrgList() *UpPlatformUpdate {
	upu.mutation.ClearAccessOrgList()
	return upu
}

// SetSipID sets the "sip_id" field.
func (upu *UpPlatformUpdate) SetSipID(s string) *UpPlatformUpdate {
	upu.mutation.SetSipID(s)
	return upu
}

// SetNillableSipID sets the "sip_id" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipID(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetSipID(*s)
	}
	return upu
}

// SetSipDomain sets the "sip_domain" field.
func (upu *UpPlatformUpdate) SetSipDomain(s string) *UpPlatformUpdate {
	upu.mutation.SetSipDomain(s)
	return upu
}

// SetNillableSipDomain sets the "sip_domain" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipDomain(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetSipDomain(*s)
	}
	return upu
}

// SetSipIP sets the "sip_ip" field.
func (upu *UpPlatformUpdate) SetSipIP(s string) *UpPlatformUpdate {
	upu.mutation.SetSipIP(s)
	return upu
}

// SetNillableSipIP sets the "sip_ip" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipIP(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetSipIP(*s)
	}
	return upu
}

// SetSipPort sets the "sip_port" field.
func (upu *UpPlatformUpdate) SetSipPort(i int32) *UpPlatformUpdate {
	upu.mutation.ResetSipPort()
	upu.mutation.SetSipPort(i)
	return upu
}

// SetNillableSipPort sets the "sip_port" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipPort(i *int32) *UpPlatformUpdate {
	if i != nil {
		upu.SetSipPort(*i)
	}
	return upu
}

// AddSipPort adds i to the "sip_port" field.
func (upu *UpPlatformUpdate) AddSipPort(i int32) *UpPlatformUpdate {
	upu.mutation.AddSipPort(i)
	return upu
}

// SetSipUser sets the "sip_user" field.
func (upu *UpPlatformUpdate) SetSipUser(s string) *UpPlatformUpdate {
	upu.mutation.SetSipUser(s)
	return upu
}

// SetNillableSipUser sets the "sip_user" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipUser(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetSipUser(*s)
	}
	return upu
}

// SetSipPassword sets the "sip_password" field.
func (upu *UpPlatformUpdate) SetSipPassword(s string) *UpPlatformUpdate {
	upu.mutation.SetSipPassword(s)
	return upu
}

// SetNillableSipPassword sets the "sip_password" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableSipPassword(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetSipPassword(*s)
	}
	return upu
}

// SetDescription sets the "description" field.
func (upu *UpPlatformUpdate) SetDescription(s string) *UpPlatformUpdate {
	upu.mutation.SetDescription(s)
	return upu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableDescription(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetDescription(*s)
	}
	return upu
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (upu *UpPlatformUpdate) SetHeartbeatInterval(i int32) *UpPlatformUpdate {
	upu.mutation.ResetHeartbeatInterval()
	upu.mutation.SetHeartbeatInterval(i)
	return upu
}

// SetNillableHeartbeatInterval sets the "heartbeat_interval" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableHeartbeatInterval(i *int32) *UpPlatformUpdate {
	if i != nil {
		upu.SetHeartbeatInterval(*i)
	}
	return upu
}

// AddHeartbeatInterval adds i to the "heartbeat_interval" field.
func (upu *UpPlatformUpdate) AddHeartbeatInterval(i int32) *UpPlatformUpdate {
	upu.mutation.AddHeartbeatInterval(i)
	return upu
}

// SetRegisterInterval sets the "register_interval" field.
func (upu *UpPlatformUpdate) SetRegisterInterval(i int32) *UpPlatformUpdate {
	upu.mutation.ResetRegisterInterval()
	upu.mutation.SetRegisterInterval(i)
	return upu
}

// SetNillableRegisterInterval sets the "register_interval" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableRegisterInterval(i *int32) *UpPlatformUpdate {
	if i != nil {
		upu.SetRegisterInterval(*i)
	}
	return upu
}

// AddRegisterInterval adds i to the "register_interval" field.
func (upu *UpPlatformUpdate) AddRegisterInterval(i int32) *UpPlatformUpdate {
	upu.mutation.AddRegisterInterval(i)
	return upu
}

// SetTransType sets the "trans_type" field.
func (upu *UpPlatformUpdate) SetTransType(s string) *UpPlatformUpdate {
	upu.mutation.SetTransType(s)
	return upu
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableTransType(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetTransType(*s)
	}
	return upu
}

// SetGBID sets the "gb_id" field.
func (upu *UpPlatformUpdate) SetGBID(s string) *UpPlatformUpdate {
	upu.mutation.SetGBID(s)
	return upu
}

// SetNillableGBID sets the "gb_id" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableGBID(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetGBID(*s)
	}
	return upu
}

// SetCascadestatus sets the "cascadestatus" field.
func (upu *UpPlatformUpdate) SetCascadestatus(s string) *UpPlatformUpdate {
	upu.mutation.SetCascadestatus(s)
	return upu
}

// SetNillableCascadestatus sets the "cascadestatus" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableCascadestatus(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetCascadestatus(*s)
	}
	return upu
}

// SetRegistrationStatus sets the "registration_status" field.
func (upu *UpPlatformUpdate) SetRegistrationStatus(s string) *UpPlatformUpdate {
	upu.mutation.SetRegistrationStatus(s)
	return upu
}

// SetNillableRegistrationStatus sets the "registration_status" field if the given value is not nil.
func (upu *UpPlatformUpdate) SetNillableRegistrationStatus(s *string) *UpPlatformUpdate {
	if s != nil {
		upu.SetRegistrationStatus(*s)
	}
	return upu
}

// Mutation returns the UpPlatformMutation object of the builder.
func (upu *UpPlatformUpdate) Mutation() *UpPlatformMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UpPlatformUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UpPlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UpPlatformUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UpPlatformUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UpPlatformUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpPlatformUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UpPlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upplatform.Table, upplatform.Columns, sqlgraph.NewFieldSpec(upplatform.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.TenantID(); ok {
		_spec.SetField(upplatform.FieldTenantID, field.TypeString, value)
	}
	if upu.mutation.TenantIDCleared() {
		_spec.ClearField(upplatform.FieldTenantID, field.TypeString)
	}
	if value, ok := upu.mutation.AccessOrgList(); ok {
		_spec.SetField(upplatform.FieldAccessOrgList, field.TypeString, value)
	}
	if upu.mutation.AccessOrgListCleared() {
		_spec.ClearField(upplatform.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := upu.mutation.SipID(); ok {
		_spec.SetField(upplatform.FieldSipID, field.TypeString, value)
	}
	if value, ok := upu.mutation.SipDomain(); ok {
		_spec.SetField(upplatform.FieldSipDomain, field.TypeString, value)
	}
	if value, ok := upu.mutation.SipIP(); ok {
		_spec.SetField(upplatform.FieldSipIP, field.TypeString, value)
	}
	if value, ok := upu.mutation.SipPort(); ok {
		_spec.SetField(upplatform.FieldSipPort, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.AddedSipPort(); ok {
		_spec.AddField(upplatform.FieldSipPort, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.SipUser(); ok {
		_spec.SetField(upplatform.FieldSipUser, field.TypeString, value)
	}
	if value, ok := upu.mutation.SipPassword(); ok {
		_spec.SetField(upplatform.FieldSipPassword, field.TypeString, value)
	}
	if value, ok := upu.mutation.Description(); ok {
		_spec.SetField(upplatform.FieldDescription, field.TypeString, value)
	}
	if value, ok := upu.mutation.HeartbeatInterval(); ok {
		_spec.SetField(upplatform.FieldHeartbeatInterval, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.AddedHeartbeatInterval(); ok {
		_spec.AddField(upplatform.FieldHeartbeatInterval, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.RegisterInterval(); ok {
		_spec.SetField(upplatform.FieldRegisterInterval, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.AddedRegisterInterval(); ok {
		_spec.AddField(upplatform.FieldRegisterInterval, field.TypeInt32, value)
	}
	if value, ok := upu.mutation.TransType(); ok {
		_spec.SetField(upplatform.FieldTransType, field.TypeString, value)
	}
	if value, ok := upu.mutation.GBID(); ok {
		_spec.SetField(upplatform.FieldGBID, field.TypeString, value)
	}
	if value, ok := upu.mutation.Cascadestatus(); ok {
		_spec.SetField(upplatform.FieldCascadestatus, field.TypeString, value)
	}
	if value, ok := upu.mutation.RegistrationStatus(); ok {
		_spec.SetField(upplatform.FieldRegistrationStatus, field.TypeString, value)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UpPlatformUpdateOne is the builder for updating a single UpPlatform entity.
type UpPlatformUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UpPlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTenantID sets the "tenant_id" field.
func (upuo *UpPlatformUpdateOne) SetTenantID(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetTenantID(s)
	return upuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableTenantID(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetTenantID(*s)
	}
	return upuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (upuo *UpPlatformUpdateOne) ClearTenantID() *UpPlatformUpdateOne {
	upuo.mutation.ClearTenantID()
	return upuo
}

// SetAccessOrgList sets the "access_org_list" field.
func (upuo *UpPlatformUpdateOne) SetAccessOrgList(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetAccessOrgList(s)
	return upuo
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableAccessOrgList(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetAccessOrgList(*s)
	}
	return upuo
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (upuo *UpPlatformUpdateOne) ClearAccessOrgList() *UpPlatformUpdateOne {
	upuo.mutation.ClearAccessOrgList()
	return upuo
}

// SetSipID sets the "sip_id" field.
func (upuo *UpPlatformUpdateOne) SetSipID(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetSipID(s)
	return upuo
}

// SetNillableSipID sets the "sip_id" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipID(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetSipID(*s)
	}
	return upuo
}

// SetSipDomain sets the "sip_domain" field.
func (upuo *UpPlatformUpdateOne) SetSipDomain(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetSipDomain(s)
	return upuo
}

// SetNillableSipDomain sets the "sip_domain" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipDomain(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetSipDomain(*s)
	}
	return upuo
}

// SetSipIP sets the "sip_ip" field.
func (upuo *UpPlatformUpdateOne) SetSipIP(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetSipIP(s)
	return upuo
}

// SetNillableSipIP sets the "sip_ip" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipIP(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetSipIP(*s)
	}
	return upuo
}

// SetSipPort sets the "sip_port" field.
func (upuo *UpPlatformUpdateOne) SetSipPort(i int32) *UpPlatformUpdateOne {
	upuo.mutation.ResetSipPort()
	upuo.mutation.SetSipPort(i)
	return upuo
}

// SetNillableSipPort sets the "sip_port" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipPort(i *int32) *UpPlatformUpdateOne {
	if i != nil {
		upuo.SetSipPort(*i)
	}
	return upuo
}

// AddSipPort adds i to the "sip_port" field.
func (upuo *UpPlatformUpdateOne) AddSipPort(i int32) *UpPlatformUpdateOne {
	upuo.mutation.AddSipPort(i)
	return upuo
}

// SetSipUser sets the "sip_user" field.
func (upuo *UpPlatformUpdateOne) SetSipUser(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetSipUser(s)
	return upuo
}

// SetNillableSipUser sets the "sip_user" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipUser(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetSipUser(*s)
	}
	return upuo
}

// SetSipPassword sets the "sip_password" field.
func (upuo *UpPlatformUpdateOne) SetSipPassword(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetSipPassword(s)
	return upuo
}

// SetNillableSipPassword sets the "sip_password" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableSipPassword(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetSipPassword(*s)
	}
	return upuo
}

// SetDescription sets the "description" field.
func (upuo *UpPlatformUpdateOne) SetDescription(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetDescription(s)
	return upuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableDescription(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetDescription(*s)
	}
	return upuo
}

// SetHeartbeatInterval sets the "heartbeat_interval" field.
func (upuo *UpPlatformUpdateOne) SetHeartbeatInterval(i int32) *UpPlatformUpdateOne {
	upuo.mutation.ResetHeartbeatInterval()
	upuo.mutation.SetHeartbeatInterval(i)
	return upuo
}

// SetNillableHeartbeatInterval sets the "heartbeat_interval" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableHeartbeatInterval(i *int32) *UpPlatformUpdateOne {
	if i != nil {
		upuo.SetHeartbeatInterval(*i)
	}
	return upuo
}

// AddHeartbeatInterval adds i to the "heartbeat_interval" field.
func (upuo *UpPlatformUpdateOne) AddHeartbeatInterval(i int32) *UpPlatformUpdateOne {
	upuo.mutation.AddHeartbeatInterval(i)
	return upuo
}

// SetRegisterInterval sets the "register_interval" field.
func (upuo *UpPlatformUpdateOne) SetRegisterInterval(i int32) *UpPlatformUpdateOne {
	upuo.mutation.ResetRegisterInterval()
	upuo.mutation.SetRegisterInterval(i)
	return upuo
}

// SetNillableRegisterInterval sets the "register_interval" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableRegisterInterval(i *int32) *UpPlatformUpdateOne {
	if i != nil {
		upuo.SetRegisterInterval(*i)
	}
	return upuo
}

// AddRegisterInterval adds i to the "register_interval" field.
func (upuo *UpPlatformUpdateOne) AddRegisterInterval(i int32) *UpPlatformUpdateOne {
	upuo.mutation.AddRegisterInterval(i)
	return upuo
}

// SetTransType sets the "trans_type" field.
func (upuo *UpPlatformUpdateOne) SetTransType(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetTransType(s)
	return upuo
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableTransType(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetTransType(*s)
	}
	return upuo
}

// SetGBID sets the "gb_id" field.
func (upuo *UpPlatformUpdateOne) SetGBID(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetGBID(s)
	return upuo
}

// SetNillableGBID sets the "gb_id" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableGBID(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetGBID(*s)
	}
	return upuo
}

// SetCascadestatus sets the "cascadestatus" field.
func (upuo *UpPlatformUpdateOne) SetCascadestatus(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetCascadestatus(s)
	return upuo
}

// SetNillableCascadestatus sets the "cascadestatus" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableCascadestatus(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetCascadestatus(*s)
	}
	return upuo
}

// SetRegistrationStatus sets the "registration_status" field.
func (upuo *UpPlatformUpdateOne) SetRegistrationStatus(s string) *UpPlatformUpdateOne {
	upuo.mutation.SetRegistrationStatus(s)
	return upuo
}

// SetNillableRegistrationStatus sets the "registration_status" field if the given value is not nil.
func (upuo *UpPlatformUpdateOne) SetNillableRegistrationStatus(s *string) *UpPlatformUpdateOne {
	if s != nil {
		upuo.SetRegistrationStatus(*s)
	}
	return upuo
}

// Mutation returns the UpPlatformMutation object of the builder.
func (upuo *UpPlatformUpdateOne) Mutation() *UpPlatformMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UpPlatformUpdate builder.
func (upuo *UpPlatformUpdateOne) Where(ps ...predicate.UpPlatform) *UpPlatformUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UpPlatformUpdateOne) Select(field string, fields ...string) *UpPlatformUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UpPlatform entity.
func (upuo *UpPlatformUpdateOne) Save(ctx context.Context) (*UpPlatform, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UpPlatformUpdateOne) SaveX(ctx context.Context) *UpPlatform {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UpPlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UpPlatformUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UpPlatformUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpPlatformUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UpPlatformUpdateOne) sqlSave(ctx context.Context) (_node *UpPlatform, err error) {
	_spec := sqlgraph.NewUpdateSpec(upplatform.Table, upplatform.Columns, sqlgraph.NewFieldSpec(upplatform.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpPlatform.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upplatform.FieldID)
		for _, f := range fields {
			if !upplatform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upplatform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.TenantID(); ok {
		_spec.SetField(upplatform.FieldTenantID, field.TypeString, value)
	}
	if upuo.mutation.TenantIDCleared() {
		_spec.ClearField(upplatform.FieldTenantID, field.TypeString)
	}
	if value, ok := upuo.mutation.AccessOrgList(); ok {
		_spec.SetField(upplatform.FieldAccessOrgList, field.TypeString, value)
	}
	if upuo.mutation.AccessOrgListCleared() {
		_spec.ClearField(upplatform.FieldAccessOrgList, field.TypeString)
	}
	if value, ok := upuo.mutation.SipID(); ok {
		_spec.SetField(upplatform.FieldSipID, field.TypeString, value)
	}
	if value, ok := upuo.mutation.SipDomain(); ok {
		_spec.SetField(upplatform.FieldSipDomain, field.TypeString, value)
	}
	if value, ok := upuo.mutation.SipIP(); ok {
		_spec.SetField(upplatform.FieldSipIP, field.TypeString, value)
	}
	if value, ok := upuo.mutation.SipPort(); ok {
		_spec.SetField(upplatform.FieldSipPort, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.AddedSipPort(); ok {
		_spec.AddField(upplatform.FieldSipPort, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.SipUser(); ok {
		_spec.SetField(upplatform.FieldSipUser, field.TypeString, value)
	}
	if value, ok := upuo.mutation.SipPassword(); ok {
		_spec.SetField(upplatform.FieldSipPassword, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Description(); ok {
		_spec.SetField(upplatform.FieldDescription, field.TypeString, value)
	}
	if value, ok := upuo.mutation.HeartbeatInterval(); ok {
		_spec.SetField(upplatform.FieldHeartbeatInterval, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.AddedHeartbeatInterval(); ok {
		_spec.AddField(upplatform.FieldHeartbeatInterval, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.RegisterInterval(); ok {
		_spec.SetField(upplatform.FieldRegisterInterval, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.AddedRegisterInterval(); ok {
		_spec.AddField(upplatform.FieldRegisterInterval, field.TypeInt32, value)
	}
	if value, ok := upuo.mutation.TransType(); ok {
		_spec.SetField(upplatform.FieldTransType, field.TypeString, value)
	}
	if value, ok := upuo.mutation.GBID(); ok {
		_spec.SetField(upplatform.FieldGBID, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Cascadestatus(); ok {
		_spec.SetField(upplatform.FieldCascadestatus, field.TypeString, value)
	}
	if value, ok := upuo.mutation.RegistrationStatus(); ok {
		_spec.SetField(upplatform.FieldRegistrationStatus, field.TypeString, value)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UpPlatform{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
