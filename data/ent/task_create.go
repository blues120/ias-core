// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/biz"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/algorithm"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/device"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/taskcamera"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TaskCreate) SetDeletedAt(t time.Time) *TaskCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDeletedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetTenantID sets the "tenant_id" field.
func (tc *TaskCreate) SetTenantID(s string) *TaskCreate {
	tc.mutation.SetTenantID(s)
	return tc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTenantID(s *string) *TaskCreate {
	if s != nil {
		tc.SetTenantID(*s)
	}
	return tc
}

// SetAccessOrgList sets the "access_org_list" field.
func (tc *TaskCreate) SetAccessOrgList(s string) *TaskCreate {
	tc.mutation.SetAccessOrgList(s)
	return tc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAccessOrgList(s *string) *TaskCreate {
	if s != nil {
		tc.SetAccessOrgList(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TaskCreate) SetName(s string) *TaskCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(bt biz.TaskType) *TaskCreate {
	tc.mutation.SetType(bt)
	return tc
}

// SetAlgoID sets the "algo_id" field.
func (tc *TaskCreate) SetAlgoID(u uint64) *TaskCreate {
	tc.mutation.SetAlgoID(u)
	return tc
}

// SetAlgoInterval sets the "algo_interval" field.
func (tc *TaskCreate) SetAlgoInterval(f float64) *TaskCreate {
	tc.mutation.SetAlgoInterval(f)
	return tc
}

// SetAlgoExtra sets the "algo_extra" field.
func (tc *TaskCreate) SetAlgoExtra(s string) *TaskCreate {
	tc.mutation.SetAlgoExtra(s)
	return tc
}

// SetExtend sets the "extend" field.
func (tc *TaskCreate) SetExtend(s string) *TaskCreate {
	tc.mutation.SetExtend(s)
	return tc
}

// SetDeviceID sets the "device_id" field.
func (tc *TaskCreate) SetDeviceID(u uint64) *TaskCreate {
	tc.mutation.SetDeviceID(u)
	return tc
}

// SetLastStartTime sets the "last_start_time" field.
func (tc *TaskCreate) SetLastStartTime(st *sql.NullTime) *TaskCreate {
	tc.mutation.SetLastStartTime(st)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(bs biz.TaskStatus) *TaskCreate {
	tc.mutation.SetStatus(bs)
	return tc
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (tc *TaskCreate) SetAlgoGroupID(u uint) *TaskCreate {
	tc.mutation.SetAlgoGroupID(u)
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TaskCreate) SetParentID(s string) *TaskCreate {
	tc.mutation.SetParentID(s)
	return tc
}

// SetIsWarn sets the "is_warn" field.
func (tc *TaskCreate) SetIsWarn(u uint32) *TaskCreate {
	tc.mutation.SetIsWarn(u)
	return tc
}

// SetPeriod sets the "period" field.
func (tc *TaskCreate) SetPeriod(u uint32) *TaskCreate {
	tc.mutation.SetPeriod(u)
	return tc
}

// SetAlgoConfig sets the "algo_config" field.
func (tc *TaskCreate) SetAlgoConfig(s string) *TaskCreate {
	tc.mutation.SetAlgoConfig(s)
	return tc
}

// SetNillableAlgoConfig sets the "algo_config" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAlgoConfig(s *string) *TaskCreate {
	if s != nil {
		tc.SetAlgoConfig(*s)
	}
	return tc
}

// SetReason sets the "reason" field.
func (tc *TaskCreate) SetReason(s string) *TaskCreate {
	tc.mutation.SetReason(s)
	return tc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tc *TaskCreate) SetNillableReason(s *string) *TaskCreate {
	if s != nil {
		tc.SetReason(*s)
	}
	return tc
}

// SetAllowTimeType sets the "allow_time_type" field.
func (tc *TaskCreate) SetAllowTimeType(s string) *TaskCreate {
	tc.mutation.SetAllowTimeType(s)
	return tc
}

// SetNillableAllowTimeType sets the "allow_time_type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAllowTimeType(s *string) *TaskCreate {
	if s != nil {
		tc.SetAllowTimeType(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(u uint64) *TaskCreate {
	tc.mutation.SetID(u)
	return tc
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (tc *TaskCreate) AddCameraIDs(ids ...uint64) *TaskCreate {
	tc.mutation.AddCameraIDs(ids...)
	return tc
}

// AddCamera adds the "camera" edges to the Camera entity.
func (tc *TaskCreate) AddCamera(c ...*Camera) *TaskCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCameraIDs(ids...)
}

// SetAlgorithmID sets the "algorithm" edge to the Algorithm entity by ID.
func (tc *TaskCreate) SetAlgorithmID(id uint64) *TaskCreate {
	tc.mutation.SetAlgorithmID(id)
	return tc
}

// SetAlgorithm sets the "algorithm" edge to the Algorithm entity.
func (tc *TaskCreate) SetAlgorithm(a *Algorithm) *TaskCreate {
	return tc.SetAlgorithmID(a.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (tc *TaskCreate) SetDevice(d *Device) *TaskCreate {
	return tc.SetDeviceID(d.ID)
}

// AddTaskCameraIDs adds the "task_camera" edge to the TaskCamera entity by IDs.
func (tc *TaskCreate) AddTaskCameraIDs(ids ...uint64) *TaskCreate {
	tc.mutation.AddTaskCameraIDs(ids...)
	return tc
}

// AddTaskCamera adds the "task_camera" edges to the TaskCamera entity.
func (tc *TaskCreate) AddTaskCamera(t ...*TaskCamera) *TaskCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskCameraIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if task.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if task.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Reason(); !ok {
		v := task.DefaultReason
		tc.mutation.SetReason(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Task.name"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AlgoID(); !ok {
		return &ValidationError{Name: "algo_id", err: errors.New(`ent: missing required field "Task.algo_id"`)}
	}
	if _, ok := tc.mutation.AlgoInterval(); !ok {
		return &ValidationError{Name: "algo_interval", err: errors.New(`ent: missing required field "Task.algo_interval"`)}
	}
	if _, ok := tc.mutation.AlgoExtra(); !ok {
		return &ValidationError{Name: "algo_extra", err: errors.New(`ent: missing required field "Task.algo_extra"`)}
	}
	if _, ok := tc.mutation.Extend(); !ok {
		return &ValidationError{Name: "extend", err: errors.New(`ent: missing required field "Task.extend"`)}
	}
	if _, ok := tc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "Task.device_id"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AlgoGroupID(); !ok {
		return &ValidationError{Name: "algo_group_id", err: errors.New(`ent: missing required field "Task.algo_group_id"`)}
	}
	if _, ok := tc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Task.parent_id"`)}
	}
	if _, ok := tc.mutation.IsWarn(); !ok {
		return &ValidationError{Name: "is_warn", err: errors.New(`ent: missing required field "Task.is_warn"`)}
	}
	if _, ok := tc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "Task.period"`)}
	}
	if _, ok := tc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Task.reason"`)}
	}
	if _, ok := tc.mutation.AlgorithmID(); !ok {
		return &ValidationError{Name: "algorithm", err: errors.New(`ent: missing required edge "Task.algorithm"`)}
	}
	if _, ok := tc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required edge "Task.device"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.TenantID(); ok {
		_spec.SetField(task.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tc.mutation.AccessOrgList(); ok {
		_spec.SetField(task.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.AlgoInterval(); ok {
		_spec.SetField(task.FieldAlgoInterval, field.TypeFloat64, value)
		_node.AlgoInterval = value
	}
	if value, ok := tc.mutation.AlgoExtra(); ok {
		_spec.SetField(task.FieldAlgoExtra, field.TypeString, value)
		_node.AlgoExtra = value
	}
	if value, ok := tc.mutation.Extend(); ok {
		_spec.SetField(task.FieldExtend, field.TypeString, value)
		_node.Extend = value
	}
	if value, ok := tc.mutation.LastStartTime(); ok {
		_spec.SetField(task.FieldLastStartTime, field.TypeTime, value)
		_node.LastStartTime = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.AlgoGroupID(); ok {
		_spec.SetField(task.FieldAlgoGroupID, field.TypeUint, value)
		_node.AlgoGroupID = value
	}
	if value, ok := tc.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
		_node.ParentID = value
	}
	if value, ok := tc.mutation.IsWarn(); ok {
		_spec.SetField(task.FieldIsWarn, field.TypeUint32, value)
		_node.IsWarn = value
	}
	if value, ok := tc.mutation.Period(); ok {
		_spec.SetField(task.FieldPeriod, field.TypeUint32, value)
		_node.Period = value
	}
	if value, ok := tc.mutation.AlgoConfig(); ok {
		_spec.SetField(task.FieldAlgoConfig, field.TypeString, value)
		_node.AlgoConfig = value
	}
	if value, ok := tc.mutation.Reason(); ok {
		_spec.SetField(task.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := tc.mutation.AllowTimeType(); ok {
		_spec.SetField(task.FieldAllowTimeType, field.TypeString, value)
		_node.AllowTimeType = value
	}
	if nodes := tc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CameraTable,
			Columns: task.CameraPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TaskCameraCreate{config: tc.config, mutation: newTaskCameraMutation(tc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AlgorithmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AlgorithmTable,
			Columns: []string{task.AlgorithmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(algorithm.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlgoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeviceTable,
			Columns: []string{task.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskCameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   task.TaskCameraTable,
			Columns: []string{task.TaskCameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsert) SetUpdatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsert) SetDeletedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDeletedAt() *TaskUpsert {
	u.SetExcluded(task.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsert) ClearDeletedAt() *TaskUpsert {
	u.SetNull(task.FieldDeletedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskUpsert) SetTenantID(v string) *TaskUpsert {
	u.Set(task.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTenantID() *TaskUpsert {
	u.SetExcluded(task.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskUpsert) ClearTenantID() *TaskUpsert {
	u.SetNull(task.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskUpsert) SetAccessOrgList(v string) *TaskUpsert {
	u.Set(task.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAccessOrgList() *TaskUpsert {
	u.SetExcluded(task.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskUpsert) ClearAccessOrgList() *TaskUpsert {
	u.SetNull(task.FieldAccessOrgList)
	return u
}

// SetName sets the "name" field.
func (u *TaskUpsert) SetName(v string) *TaskUpsert {
	u.Set(task.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateName() *TaskUpsert {
	u.SetExcluded(task.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *TaskUpsert) SetType(v biz.TaskType) *TaskUpsert {
	u.Set(task.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateType() *TaskUpsert {
	u.SetExcluded(task.FieldType)
	return u
}

// SetAlgoID sets the "algo_id" field.
func (u *TaskUpsert) SetAlgoID(v uint64) *TaskUpsert {
	u.Set(task.FieldAlgoID, v)
	return u
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAlgoID() *TaskUpsert {
	u.SetExcluded(task.FieldAlgoID)
	return u
}

// SetAlgoInterval sets the "algo_interval" field.
func (u *TaskUpsert) SetAlgoInterval(v float64) *TaskUpsert {
	u.Set(task.FieldAlgoInterval, v)
	return u
}

// UpdateAlgoInterval sets the "algo_interval" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAlgoInterval() *TaskUpsert {
	u.SetExcluded(task.FieldAlgoInterval)
	return u
}

// AddAlgoInterval adds v to the "algo_interval" field.
func (u *TaskUpsert) AddAlgoInterval(v float64) *TaskUpsert {
	u.Add(task.FieldAlgoInterval, v)
	return u
}

// SetAlgoExtra sets the "algo_extra" field.
func (u *TaskUpsert) SetAlgoExtra(v string) *TaskUpsert {
	u.Set(task.FieldAlgoExtra, v)
	return u
}

// UpdateAlgoExtra sets the "algo_extra" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAlgoExtra() *TaskUpsert {
	u.SetExcluded(task.FieldAlgoExtra)
	return u
}

// SetExtend sets the "extend" field.
func (u *TaskUpsert) SetExtend(v string) *TaskUpsert {
	u.Set(task.FieldExtend, v)
	return u
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *TaskUpsert) UpdateExtend() *TaskUpsert {
	u.SetExcluded(task.FieldExtend)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *TaskUpsert) SetDeviceID(v uint64) *TaskUpsert {
	u.Set(task.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDeviceID() *TaskUpsert {
	u.SetExcluded(task.FieldDeviceID)
	return u
}

// SetLastStartTime sets the "last_start_time" field.
func (u *TaskUpsert) SetLastStartTime(v *sql.NullTime) *TaskUpsert {
	u.Set(task.FieldLastStartTime, v)
	return u
}

// UpdateLastStartTime sets the "last_start_time" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLastStartTime() *TaskUpsert {
	u.SetExcluded(task.FieldLastStartTime)
	return u
}

// ClearLastStartTime clears the value of the "last_start_time" field.
func (u *TaskUpsert) ClearLastStartTime() *TaskUpsert {
	u.SetNull(task.FieldLastStartTime)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v biz.TaskStatus) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *TaskUpsert) SetAlgoGroupID(v uint) *TaskUpsert {
	u.Set(task.FieldAlgoGroupID, v)
	return u
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAlgoGroupID() *TaskUpsert {
	u.SetExcluded(task.FieldAlgoGroupID)
	return u
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *TaskUpsert) AddAlgoGroupID(v uint) *TaskUpsert {
	u.Add(task.FieldAlgoGroupID, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsert) SetParentID(v string) *TaskUpsert {
	u.Set(task.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateParentID() *TaskUpsert {
	u.SetExcluded(task.FieldParentID)
	return u
}

// SetIsWarn sets the "is_warn" field.
func (u *TaskUpsert) SetIsWarn(v uint32) *TaskUpsert {
	u.Set(task.FieldIsWarn, v)
	return u
}

// UpdateIsWarn sets the "is_warn" field to the value that was provided on create.
func (u *TaskUpsert) UpdateIsWarn() *TaskUpsert {
	u.SetExcluded(task.FieldIsWarn)
	return u
}

// AddIsWarn adds v to the "is_warn" field.
func (u *TaskUpsert) AddIsWarn(v uint32) *TaskUpsert {
	u.Add(task.FieldIsWarn, v)
	return u
}

// SetPeriod sets the "period" field.
func (u *TaskUpsert) SetPeriod(v uint32) *TaskUpsert {
	u.Set(task.FieldPeriod, v)
	return u
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *TaskUpsert) UpdatePeriod() *TaskUpsert {
	u.SetExcluded(task.FieldPeriod)
	return u
}

// AddPeriod adds v to the "period" field.
func (u *TaskUpsert) AddPeriod(v uint32) *TaskUpsert {
	u.Add(task.FieldPeriod, v)
	return u
}

// SetAlgoConfig sets the "algo_config" field.
func (u *TaskUpsert) SetAlgoConfig(v string) *TaskUpsert {
	u.Set(task.FieldAlgoConfig, v)
	return u
}

// UpdateAlgoConfig sets the "algo_config" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAlgoConfig() *TaskUpsert {
	u.SetExcluded(task.FieldAlgoConfig)
	return u
}

// ClearAlgoConfig clears the value of the "algo_config" field.
func (u *TaskUpsert) ClearAlgoConfig() *TaskUpsert {
	u.SetNull(task.FieldAlgoConfig)
	return u
}

// SetReason sets the "reason" field.
func (u *TaskUpsert) SetReason(v string) *TaskUpsert {
	u.Set(task.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *TaskUpsert) UpdateReason() *TaskUpsert {
	u.SetExcluded(task.FieldReason)
	return u
}

// SetAllowTimeType sets the "allow_time_type" field.
func (u *TaskUpsert) SetAllowTimeType(v string) *TaskUpsert {
	u.Set(task.FieldAllowTimeType, v)
	return u
}

// UpdateAllowTimeType sets the "allow_time_type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAllowTimeType() *TaskUpsert {
	u.SetExcluded(task.FieldAllowTimeType)
	return u
}

// ClearAllowTimeType clears the value of the "allow_time_type" field.
func (u *TaskUpsert) ClearAllowTimeType() *TaskUpsert {
	u.SetNull(task.FieldAllowTimeType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertOne) SetUpdatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsertOne) SetDeletedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDeletedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsertOne) ClearDeletedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskUpsertOne) SetTenantID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTenantID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskUpsertOne) ClearTenantID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskUpsertOne) SetAccessOrgList(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAccessOrgList() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskUpsertOne) ClearAccessOrgList() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *TaskUpsertOne) SetName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertOne) SetType(v biz.TaskType) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetAlgoID sets the "algo_id" field.
func (u *TaskUpsertOne) SetAlgoID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoID(v)
	})
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAlgoID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoID()
	})
}

// SetAlgoInterval sets the "algo_interval" field.
func (u *TaskUpsertOne) SetAlgoInterval(v float64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoInterval(v)
	})
}

// AddAlgoInterval adds v to the "algo_interval" field.
func (u *TaskUpsertOne) AddAlgoInterval(v float64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddAlgoInterval(v)
	})
}

// UpdateAlgoInterval sets the "algo_interval" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAlgoInterval() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoInterval()
	})
}

// SetAlgoExtra sets the "algo_extra" field.
func (u *TaskUpsertOne) SetAlgoExtra(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoExtra(v)
	})
}

// UpdateAlgoExtra sets the "algo_extra" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAlgoExtra() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoExtra()
	})
}

// SetExtend sets the "extend" field.
func (u *TaskUpsertOne) SetExtend(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetExtend(v)
	})
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateExtend() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExtend()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *TaskUpsertOne) SetDeviceID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDeviceID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeviceID()
	})
}

// SetLastStartTime sets the "last_start_time" field.
func (u *TaskUpsertOne) SetLastStartTime(v *sql.NullTime) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastStartTime(v)
	})
}

// UpdateLastStartTime sets the "last_start_time" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLastStartTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastStartTime()
	})
}

// ClearLastStartTime clears the value of the "last_start_time" field.
func (u *TaskUpsertOne) ClearLastStartTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastStartTime()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v biz.TaskStatus) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *TaskUpsertOne) SetAlgoGroupID(v uint) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *TaskUpsertOne) AddAlgoGroupID(v uint) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAlgoGroupID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsertOne) SetParentID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateParentID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParentID()
	})
}

// SetIsWarn sets the "is_warn" field.
func (u *TaskUpsertOne) SetIsWarn(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsWarn(v)
	})
}

// AddIsWarn adds v to the "is_warn" field.
func (u *TaskUpsertOne) AddIsWarn(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddIsWarn(v)
	})
}

// UpdateIsWarn sets the "is_warn" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateIsWarn() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsWarn()
	})
}

// SetPeriod sets the "period" field.
func (u *TaskUpsertOne) SetPeriod(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetPeriod(v)
	})
}

// AddPeriod adds v to the "period" field.
func (u *TaskUpsertOne) AddPeriod(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdatePeriod() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePeriod()
	})
}

// SetAlgoConfig sets the "algo_config" field.
func (u *TaskUpsertOne) SetAlgoConfig(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoConfig(v)
	})
}

// UpdateAlgoConfig sets the "algo_config" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAlgoConfig() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoConfig()
	})
}

// ClearAlgoConfig clears the value of the "algo_config" field.
func (u *TaskUpsertOne) ClearAlgoConfig() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAlgoConfig()
	})
}

// SetReason sets the "reason" field.
func (u *TaskUpsertOne) SetReason(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateReason() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateReason()
	})
}

// SetAllowTimeType sets the "allow_time_type" field.
func (u *TaskUpsertOne) SetAllowTimeType(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAllowTimeType(v)
	})
}

// UpdateAllowTimeType sets the "allow_time_type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAllowTimeType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAllowTimeType()
	})
}

// ClearAllowTimeType clears the value of the "allow_time_type" field.
func (u *TaskUpsertOne) ClearAllowTimeType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAllowTimeType()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertBulk) SetUpdatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsertBulk) SetDeletedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDeletedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsertBulk) ClearDeletedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskUpsertBulk) SetTenantID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTenantID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskUpsertBulk) ClearTenantID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskUpsertBulk) SetAccessOrgList(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAccessOrgList() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskUpsertBulk) ClearAccessOrgList() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetName sets the "name" field.
func (u *TaskUpsertBulk) SetName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertBulk) SetType(v biz.TaskType) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetAlgoID sets the "algo_id" field.
func (u *TaskUpsertBulk) SetAlgoID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoID(v)
	})
}

// UpdateAlgoID sets the "algo_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAlgoID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoID()
	})
}

// SetAlgoInterval sets the "algo_interval" field.
func (u *TaskUpsertBulk) SetAlgoInterval(v float64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoInterval(v)
	})
}

// AddAlgoInterval adds v to the "algo_interval" field.
func (u *TaskUpsertBulk) AddAlgoInterval(v float64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddAlgoInterval(v)
	})
}

// UpdateAlgoInterval sets the "algo_interval" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAlgoInterval() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoInterval()
	})
}

// SetAlgoExtra sets the "algo_extra" field.
func (u *TaskUpsertBulk) SetAlgoExtra(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoExtra(v)
	})
}

// UpdateAlgoExtra sets the "algo_extra" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAlgoExtra() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoExtra()
	})
}

// SetExtend sets the "extend" field.
func (u *TaskUpsertBulk) SetExtend(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetExtend(v)
	})
}

// UpdateExtend sets the "extend" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateExtend() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExtend()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *TaskUpsertBulk) SetDeviceID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDeviceID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeviceID()
	})
}

// SetLastStartTime sets the "last_start_time" field.
func (u *TaskUpsertBulk) SetLastStartTime(v *sql.NullTime) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastStartTime(v)
	})
}

// UpdateLastStartTime sets the "last_start_time" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLastStartTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastStartTime()
	})
}

// ClearLastStartTime clears the value of the "last_start_time" field.
func (u *TaskUpsertBulk) ClearLastStartTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastStartTime()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v biz.TaskStatus) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetAlgoGroupID sets the "algo_group_id" field.
func (u *TaskUpsertBulk) SetAlgoGroupID(v uint) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoGroupID(v)
	})
}

// AddAlgoGroupID adds v to the "algo_group_id" field.
func (u *TaskUpsertBulk) AddAlgoGroupID(v uint) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddAlgoGroupID(v)
	})
}

// UpdateAlgoGroupID sets the "algo_group_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAlgoGroupID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoGroupID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsertBulk) SetParentID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateParentID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParentID()
	})
}

// SetIsWarn sets the "is_warn" field.
func (u *TaskUpsertBulk) SetIsWarn(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsWarn(v)
	})
}

// AddIsWarn adds v to the "is_warn" field.
func (u *TaskUpsertBulk) AddIsWarn(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddIsWarn(v)
	})
}

// UpdateIsWarn sets the "is_warn" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateIsWarn() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsWarn()
	})
}

// SetPeriod sets the "period" field.
func (u *TaskUpsertBulk) SetPeriod(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetPeriod(v)
	})
}

// AddPeriod adds v to the "period" field.
func (u *TaskUpsertBulk) AddPeriod(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdatePeriod() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePeriod()
	})
}

// SetAlgoConfig sets the "algo_config" field.
func (u *TaskUpsertBulk) SetAlgoConfig(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAlgoConfig(v)
	})
}

// UpdateAlgoConfig sets the "algo_config" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAlgoConfig() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAlgoConfig()
	})
}

// ClearAlgoConfig clears the value of the "algo_config" field.
func (u *TaskUpsertBulk) ClearAlgoConfig() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAlgoConfig()
	})
}

// SetReason sets the "reason" field.
func (u *TaskUpsertBulk) SetReason(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateReason() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateReason()
	})
}

// SetAllowTimeType sets the "allow_time_type" field.
func (u *TaskUpsertBulk) SetAllowTimeType(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAllowTimeType(v)
	})
}

// UpdateAllowTimeType sets the "allow_time_type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAllowTimeType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAllowTimeType()
	})
}

// ClearAllowTimeType clears the value of the "allow_time_type" field.
func (u *TaskUpsertBulk) ClearAllowTimeType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAllowTimeType()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
