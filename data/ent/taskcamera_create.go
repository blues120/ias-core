// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/camera"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/task"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/taskcamera"
)

// TaskCameraCreate is the builder for creating a TaskCamera entity.
type TaskCameraCreate struct {
	config
	mutation *TaskCameraMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TaskCameraCreate) SetCreatedAt(t time.Time) *TaskCameraCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TaskCameraCreate) SetNillableCreatedAt(t *time.Time) *TaskCameraCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TaskCameraCreate) SetUpdatedAt(t time.Time) *TaskCameraCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TaskCameraCreate) SetNillableUpdatedAt(t *time.Time) *TaskCameraCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetTenantID sets the "tenant_id" field.
func (tcc *TaskCameraCreate) SetTenantID(s string) *TaskCameraCreate {
	tcc.mutation.SetTenantID(s)
	return tcc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tcc *TaskCameraCreate) SetNillableTenantID(s *string) *TaskCameraCreate {
	if s != nil {
		tcc.SetTenantID(*s)
	}
	return tcc
}

// SetAccessOrgList sets the "access_org_list" field.
func (tcc *TaskCameraCreate) SetAccessOrgList(s string) *TaskCameraCreate {
	tcc.mutation.SetAccessOrgList(s)
	return tcc
}

// SetNillableAccessOrgList sets the "access_org_list" field if the given value is not nil.
func (tcc *TaskCameraCreate) SetNillableAccessOrgList(s *string) *TaskCameraCreate {
	if s != nil {
		tcc.SetAccessOrgList(*s)
	}
	return tcc
}

// SetTaskID sets the "task_id" field.
func (tcc *TaskCameraCreate) SetTaskID(u uint64) *TaskCameraCreate {
	tcc.mutation.SetTaskID(u)
	return tcc
}

// SetCameraID sets the "camera_id" field.
func (tcc *TaskCameraCreate) SetCameraID(u uint64) *TaskCameraCreate {
	tcc.mutation.SetCameraID(u)
	return tcc
}

// SetMultiImgBox sets the "multi_img_box" field.
func (tcc *TaskCameraCreate) SetMultiImgBox(s string) *TaskCameraCreate {
	tcc.mutation.SetMultiImgBox(s)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TaskCameraCreate) SetID(u uint64) *TaskCameraCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// SetCamera sets the "camera" edge to the Camera entity.
func (tcc *TaskCameraCreate) SetCamera(c *Camera) *TaskCameraCreate {
	return tcc.SetCameraID(c.ID)
}

// SetTask sets the "task" edge to the Task entity.
func (tcc *TaskCameraCreate) SetTask(t *Task) *TaskCameraCreate {
	return tcc.SetTaskID(t.ID)
}

// Mutation returns the TaskCameraMutation object of the builder.
func (tcc *TaskCameraCreate) Mutation() *TaskCameraMutation {
	return tcc.mutation
}

// Save creates the TaskCamera in the database.
func (tcc *TaskCameraCreate) Save(ctx context.Context) (*TaskCamera, error) {
	if err := tcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaskCameraCreate) SaveX(ctx context.Context) *TaskCamera {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaskCameraCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaskCameraCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaskCameraCreate) defaults() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		if taskcamera.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized taskcamera.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := taskcamera.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		if taskcamera.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized taskcamera.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := taskcamera.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaskCameraCreate) check() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskCamera.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskCamera.updated_at"`)}
	}
	if _, ok := tcc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "TaskCamera.task_id"`)}
	}
	if _, ok := tcc.mutation.CameraID(); !ok {
		return &ValidationError{Name: "camera_id", err: errors.New(`ent: missing required field "TaskCamera.camera_id"`)}
	}
	if _, ok := tcc.mutation.MultiImgBox(); !ok {
		return &ValidationError{Name: "multi_img_box", err: errors.New(`ent: missing required field "TaskCamera.multi_img_box"`)}
	}
	if _, ok := tcc.mutation.CameraID(); !ok {
		return &ValidationError{Name: "camera", err: errors.New(`ent: missing required edge "TaskCamera.camera"`)}
	}
	if _, ok := tcc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "TaskCamera.task"`)}
	}
	return nil
}

func (tcc *TaskCameraCreate) sqlSave(ctx context.Context) (*TaskCamera, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TaskCameraCreate) createSpec() (*TaskCamera, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskCamera{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(taskcamera.Table, sqlgraph.NewFieldSpec(taskcamera.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(taskcamera.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskcamera.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.TenantID(); ok {
		_spec.SetField(taskcamera.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tcc.mutation.AccessOrgList(); ok {
		_spec.SetField(taskcamera.FieldAccessOrgList, field.TypeString, value)
		_node.AccessOrgList = value
	}
	if value, ok := tcc.mutation.MultiImgBox(); ok {
		_spec.SetField(taskcamera.FieldMultiImgBox, field.TypeString, value)
		_node.MultiImgBox = value
	}
	if nodes := tcc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskcamera.CameraTable,
			Columns: []string{taskcamera.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CameraID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskcamera.TaskTable,
			Columns: []string{taskcamera.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskCamera.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskCameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcc *TaskCameraCreate) OnConflict(opts ...sql.ConflictOption) *TaskCameraUpsertOne {
	tcc.conflict = opts
	return &TaskCameraUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TaskCameraCreate) OnConflictColumns(columns ...string) *TaskCameraUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TaskCameraUpsertOne{
		create: tcc,
	}
}

type (
	// TaskCameraUpsertOne is the builder for "upsert"-ing
	//  one TaskCamera node.
	TaskCameraUpsertOne struct {
		create *TaskCameraCreate
	}

	// TaskCameraUpsert is the "OnConflict" setter.
	TaskCameraUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskCameraUpsert) SetUpdatedAt(v time.Time) *TaskCameraUpsert {
	u.Set(taskcamera.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateUpdatedAt() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldUpdatedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskCameraUpsert) SetTenantID(v string) *TaskCameraUpsert {
	u.Set(taskcamera.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateTenantID() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldTenantID)
	return u
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskCameraUpsert) ClearTenantID() *TaskCameraUpsert {
	u.SetNull(taskcamera.FieldTenantID)
	return u
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskCameraUpsert) SetAccessOrgList(v string) *TaskCameraUpsert {
	u.Set(taskcamera.FieldAccessOrgList, v)
	return u
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateAccessOrgList() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldAccessOrgList)
	return u
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskCameraUpsert) ClearAccessOrgList() *TaskCameraUpsert {
	u.SetNull(taskcamera.FieldAccessOrgList)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskCameraUpsert) SetTaskID(v uint64) *TaskCameraUpsert {
	u.Set(taskcamera.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateTaskID() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldTaskID)
	return u
}

// SetCameraID sets the "camera_id" field.
func (u *TaskCameraUpsert) SetCameraID(v uint64) *TaskCameraUpsert {
	u.Set(taskcamera.FieldCameraID, v)
	return u
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateCameraID() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldCameraID)
	return u
}

// SetMultiImgBox sets the "multi_img_box" field.
func (u *TaskCameraUpsert) SetMultiImgBox(v string) *TaskCameraUpsert {
	u.Set(taskcamera.FieldMultiImgBox, v)
	return u
}

// UpdateMultiImgBox sets the "multi_img_box" field to the value that was provided on create.
func (u *TaskCameraUpsert) UpdateMultiImgBox() *TaskCameraUpsert {
	u.SetExcluded(taskcamera.FieldMultiImgBox)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskcamera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskCameraUpsertOne) UpdateNewValues() *TaskCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskcamera.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(taskcamera.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskCameraUpsertOne) Ignore() *TaskCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskCameraUpsertOne) DoNothing() *TaskCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCameraCreate.OnConflict
// documentation for more info.
func (u *TaskCameraUpsertOne) Update(set func(*TaskCameraUpsert)) *TaskCameraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskCameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskCameraUpsertOne) SetUpdatedAt(v time.Time) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateUpdatedAt() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskCameraUpsertOne) SetTenantID(v string) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateTenantID() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskCameraUpsertOne) ClearTenantID() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskCameraUpsertOne) SetAccessOrgList(v string) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateAccessOrgList() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskCameraUpsertOne) ClearAccessOrgList() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskCameraUpsertOne) SetTaskID(v uint64) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateTaskID() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateTaskID()
	})
}

// SetCameraID sets the "camera_id" field.
func (u *TaskCameraUpsertOne) SetCameraID(v uint64) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetCameraID(v)
	})
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateCameraID() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateCameraID()
	})
}

// SetMultiImgBox sets the "multi_img_box" field.
func (u *TaskCameraUpsertOne) SetMultiImgBox(v string) *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetMultiImgBox(v)
	})
}

// UpdateMultiImgBox sets the "multi_img_box" field to the value that was provided on create.
func (u *TaskCameraUpsertOne) UpdateMultiImgBox() *TaskCameraUpsertOne {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateMultiImgBox()
	})
}

// Exec executes the query.
func (u *TaskCameraUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCameraCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskCameraUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskCameraUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskCameraUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCameraCreateBulk is the builder for creating many TaskCamera entities in bulk.
type TaskCameraCreateBulk struct {
	config
	err      error
	builders []*TaskCameraCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskCamera entities in the database.
func (tccb *TaskCameraCreateBulk) Save(ctx context.Context) ([]*TaskCamera, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaskCamera, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskCameraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaskCameraCreateBulk) SaveX(ctx context.Context) []*TaskCamera {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaskCameraCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaskCameraCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskCamera.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskCameraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tccb *TaskCameraCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskCameraUpsertBulk {
	tccb.conflict = opts
	return &TaskCameraUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TaskCameraCreateBulk) OnConflictColumns(columns ...string) *TaskCameraUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TaskCameraUpsertBulk{
		create: tccb,
	}
}

// TaskCameraUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskCamera nodes.
type TaskCameraUpsertBulk struct {
	create *TaskCameraCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskcamera.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskCameraUpsertBulk) UpdateNewValues() *TaskCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskcamera.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(taskcamera.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskCamera.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskCameraUpsertBulk) Ignore() *TaskCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskCameraUpsertBulk) DoNothing() *TaskCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCameraCreateBulk.OnConflict
// documentation for more info.
func (u *TaskCameraUpsertBulk) Update(set func(*TaskCameraUpsert)) *TaskCameraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskCameraUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskCameraUpsertBulk) SetUpdatedAt(v time.Time) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateUpdatedAt() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *TaskCameraUpsertBulk) SetTenantID(v string) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateTenantID() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateTenantID()
	})
}

// ClearTenantID clears the value of the "tenant_id" field.
func (u *TaskCameraUpsertBulk) ClearTenantID() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.ClearTenantID()
	})
}

// SetAccessOrgList sets the "access_org_list" field.
func (u *TaskCameraUpsertBulk) SetAccessOrgList(v string) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetAccessOrgList(v)
	})
}

// UpdateAccessOrgList sets the "access_org_list" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateAccessOrgList() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateAccessOrgList()
	})
}

// ClearAccessOrgList clears the value of the "access_org_list" field.
func (u *TaskCameraUpsertBulk) ClearAccessOrgList() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.ClearAccessOrgList()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskCameraUpsertBulk) SetTaskID(v uint64) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateTaskID() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateTaskID()
	})
}

// SetCameraID sets the "camera_id" field.
func (u *TaskCameraUpsertBulk) SetCameraID(v uint64) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetCameraID(v)
	})
}

// UpdateCameraID sets the "camera_id" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateCameraID() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateCameraID()
	})
}

// SetMultiImgBox sets the "multi_img_box" field.
func (u *TaskCameraUpsertBulk) SetMultiImgBox(v string) *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.SetMultiImgBox(v)
	})
}

// UpdateMultiImgBox sets the "multi_img_box" field to the value that was provided on create.
func (u *TaskCameraUpsertBulk) UpdateMultiImgBox() *TaskCameraUpsertBulk {
	return u.Update(func(s *TaskCameraUpsert) {
		s.UpdateMultiImgBox()
	})
}

// Exec executes the query.
func (u *TaskCameraUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCameraCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCameraCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskCameraUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
