// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/tasklimits"
)

// TaskLimits is the model entity for the TaskLimits schema.
type TaskLimits struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 设备型号
	Model string `json:"model,omitempty"`
	// 最大摄像头数
	MaxCameraNum uint64 `json:"maxCameraNum,omitempty"`
	// 算法数
	AlgoNum uint64 `json:"algoNum,omitempty"`
	// 最大子任务路数
	MaxSubTaskNum uint64 `json:"maxSubTaskNum,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskLimits) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasklimits.FieldID, tasklimits.FieldMaxCameraNum, tasklimits.FieldAlgoNum, tasklimits.FieldMaxSubTaskNum:
			values[i] = new(sql.NullInt64)
		case tasklimits.FieldModel:
			values[i] = new(sql.NullString)
		case tasklimits.FieldCreatedAt, tasklimits.FieldUpdatedAt, tasklimits.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskLimits fields.
func (tl *TaskLimits) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasklimits.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = uint64(value.Int64)
		case tasklimits.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		case tasklimits.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tl.UpdatedAt = value.Time
			}
		case tasklimits.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tl.DeletedAt = value.Time
			}
		case tasklimits.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				tl.Model = value.String
			}
		case tasklimits.FieldMaxCameraNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maxCameraNum", values[i])
			} else if value.Valid {
				tl.MaxCameraNum = uint64(value.Int64)
			}
		case tasklimits.FieldAlgoNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field algoNum", values[i])
			} else if value.Valid {
				tl.AlgoNum = uint64(value.Int64)
			}
		case tasklimits.FieldMaxSubTaskNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maxSubTaskNum", values[i])
			} else if value.Valid {
				tl.MaxSubTaskNum = uint64(value.Int64)
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskLimits.
// This includes values selected through modifiers, order, etc.
func (tl *TaskLimits) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// Update returns a builder for updating this TaskLimits.
// Note that you need to call TaskLimits.Unwrap() before calling this method if this TaskLimits
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TaskLimits) Update() *TaskLimitsUpdateOne {
	return NewTaskLimitsClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TaskLimits entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TaskLimits) Unwrap() *TaskLimits {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskLimits is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TaskLimits) String() string {
	var builder strings.Builder
	builder.WriteString("TaskLimits(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(tl.Model)
	builder.WriteString(", ")
	builder.WriteString("maxCameraNum=")
	builder.WriteString(fmt.Sprintf("%v", tl.MaxCameraNum))
	builder.WriteString(", ")
	builder.WriteString("algoNum=")
	builder.WriteString(fmt.Sprintf("%v", tl.AlgoNum))
	builder.WriteString(", ")
	builder.WriteString("maxSubTaskNum=")
	builder.WriteString(fmt.Sprintf("%v", tl.MaxSubTaskNum))
	builder.WriteByte(')')
	return builder.String()
}

// TaskLimitsSlice is a parsable slice of TaskLimits.
type TaskLimitsSlice []*TaskLimits
