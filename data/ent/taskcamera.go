// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/camera"
	"github.com/blues120/ias-core/data/ent/task"
	"github.com/blues120/ias-core/data/ent/taskcamera"
)

// TaskCamera is the model entity for the TaskCamera schema.
type TaskCamera struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// 授权的组织 id 列表，#分隔
	AccessOrgList string `json:"access_org_list,omitempty"`
	// 任务id
	TaskID uint64 `json:"task_id,omitempty"`
	// 摄像头id
	CameraID uint64 `json:"camera_id,omitempty"`
	// 划线区域
	MultiImgBox string `json:"multi_img_box,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskCameraQuery when eager-loading is set.
	Edges        TaskCameraEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskCameraEdges holds the relations/edges for other nodes in the graph.
type TaskCameraEdges struct {
	// Camera holds the value of the camera edge.
	Camera *Camera `json:"camera,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CameraOrErr returns the Camera value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskCameraEdges) CameraOrErr() (*Camera, error) {
	if e.loadedTypes[0] {
		if e.Camera == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: camera.Label}
		}
		return e.Camera, nil
	}
	return nil, &NotLoadedError{edge: "camera"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskCameraEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskCamera) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskcamera.FieldID, taskcamera.FieldTaskID, taskcamera.FieldCameraID:
			values[i] = new(sql.NullInt64)
		case taskcamera.FieldTenantID, taskcamera.FieldAccessOrgList, taskcamera.FieldMultiImgBox:
			values[i] = new(sql.NullString)
		case taskcamera.FieldCreatedAt, taskcamera.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskCamera fields.
func (tc *TaskCamera) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskcamera.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = uint64(value.Int64)
		case taskcamera.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case taskcamera.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		case taskcamera.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tc.TenantID = value.String
			}
		case taskcamera.FieldAccessOrgList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_org_list", values[i])
			} else if value.Valid {
				tc.AccessOrgList = value.String
			}
		case taskcamera.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				tc.TaskID = uint64(value.Int64)
			}
		case taskcamera.FieldCameraID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field camera_id", values[i])
			} else if value.Valid {
				tc.CameraID = uint64(value.Int64)
			}
		case taskcamera.FieldMultiImgBox:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field multi_img_box", values[i])
			} else if value.Valid {
				tc.MultiImgBox = value.String
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskCamera.
// This includes values selected through modifiers, order, etc.
func (tc *TaskCamera) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryCamera queries the "camera" edge of the TaskCamera entity.
func (tc *TaskCamera) QueryCamera() *CameraQuery {
	return NewTaskCameraClient(tc.config).QueryCamera(tc)
}

// QueryTask queries the "task" edge of the TaskCamera entity.
func (tc *TaskCamera) QueryTask() *TaskQuery {
	return NewTaskCameraClient(tc.config).QueryTask(tc)
}

// Update returns a builder for updating this TaskCamera.
// Note that you need to call TaskCamera.Unwrap() before calling this method if this TaskCamera
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaskCamera) Update() *TaskCameraUpdateOne {
	return NewTaskCameraClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TaskCamera entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaskCamera) Unwrap() *TaskCamera {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskCamera is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaskCamera) String() string {
	var builder strings.Builder
	builder.WriteString("TaskCamera(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(tc.TenantID)
	builder.WriteString(", ")
	builder.WriteString("access_org_list=")
	builder.WriteString(tc.AccessOrgList)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.TaskID))
	builder.WriteString(", ")
	builder.WriteString("camera_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.CameraID))
	builder.WriteString(", ")
	builder.WriteString("multi_img_box=")
	builder.WriteString(tc.MultiImgBox)
	builder.WriteByte(')')
	return builder.String()
}

// TaskCameras is a parsable slice of TaskCamera.
type TaskCameras []*TaskCamera
