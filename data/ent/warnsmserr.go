// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.ctyuncdn.cn/ias/ias-core/data/ent/warnsmserr"
)

// WarnSmsErr is the model entity for the WarnSmsErr schema.
type WarnSmsErr struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// 授权的组织 id 列表，#分隔
	AccessOrgList string `json:"access_org_list,omitempty"`
	// 应用名称
	AppName string `json:"app_name,omitempty"`
	// 告警记录ID
	RecordID uint64 `json:"record_id,omitempty"`
	// 短信发送错误信息
	ErrorMsg     string `json:"error_msg,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WarnSmsErr) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warnsmserr.FieldID, warnsmserr.FieldRecordID:
			values[i] = new(sql.NullInt64)
		case warnsmserr.FieldTenantID, warnsmserr.FieldAccessOrgList, warnsmserr.FieldAppName, warnsmserr.FieldErrorMsg:
			values[i] = new(sql.NullString)
		case warnsmserr.FieldCreatedAt, warnsmserr.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WarnSmsErr fields.
func (wse *WarnSmsErr) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warnsmserr.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wse.ID = uint64(value.Int64)
		case warnsmserr.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wse.CreatedAt = value.Time
			}
		case warnsmserr.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wse.UpdatedAt = value.Time
			}
		case warnsmserr.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				wse.TenantID = value.String
			}
		case warnsmserr.FieldAccessOrgList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_org_list", values[i])
			} else if value.Valid {
				wse.AccessOrgList = value.String
			}
		case warnsmserr.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				wse.AppName = value.String
			}
		case warnsmserr.FieldRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				wse.RecordID = uint64(value.Int64)
			}
		case warnsmserr.FieldErrorMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_msg", values[i])
			} else if value.Valid {
				wse.ErrorMsg = value.String
			}
		default:
			wse.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WarnSmsErr.
// This includes values selected through modifiers, order, etc.
func (wse *WarnSmsErr) Value(name string) (ent.Value, error) {
	return wse.selectValues.Get(name)
}

// Update returns a builder for updating this WarnSmsErr.
// Note that you need to call WarnSmsErr.Unwrap() before calling this method if this WarnSmsErr
// was returned from a transaction, and the transaction was committed or rolled back.
func (wse *WarnSmsErr) Update() *WarnSmsErrUpdateOne {
	return NewWarnSmsErrClient(wse.config).UpdateOne(wse)
}

// Unwrap unwraps the WarnSmsErr entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wse *WarnSmsErr) Unwrap() *WarnSmsErr {
	_tx, ok := wse.config.driver.(*txDriver)
	if !ok {
		panic("ent: WarnSmsErr is not a transactional entity")
	}
	wse.config.driver = _tx.drv
	return wse
}

// String implements the fmt.Stringer.
func (wse *WarnSmsErr) String() string {
	var builder strings.Builder
	builder.WriteString("WarnSmsErr(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wse.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wse.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wse.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(wse.TenantID)
	builder.WriteString(", ")
	builder.WriteString("access_org_list=")
	builder.WriteString(wse.AccessOrgList)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(wse.AppName)
	builder.WriteString(", ")
	builder.WriteString("record_id=")
	builder.WriteString(fmt.Sprintf("%v", wse.RecordID))
	builder.WriteString(", ")
	builder.WriteString("error_msg=")
	builder.WriteString(wse.ErrorMsg)
	builder.WriteByte(')')
	return builder.String()
}

// WarnSmsErrs is a parsable slice of WarnSmsErr.
type WarnSmsErrs []*WarnSmsErr
