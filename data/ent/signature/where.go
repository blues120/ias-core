// Code generated by ent, DO NOT EDIT.

package signature

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/blues120/ias-core/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldDeletedAt, v))
}

// BoxID applies equality check predicate on the "box_id" field. It's identical to BoxIDEQ.
func BoxID(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldBoxID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldAppID, v))
}

// AppSecret applies equality check predicate on the "app_secret" field. It's identical to AppSecretEQ.
func AppSecret(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldAppSecret, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Signature {
	return predicate.Signature(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Signature {
	return predicate.Signature(sql.FieldNotNull(FieldDeletedAt))
}

// BoxIDEQ applies the EQ predicate on the "box_id" field.
func BoxIDEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldBoxID, v))
}

// BoxIDNEQ applies the NEQ predicate on the "box_id" field.
func BoxIDNEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldBoxID, v))
}

// BoxIDIn applies the In predicate on the "box_id" field.
func BoxIDIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldBoxID, vs...))
}

// BoxIDNotIn applies the NotIn predicate on the "box_id" field.
func BoxIDNotIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldBoxID, vs...))
}

// BoxIDGT applies the GT predicate on the "box_id" field.
func BoxIDGT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldBoxID, v))
}

// BoxIDGTE applies the GTE predicate on the "box_id" field.
func BoxIDGTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldBoxID, v))
}

// BoxIDLT applies the LT predicate on the "box_id" field.
func BoxIDLT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldBoxID, v))
}

// BoxIDLTE applies the LTE predicate on the "box_id" field.
func BoxIDLTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldBoxID, v))
}

// BoxIDContains applies the Contains predicate on the "box_id" field.
func BoxIDContains(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContains(FieldBoxID, v))
}

// BoxIDHasPrefix applies the HasPrefix predicate on the "box_id" field.
func BoxIDHasPrefix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasPrefix(FieldBoxID, v))
}

// BoxIDHasSuffix applies the HasSuffix predicate on the "box_id" field.
func BoxIDHasSuffix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasSuffix(FieldBoxID, v))
}

// BoxIDEqualFold applies the EqualFold predicate on the "box_id" field.
func BoxIDEqualFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEqualFold(FieldBoxID, v))
}

// BoxIDContainsFold applies the ContainsFold predicate on the "box_id" field.
func BoxIDContainsFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContainsFold(FieldBoxID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContainsFold(FieldAppID, v))
}

// AppSecretEQ applies the EQ predicate on the "app_secret" field.
func AppSecretEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEQ(FieldAppSecret, v))
}

// AppSecretNEQ applies the NEQ predicate on the "app_secret" field.
func AppSecretNEQ(v string) predicate.Signature {
	return predicate.Signature(sql.FieldNEQ(FieldAppSecret, v))
}

// AppSecretIn applies the In predicate on the "app_secret" field.
func AppSecretIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldIn(FieldAppSecret, vs...))
}

// AppSecretNotIn applies the NotIn predicate on the "app_secret" field.
func AppSecretNotIn(vs ...string) predicate.Signature {
	return predicate.Signature(sql.FieldNotIn(FieldAppSecret, vs...))
}

// AppSecretGT applies the GT predicate on the "app_secret" field.
func AppSecretGT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGT(FieldAppSecret, v))
}

// AppSecretGTE applies the GTE predicate on the "app_secret" field.
func AppSecretGTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldGTE(FieldAppSecret, v))
}

// AppSecretLT applies the LT predicate on the "app_secret" field.
func AppSecretLT(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLT(FieldAppSecret, v))
}

// AppSecretLTE applies the LTE predicate on the "app_secret" field.
func AppSecretLTE(v string) predicate.Signature {
	return predicate.Signature(sql.FieldLTE(FieldAppSecret, v))
}

// AppSecretContains applies the Contains predicate on the "app_secret" field.
func AppSecretContains(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContains(FieldAppSecret, v))
}

// AppSecretHasPrefix applies the HasPrefix predicate on the "app_secret" field.
func AppSecretHasPrefix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasPrefix(FieldAppSecret, v))
}

// AppSecretHasSuffix applies the HasSuffix predicate on the "app_secret" field.
func AppSecretHasSuffix(v string) predicate.Signature {
	return predicate.Signature(sql.FieldHasSuffix(FieldAppSecret, v))
}

// AppSecretEqualFold applies the EqualFold predicate on the "app_secret" field.
func AppSecretEqualFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldEqualFold(FieldAppSecret, v))
}

// AppSecretContainsFold applies the ContainsFold predicate on the "app_secret" field.
func AppSecretContainsFold(v string) predicate.Signature {
	return predicate.Signature(sql.FieldContainsFold(FieldAppSecret, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Signature) predicate.Signature {
	return predicate.Signature(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Signature) predicate.Signature {
	return predicate.Signature(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Signature) predicate.Signature {
	return predicate.Signature(sql.NotPredicates(p))
}
