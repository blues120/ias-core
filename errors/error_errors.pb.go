// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 该错误比较含糊，只有当未知异常时才能使用，大部分情况应使用更具体的错误码
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 该错误比较含糊，只有当未知异常时才能使用，大部分情况应使用更具体的错误码
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, Error_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_INVALID_PARAM.String() && e.Code == 400
}

func ErrorInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

// 摄像机相关
func IsEmptyStreamingProtocol(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_EMPTY_STREAMING_PROTOCOL.String() && e.Code == 400
}

// 摄像机相关
func ErrorEmptyStreamingProtocol(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_EMPTY_STREAMING_PROTOCOL.String(), fmt.Sprintf(format, args...))
}

func IsInvalidRtspAddr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_INVALID_RTSP_ADDR.String() && e.Code == 400
}

func ErrorInvalidRtspAddr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_INVALID_RTSP_ADDR.String(), fmt.Sprintf(format, args...))
}

func IsStreamInfoNotfound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_STREAM_INFO_NOTFOUND.String() && e.Code == 404
}

func ErrorStreamInfoNotfound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_STREAM_INFO_NOTFOUND.String(), fmt.Sprintf(format, args...))
}

func IsCameraNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CAMERA_NOT_FOUND.String() && e.Code == 404
}

func ErrorCameraNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_CAMERA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsCameraAlreadyExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CAMERA_ALREADY_EXIST.String() && e.Code == 400
}

func ErrorCameraAlreadyExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_CAMERA_ALREADY_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsCameraUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CAMERA_UPDATE_ERROR.String() && e.Code == 400
}

func ErrorCameraUpdateError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_CAMERA_UPDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 任务相关
func IsTaskStopError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TASK_STOP_ERROR.String() && e.Code == 400
}

// 任务相关
func ErrorTaskStopError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_TASK_STOP_ERROR.String(), fmt.Sprintf(format, args...))
}

// 用户相关
func IsUserNameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_NAME_EXIST.String() && e.Code == 400
}

// 用户相关
func ErrorUserNameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_USER_NAME_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserNameOrPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_NAME_OR_PASSWORD_ERROR.String() && e.Code == 400
}

func ErrorUserNameOrPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_USER_NAME_OR_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserCaptchaVerifyError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_CAPTCHA_VERIFY_ERROR.String() && e.Code == 400
}

func ErrorUserCaptchaVerifyError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_USER_CAPTCHA_VERIFY_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserCaptchaExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_CAPTCHA_EXPIRED.String() && e.Code == 400
}

func ErrorUserCaptchaExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_USER_CAPTCHA_EXPIRED.String(), fmt.Sprintf(format, args...))
}

func IsUserRefreshTokenNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_USER_REFRESH_TOKEN_NOT_FOUND.String() && e.Code == 400
}

func ErrorUserRefreshTokenNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_USER_REFRESH_TOKEN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 订阅告警相关
func IsSubscribeNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_SUBSCRIBE_NOT_FOUND.String() && e.Code == 400
}

// 订阅告警相关
func ErrorSubscribeNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_SUBSCRIBE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 组织架构相关
func IsOrganizationNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_ORGANIZATION_NOT_FOUND.String() && e.Code == 404
}

// 组织架构相关
func ErrorOrganizationNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_ORGANIZATION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
